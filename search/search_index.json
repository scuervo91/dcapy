{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dcapy","text":"<ul> <li>Documentation http://scuervo91.github.io/dcapy</li> <li>Sorce Code https://github.com/scuervo91/dcapy</li> <li>API Url https://dcapyapi.herokuapp.com/</li> <li>PyPi https://pypi.org/project/dcapy/</li> </ul> <p>Dcapy is a Decline Curve Analysis Python package for Oil &amp; Gas that includes the classes and functions to perform a simple production forecast as well as probabilistic Well Schedules with cashflow analysis.  </p> <p>The key features are:</p> <ul> <li>Simple: Arps and Wor forecast methodologies implemented</li> <li>Schedule: Create multiple forecast periods for a single well that represent major interventions, new perforations, etc </li> <li>Scenarios: Create multiple Scenarios and evalueate their performance easily</li> <li>Cash Flow: Add cashflow parameters (Income, opex, capex) to perform a cashflow analysis to each Period and/or Scenario</li> <li>Deterministic/Probabilistic: Add probabilistic variables to add a risk analysis to both simple forecast and schedules. Automatically reschedule start production depending on the callbacks.</li> <li>Data Validation: Dcapy uses Pydantic to make data validations when creating new instances</li> <li>API: Simple API for saving models on the cloud</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+ </li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install dcapy\n\n---&gt; 100%\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"cashflow-reference/","title":"Cashflows Module","text":"<p>::: dcapy.cashflow</p>"},{"location":"dca-reference/","title":"Dca Module","text":"<p>::: dcapy.dca</p>"},{"location":"filters-reference/","title":"Filters Module","text":"<p>::: dcapy.filters</p>"},{"location":"release_notes/","title":"Release Notes","text":""},{"location":"release_notes/#0114","title":"0.1.14","text":""},{"location":"release_notes/#features","title":"Features","text":"<ul> <li>\ud83c\udfa8 add compatibility to python 3.9, 3.10, 3.11. PR #26 by ne-warwick</li> </ul>"},{"location":"release_notes/#0113","title":"0.1.13","text":""},{"location":"release_notes/#fixes","title":"Fixes","text":"<p>\ud83d\udc77 Ti (Smoothing Function): Resolved an issue with the Ti that affected the function of smoothing (exponential weighted average). The previous implementation incorrectly labeled the first value to be deleted. This issue has been fixed by utilizing the built-in function in pandas' ewm method. The beta parameter now acts as the alpha parameter in the pandas function.</p>"},{"location":"release_notes/#feature","title":"Feature","text":"<p>di_freq Support: Introduced a new feature to fit data with dates of different di_freq. </p>"},{"location":"release_notes/#0112","title":"0.1.12","text":""},{"location":"release_notes/#features_1","title":"Features","text":"<ul> <li>\ud83c\udfa8 Create cashflows from dataframe</li> </ul>"},{"location":"release_notes/#0111","title":"0.1.11","text":""},{"location":"release_notes/#feature_1","title":"Feature","text":"<ul> <li>\ud83c\udfa8 When fitting a Arps class you can now choose the upper and lower  bounds of parameter b</li> <li>\ud83c\udfa8 Adding option to provide change points to timeseries and fit every  segment and forecasting the last one *\ud83c\udfa8 Adding the option to provide in a single DataFrame production for  multiple wells, estimate the segments and create an schedule Object </li> </ul>"},{"location":"release_notes/#0110","title":"0.1.10","text":""},{"location":"release_notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix bug when printing</li> </ul>"},{"location":"release_notes/#019","title":"0.1.9","text":""},{"location":"release_notes/#fixes_2","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix Percentiles functionality when calling forecast</li> </ul>"},{"location":"release_notes/#018","title":"0.1.8","text":""},{"location":"release_notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix Weiner Proccesses index when using with Schedule module</li> </ul>"},{"location":"release_notes/#017","title":"0.1.7","text":""},{"location":"release_notes/#fixes_4","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix Broadcast shapes when provide multiple cashflow iteration and only one forecast</li> </ul>"},{"location":"release_notes/#016","title":"0.1.6","text":""},{"location":"release_notes/#fixes_5","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix Schedule Cashflow generator when using relative dates with multiple time frequencies</li> </ul>"},{"location":"release_notes/#015","title":"0.1.5","text":""},{"location":"release_notes/#fixes_6","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix Schedule module when using relative time series instead of dates.</li> <li>\ud83d\udc77 Fix when plotting the dca.Arps method.</li> </ul>"},{"location":"release_notes/#014","title":"0.1.4","text":""},{"location":"release_notes/#fixes_7","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix exporting model to file yml. Drop <code>exclude_unset</code></li> </ul>"},{"location":"release_notes/#013","title":"0.1.3","text":""},{"location":"release_notes/#features_2","title":"Features","text":"<ul> <li>\ud83c\udfa8 Add Support with Dcapy API hosted in Heroku. It allows to  upload, download, edit and delete models on the cloud. It is required to create an account.</li> </ul>"},{"location":"release_notes/#fixes_8","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix Python imports modules</li> </ul>"},{"location":"release_notes/#012","title":"0.1.2","text":""},{"location":"release_notes/#fixes_9","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix how to export the Rich HTML layout excluding both, the unset and none variables</li> <li>\ud83d\udc77 Fix Cashflow workflow when params not set in period but WellsGroup</li> </ul>"},{"location":"release_notes/#011","title":"0.1.1","text":""},{"location":"release_notes/#features_3","title":"Features","text":"<ul> <li>\ud83c\udfa8 Add support to pretty print Schemas throught Rich Package. Print Tree schemas for <code>schedule</code> Module and Summary panel for <code>dca</code> module</li> </ul>"},{"location":"release_notes/#fixes_10","title":"Fixes","text":"<ul> <li>\ud83d\udc77 Fix the how the cashflow models store on the instances to be able to run multiple times different scenarios.</li> </ul>"},{"location":"release_notes/#010","title":"0.1.0","text":"<ul> <li>Initial release!</li> </ul>"},{"location":"schedule-reference/","title":"Schedule Module","text":"<p>::: dcapy.schedule</p>"},{"location":"wiener-reference/","title":"Weiner Module","text":"<p>::: dcapy.wiener</p>"},{"location":"examples/1-Intro/","title":"Dcapy Tutorial - Introduction","text":"<p>This tutorial aims to show how to use Dcapy with most of its features. It follows a workflow built throught a Jupyter Notebook which can be replicated by the user. </p> <p>Each section gradually depends on the previous ones in order to build well defined workflows according with the needs.</p>"},{"location":"examples/1-Intro/#sections","title":"Sections","text":"<p>This tutorial is devided in the next sections in order to explain all the modules included:</p> <ul> <li> <p>Dca Module: It contains the step-by-step instructions to build basic forecast using Arps and Wor (so far) methodologies. Introduces the main concepts to declare outputs and how the classes relates with each other. </p> </li> <li> <p>Filters Module: It contains the explination for the time series filters (Working on it!) used basically to fit external data to Arps and Wor models </p> </li> <li> <p>Weiner Module: It explain how to get simple random walks simulations including the Geometric Brownonian Motion to be used, for example, to model the oil prices probabilistically. </p> </li> <li> <p>Models Module: This section explains how to implement the scheduling and cashflow features to evaluate groups of forecast, scenarios and wells not only in production behavior but also their economics  indexes.</p> </li> </ul>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/","title":"Dcapy -  First Steps","text":"In\u00a0[18]: Copied! <pre>import os\nfrom dcapy import dca\nimport numpy as np \nnp.seterr(divide='ignore')\n</pre> import os from dcapy import dca import numpy as np  np.seterr(divide='ignore')  Out[18]: <pre>{'divide': 'ignore', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}</pre> In\u00a0[19]: Copied! <pre>time1 = np.arange(10)\nqi1 = 500\ndi1 = 0.03\ndca.arps_exp_rate(time1,qi1,di1)\n</pre> time1 = np.arange(10) qi1 = 500 di1 = 0.03 dca.arps_exp_rate(time1,qi1,di1) Out[19]: <pre>array([500.        , 485.22276677, 470.88226679, 456.96559264,\n       443.46021836, 430.35398821, 417.63510571, 405.29212299,\n       393.31393053, 381.68974717])</pre> <p>Cumulative volume can be calculated  for any timestep</p> In\u00a0[20]: Copied! <pre>dca.arps_exp_cumulative(time1,qi1,di1)\n</pre> dca.arps_exp_cumulative(time1,qi1,di1)  Out[20]: <pre>array([   0.        ,  492.57444086,  970.59110693, 1434.48024548,\n       1884.65938805, 2321.53372625, 2745.49647648, 3156.92923383,\n       3556.20231556, 3943.67509439])</pre> <p>You may notice that two important things when reviewing the results.</p> <ol> <li>You have to be aware of the units. As this equations are generic the units must be consistent according you are expecting the results will look like. In other words, here the time units may be days, months, years or whatever you like, hence the declination rate you set is interpreted with respect that unit period of time.</li> <li>As the Arps equations are continious, there is no time discretization (so far) when estimating the cumulative production. As you can see at time 0 the cumulative is also 0. This approach helps to estimate at any time the rate or cumulative very fast as they not depend on previous data. (They are continious)</li> </ol> In\u00a0[21]: Copied! <pre>b = 0.5\ndca.arps_hyp_rate(time1,qi1,di1,b)\n</pre> b = 0.5 dca.arps_hyp_rate(time1,qi1,di1,b) Out[21]: <pre>array([500.        , 485.33087432, 471.29795457, 457.86497562,\n       444.99822001, 432.66630611, 420.83999663, 409.49202514,\n       398.59693878, 388.13095538])</pre> In\u00a0[22]: Copied! <pre>dca.arps_hyp_cumulative(time1,qi1,di1,b,ti=0)\n</pre> dca.arps_hyp_cumulative(time1,qi1,di1,b,ti=0) Out[22]: <pre>array([  -0.        ,  492.61083744,  970.87378641, 1435.40669856,\n       1886.79245283, 2325.58139535, 2752.29357798, 3167.42081448,\n       3571.42857143, 3964.75770925])</pre> In\u00a0[23]: Copied! <pre>b = 1\ndca.arps_hyp_rate(time1,qi1,di1,b)\n</pre> b = 1 dca.arps_hyp_rate(time1,qi1,di1,b) Out[23]: <pre>array([500.        , 485.4368932 , 471.69811321, 458.71559633,\n       446.42857143, 434.7826087 , 423.72881356, 413.2231405 ,\n       403.22580645, 393.7007874 ])</pre> In\u00a0[24]: Copied! <pre>dca.arps_arm_cumulative(time1,qi1,di1,b,ti=0)\n</pre> dca.arps_arm_cumulative(time1,qi1,di1,b,ti=0) Out[24]: <pre>array([   0.        ,  492.64670403,  971.14846873, 1436.29493735,\n       1888.81142178, 2329.36570625, 2758.57397463, 3177.00599348,\n       3585.18966028, 3983.61500784])</pre> In\u00a0[25]: Copied! <pre>print('Examples Arps Forecast function - Exponential')\n\ntime1 = [0,1,2,3,4]\nqi1 = 500,\ndi1 = 0.03\nb1 = 0 \nf1 = dca.arps_forecast(time1,qi1,di1,b1)\nprint(f1)\n</pre> print('Examples Arps Forecast function - Exponential')  time1 = [0,1,2,3,4] qi1 = 500, di1 = 0.03 b1 = 0  f1 = dca.arps_forecast(time1,qi1,di1,b1) print(f1)  <pre>Examples Arps Forecast function - Exponential\n[500.         485.22276677 470.88226679 456.96559264 443.46021836]\n</pre> In\u00a0[26]: Copied! <pre>print('Examples Arps Forecast function - Armonic')\n\ntime1 = [0,1,2,3,4]\nqi1 = 500,\ndi1 = 0.03\nb1 = 1\nf1 = dca.arps_forecast(time1,qi1,di1,b1)\nprint(f1)\n</pre> print('Examples Arps Forecast function - Armonic')  time1 = [0,1,2,3,4] qi1 = 500, di1 = 0.03 b1 = 1 f1 = dca.arps_forecast(time1,qi1,di1,b1) print(f1) <pre>Examples Arps Forecast function - Armonic\n[500.         485.4368932  471.69811321 458.71559633 446.42857143]\n</pre> In\u00a0[27]: Copied! <pre>print('Examples Arps Forecast function - Exponential, Armonic &amp; Hyperbolic')\n\ntime1 = [0,1,2,3,4]\nqi1 = 500,\ndi1 = 0.03\nb1 = [0,0.5,1]\nf1 = dca.arps_forecast(time1,qi1,di1,b1)\nprint(f1)\n</pre> print('Examples Arps Forecast function - Exponential, Armonic &amp; Hyperbolic')  time1 = [0,1,2,3,4] qi1 = 500, di1 = 0.03 b1 = [0,0.5,1] f1 = dca.arps_forecast(time1,qi1,di1,b1) print(f1) <pre>Examples Arps Forecast function - Exponential, Armonic &amp; Hyperbolic\n[[500.         500.         500.        ]\n [485.22276677 485.33087432 485.4368932 ]\n [470.88226679 471.29795457 471.69811321]\n [456.96559264 457.86497562 458.71559633]\n [443.46021836 444.99822001 446.42857143]]\n</pre> <p>The result is a 2D numpy array containing three different forecast scenarios (Due to the three <code>b</code> values passed).</p> <p>The feature to make multiple forecast also applies to the other perameters.</p> <p>Note: If there are more than one parameters with multiple values, the number of scenarios must be consistent with a numpy broadcast shape. That means if you provide three values for <code>b</code> you need to provide either one or three values for the others to excecute the function.</p> In\u00a0[28]: Copied! <pre>print('Examples Arps Forecast function - More than one Parameters with multiple values')\n\ntime1 = np.arange(10)\nqi1 = [1500,1000,500, 250],\ndi1 = 0.03\nb1 = [0,0.25,0.75,1]\nf1 = dca.arps_forecast(time1,qi1,di1,b1)\nprint(f1)\n</pre> print('Examples Arps Forecast function - More than one Parameters with multiple values')  time1 = np.arange(10) qi1 = [1500,1000,500, 250], di1 = 0.03 b1 = [0,0.25,0.75,1] f1 = dca.arps_forecast(time1,qi1,di1,b1) print(f1) <pre>Examples Arps Forecast function - More than one Parameters with multiple values\n[[1500.         1000.          500.          250.        ]\n [1455.66830032  970.55417193  485.38414057  242.7184466 ]\n [1412.64680038  942.18423029  471.49991315  235.8490566 ]\n [1370.89677791  914.84334525  458.29609778  229.35779817]\n [1330.38065508  888.48704792  445.72604011  223.21428571]\n [1291.06196464  863.07309523  433.74716057  217.39130435]\n [1252.90531712  838.56134359  422.32052508  211.86440678]\n [1215.87636896  814.91363042  411.4104683   206.61157025]\n [1179.9417916   792.09366324  400.98426232  201.61290323]\n [1145.06924151  770.06691564  391.01182445  196.8503937 ]]\n</pre> <p>Here, there were provided four values for <code>qi</code> and <code>b</code>. The result is a 2D numpy array with 10 rows (Time) and 4 columns (scenarios).</p> <p>Here function excecute the operation like an 'element-wise' for the multiple values.</p> <ul> <li>The first column uses the 1500 as <code>qi</code> &amp; 0 as <code>b</code></li> <li>The second column uses the 1000 as <code>qi</code> &amp; 0.25 as <code>b</code></li> <li>The thrid column uses the 500 as <code>qi</code> &amp; 0.75 as <code>b</code></li> <li>The fourth column uses the 250 as <code>qi</code> &amp; 1 as <code>b</code>.</li> </ul> <p>They all share the declination parameter 0.3 as <code>di</code></p> In\u00a0[29]: Copied! <pre>print('Examples Arps Forecast function - Multiple time arrays')\n\ntime1 = [[0,1,2,3,4,5,6,7,8,9,10],[None,None,None,None,None,0,1,2,3,4,5]]\nqi1 = 500,\ndi1 = 0.03\nb1 = 0 \nf1 = dca.arps_forecast(time1,qi1,di1,b1)\nprint(f1)\n</pre> print('Examples Arps Forecast function - Multiple time arrays')  time1 = [[0,1,2,3,4,5,6,7,8,9,10],[None,None,None,None,None,0,1,2,3,4,5]] qi1 = 500, di1 = 0.03 b1 = 0  f1 = dca.arps_forecast(time1,qi1,di1,b1) print(f1) <pre>Examples Arps Forecast function - Multiple time arrays\n[[500.                  nan]\n [485.22276677          nan]\n [470.88226679          nan]\n [456.96559264          nan]\n [443.46021836          nan]\n [430.35398821 500.        ]\n [417.63510571 485.22276677]\n [405.29212299 470.88226679]\n [393.31393053 456.96559264]\n [381.68974717 443.46021836]\n [370.40911034 430.35398821]]\n</pre> <p>The last result can be also achieve by setting two values for <code>ti</code> property.</p> In\u00a0[30]: Copied! <pre>print('Examples Arps Forecast function -  Multiple Ti values')\n\ntime1 = [0,1,2,3,4,5,6,7,8,9,10]\nqi1 = 500,\ndi1 = 0.03\nb1 = 0 \nf1 = dca.arps_forecast(time1,qi1,di1,b1,ti=[0,5])\nprint(f1)\n</pre> print('Examples Arps Forecast function -  Multiple Ti values')  time1 = [0,1,2,3,4,5,6,7,8,9,10] qi1 = 500, di1 = 0.03 b1 = 0  f1 = dca.arps_forecast(time1,qi1,di1,b1,ti=[0,5]) print(f1) <pre>Examples Arps Forecast function -  Multiple Ti values\n[[500.                  nan]\n [485.22276677          nan]\n [470.88226679          nan]\n [456.96559264          nan]\n [443.46021836          nan]\n [430.35398821 500.        ]\n [417.63510571 485.22276677]\n [405.29212299 470.88226679]\n [393.31393053 456.96559264]\n [381.68974717 443.46021836]\n [370.40911034 430.35398821]]\n</pre> In\u00a0[31]: Copied! <pre>print('Examples Arps Cumulative function - Single values')\n\ntime1 = np.arange(10)\nqi1 = 1000,\ndi1 = 0.03\nb1 = 0\nf1 = dca.arps_cumulative(time1,qi1,di1,b1)\nprint(f1)\n</pre> print('Examples Arps Cumulative function - Single values')  time1 = np.arange(10) qi1 = 1000, di1 = 0.03 b1 = 0 f1 = dca.arps_cumulative(time1,qi1,di1,b1) print(f1) <pre>Examples Arps Cumulative function - Single values\n[   0.          985.14888172 1941.18221386 2868.96049096 3769.31877609\n 4643.0674525  5490.99295296 6313.85846766 7112.40463111 7887.35018877]\n</pre> In\u00a0[32]: Copied! <pre>print('Examples Arps Cumulative function - More than one Parameters with multiple values')\n\ntime1 = np.arange(10)\nqi1 = [1500,1000,500, 250],\ndi1 = 0.03\nb1 = [0,0.25,0.75,1]\nf1 = dca.arps_cumulative(time1,qi1,di1,b1)\nprint(f1)\n</pre> print('Examples Arps Cumulative function - More than one Parameters with multiple values')  time1 = np.arange(10) qi1 = [1500,1000,500, 250], di1 = 0.03 b1 = [0,0.25,0.75,1] f1 = dca.arps_cumulative(time1,qi1,di1,b1) print(f1) <pre>Examples Arps Cumulative function - More than one Parameters with multiple values\n[[    0.            -0.            -0.             0.        ]\n [ 1477.72332257   985.18541255   492.62883611   246.32335201]\n [ 2911.77332079  1941.46694484   971.0121016    485.57423437]\n [ 4303.44073644  2869.89686578  1435.85541579   718.14746868]\n [ 5653.97816414  3771.48180653  1887.81550453   944.40571089]\n [ 6964.60117875  4647.18505318  2327.50451494  1164.68285313]\n [ 8236.48942944  5497.92870867  2755.49387077  1379.28698731]\n [ 9470.78770149  6324.59573242  3172.31772543  1588.50299674]\n [10668.60694667  7128.03186523  3578.47606162  1792.59483014]\n [11831.02528316  7909.04744689  3974.43747962  1991.80750392]]\n</pre> In\u00a0[33]: Copied! <pre>print('Examples Arps Cumulative function -  Multiple Ti values')\n\ntime1 = [0,1,2,3,4,5,6,7,8,9,10]\nqi1 = 500,\ndi1 = 0.03\nb1 = 0 \nf1 = dca.arps_cumulative(time1,qi1,di1,b1,ti=[0,5])\nprint(f1)\n</pre> print('Examples Arps Cumulative function -  Multiple Ti values')  time1 = [0,1,2,3,4,5,6,7,8,9,10] qi1 = 500, di1 = 0.03 b1 = 0  f1 = dca.arps_cumulative(time1,qi1,di1,b1,ti=[0,5]) print(f1) <pre>Examples Arps Cumulative function -  Multiple Ti values\n[[   0.                   nan]\n [ 492.57444086           nan]\n [ 970.59110693           nan]\n [1434.48024548           nan]\n [1884.65938805           nan]\n [2321.53372625    0.        ]\n [2745.49647648  492.57444086]\n [3156.92923383  970.59110693]\n [3556.20231556 1434.48024548]\n [3943.67509439 1884.65938805]\n [4319.69632197 2321.53372625]]\n</pre> <p>An additional and usefull function to estimate the time at which the forecast reaches certain rate is also included.</p> <p>Let's define an Arps forecast</p> In\u00a0[34]: Copied! <pre>print('Examples Arps Forecast function -  Multiple Ti values')\n\ntime1 = [0,1,2,3,4,5,6,7,8,9,10]\nqi1 = 500,\ndi1 = 0.03\nb1 = 0 \nf1 = dca.arps_forecast(time1,qi1,di1,b1)\nprint(f1)\n\nprint('Estimate the time when the rate is 400')\ntime_limit = dca.arps_rate_time(qi1,di1,b1,400)\nprint(time_limit)\n</pre> print('Examples Arps Forecast function -  Multiple Ti values')  time1 = [0,1,2,3,4,5,6,7,8,9,10] qi1 = 500, di1 = 0.03 b1 = 0  f1 = dca.arps_forecast(time1,qi1,di1,b1) print(f1)  print('Estimate the time when the rate is 400') time_limit = dca.arps_rate_time(qi1,di1,b1,400) print(time_limit) <pre>Examples Arps Forecast function -  Multiple Ti values\n[500.         485.22276677 470.88226679 456.96559264 443.46021836\n 430.35398821 417.63510571 405.29212299 393.31393053 381.68974717\n 370.40911034]\nEstimate the time when the rate is 400\n[7]\n</pre>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#dcapy-first-steps","title":"Dcapy -  First Steps\u00b6","text":"<p>In this firts section is introduced the basic classes and functions to make Forecast by applying the Arps equations</p>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#basics-equations","title":"Basics Equations\u00b6","text":"<p>First Section will explore the Arps Declination Analysis equations. Starting from Equations used to calculate rate then cumulatives.</p> <p>The library numpy is used to performed the majority of operations</p>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#aprs-equations","title":"Aprs Equations\u00b6","text":"<p>Arps proposed that the shape of the production rate vs time can be described mathematically by three types of behavior:</p> <ul> <li>Exponential Decline: Where <code>b=0</code></li> <li>Harmonic Decline: Where <code>b=1</code></li> <li>Hyperbolic Decline: Where <code>0 &lt; b &lt; 1</code></li> </ul> <p>$$  q_{t}=\\frac{q_{i}}{(1+bD_{i}t)^{\\frac{1}{b}}} $$</p> <p>According to the equations the are four properties you have to provide to make a forecast using Arps equations.</p> <ul> <li>Decline rate <code>di</code></li> <li>b coefficient <code>b</code></li> <li>Initial Time <code>Ti</code></li> <li>Initial rate <code>qi</code></li> <li>Times to make Forecast <code>t</code></li> </ul>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#exponential-b-0-examples","title":"Exponential b = 0, Examples\u00b6","text":"<p>The time array used with this function is relative to a Initial Time which is always 0</p> <p>Inside the <code>dcapy.dca</code> module there are the functions required to estimate the declination given those parameters.</p>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#hyperbolic-0b1-examples","title":"Hyperbolic 0&lt;b&lt;1, Examples\u00b6","text":"<p>Like Exponential case, the Hyperbolic equations works in the same way with the difference you have to set the <code>b</code> coefficient</p>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#armonic-examples","title":"Armonic, Examples\u00b6","text":""},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#high-level-functions","title":"High-level Functions\u00b6","text":"<p>Although the above functions are available in the module, they are not expected to be used by the user. These are low-level functions that are wrapped into other high-level functions that provide more functionalities.</p> <p><code>arps_forecast</code> and <code>arps_cumulative</code> are the wrapper functions that independently of the b, It internally uses the appropiate equation. Next are the replicates of the initial example using the high-level functions.</p>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#exponential","title":"Exponential\u00b6","text":""},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#armonic","title":"Armonic\u00b6","text":""},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#exponential-armonic-hyperbolic","title":"Exponential, Armonic &amp; Hyperbolic\u00b6","text":"<p>One of the advantages of this function is the ability to accept multiple values of any of the parameters to create multiple scenarios of the forecast. Next we want to estimate the forecast with three different <code>b</code> parameter</p>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#multiple-initial-time-values","title":"Multiple initial time values\u00b6","text":"<p>There is also the posibility to set multiple initial values, which means the forecast would start at different times in the array.</p> <p>When you set a time array like all the examples above, you really are setting a delta time array with respect to a Initial Time which is by default 0.</p> <p>In this case you can define a time delta different from 0 or provide different time arrays.</p> <p>The next example defines two scenarios in the time array which the forecast would start at different times.</p>"},{"location":"examples/1-basics/1a-Tutorial-Arps_basic_dca/#arps-cumulative-function","title":"Arps Cumulative Function\u00b6","text":"<p>In the same way the <code>arps_forecast</code> function works the <code>arps_cumulative</code> Function does.</p>"},{"location":"examples/1-basics/1b-Tutorial-Arps_Class/","title":"Dcapy -  Arps Class","text":"In\u00a0[13]: Copied! <pre>import os\nfrom dcapy import dca\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\nnp.seterr(divide='ignore')\n</pre> import os from dcapy import dca import numpy as np  import pandas as pd from datetime import date import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats np.seterr(divide='ignore') Out[13]: <pre>{'divide': 'ignore', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}</pre> In\u00a0[14]: Copied! <pre># Define a Simple Arps Class\n\na1 = dca.Arps(\n    ti = 0,\n    di = 0.03,\n    qi = 1500,\n    b = 0,\n    freq_di='M'\n)\n\nprint(a1)\n</pre> # Define a Simple Arps Class  a1 = dca.Arps(     ti = 0,     di = 0.03,     qi = 1500,     b = 0,     freq_di='M' )  print(a1)  <pre>Declination \n Ti: 0 \n Qi: 1500.0 bbl/d \n Di: 0.03 M \n b: 0.0\n</pre> <p>We have defined a Arps class with a nominal declination rate of 0.03 monthly. This is usefull if you want to make a forecast on differnt time basis. You can get forecast on daily, monthly or annual basis from the same Arps Class</p> In\u00a0[15]: Copied! <pre>print('Calculate Daily Basis each day')\n\nfr = a1.forecast(start=0,end=1095,freq_input='D',freq_output='D')\nprint(fr)\n</pre> print('Calculate Daily Basis each day')  fr = a1.forecast(start=0,end=1095,freq_input='D',freq_output='D') print(fr) <pre>Calculate Daily Basis each day\n         oil_rate        oil_cum  iteration   oil_volume\ndate                                                    \n0     1500.000000       0.000000          0  1499.250250\n1     1498.500750    1499.250250          0  1498.501000\n2     1497.002998    2997.001999          0  1497.003248\n3     1495.506743    4493.256745          0  1495.506993\n4     1494.011984    5988.015984          0  1494.012233\n...           ...            ...        ...          ...\n1090   504.324741  995675.259440          0   504.324825\n1091   503.820668  996179.332102          0   503.820752\n1092   503.317099  996682.900944          0   503.317183\n1093   502.814034  997185.966468          0   502.814117\n1094   502.311471  997688.529178          0   502.562710\n\n[1095 rows x 4 columns]\n</pre> <p>Let's Plot it instead</p> In\u00a0[16]: Copied! <pre>print('Calculate Daily Basis each day - Plot')\n\nfr = a1.plot(start=0,end=1095,freq_input='D',freq_output='D')\n</pre> print('Calculate Daily Basis each day - Plot')  fr = a1.plot(start=0,end=1095,freq_input='D',freq_output='D') <pre>Calculate Daily Basis each day - Plot\n</pre> <p>Generate forecast with more periods alternatives</p> In\u00a0[17]: Copied! <pre>print('Calculate Daily Basis each Month')\n\nfr = a1.forecast(start=0,end=1096,freq_input='D',freq_output='M')\nprint(fr)\n\na1.plot(start=0,end=1096,freq_input='D',freq_output='M',rate_kw=dict(palette=['darkgreen'],linestyle='-',linewidth=5))\n</pre> print('Calculate Daily Basis each Month')  fr = a1.forecast(start=0,end=1096,freq_input='D',freq_output='M') print(fr)  a1.plot(start=0,end=1096,freq_input='D',freq_output='M',rate_kw=dict(palette=['darkgreen'],linestyle='-',linewidth=5)) <pre>Calculate Daily Basis each Month\n         oil_rate        oil_cum  iteration    oil_volume\ndate                                                     \n0     1500.000000       0.000000          0  44331.699677\n30    1455.668300   44331.699677          0  43676.599812\n60    1412.646800   87353.199624          0  42385.761208\n90    1370.896778  129103.222093          0  41133.072650\n120   1330.380655  169619.344924          0  39917.406635\n150   1291.061965  208938.035362          0  38737.668979\n180   1252.905317  247094.682883          0  37592.797841\n210   1215.876369  284123.631045          0  36481.762759\n240   1179.941792  320058.208400          0  35403.563725\n270   1145.069242  354930.758495          0  34357.230289\n300   1111.227331  388772.668977          0  33341.820679\n330   1078.385600  421614.399852          0  32356.420958\n360   1046.514489  453485.510893          0  31400.144200\n390   1015.585312  484414.688253          0  30472.129692\n420    985.570230  514429.770277          0  29571.542157\n450    956.442227  543557.772567          0  28697.571007\n480    928.175088  571824.912291          0  27849.429607\n510    900.743368  599256.631782          0  27026.354574\n540    874.122379  625877.621439          0  26227.605085\n570    848.288158  651711.841951          0  25452.462210\n600    823.217454  676782.545859          0  24700.228269\n630    798.887702  701112.298490          0  23970.226202\n660    775.277002  724722.998262          0  23261.798956\n690    752.364104  747635.896401          0  22574.308899\n720    730.128384  769871.616060          0  21907.137244\n750    708.549829  791450.170888          0  21259.683491\n780    687.609017  812390.983042          0  20631.364889\n810    667.287099  832712.900666          0  20021.615907\n840    647.565785  852434.214856          0  19429.887731\n870    628.427324  871572.676129          0  18855.647766\n900    609.854490  890145.510389          0  18298.379157\n930    591.830566  908169.434443          0  17757.580324\n960    574.339329  925660.671037          0  17232.764512\n990    557.365037  942634.963467          0  16723.459352\n1020   540.892410  959107.589740          0  16229.206433\n1050   524.906624  975093.376333          0  15749.560896\n1080   509.393288  990606.711533          0  15513.335199\n</pre> In\u00a0[18]: Copied! <pre>print('Calculate Daily Basis each Year')\n\nfr = a1.forecast(start=0,end=1096,freq_input='D',freq_output='A')\nprint(fr)\n\n#Assign to a matplotlib axes\nfig, ax = plt.subplots(figsize=(10,7))\n\na1.plot(start=0,end=1096,freq_input='D',freq_output='A',cum=True,rate_kw = {'palette':['green']}, ax=ax)\nax.set_title('Arps Forecast on Daily Basis each year', fontsize=14)\nax.set_xlabel('Time [days]', fontsize=10)\nax.set_ylabel('Oil Rate [bbl/d]', fontsize=10)\n</pre> print('Calculate Daily Basis each Year')  fr = a1.forecast(start=0,end=1096,freq_input='D',freq_output='A') print(fr)  #Assign to a matplotlib axes fig, ax = plt.subplots(figsize=(10,7))  a1.plot(start=0,end=1096,freq_input='D',freq_output='A',cum=True,rate_kw = {'palette':['green']}, ax=ax) ax.set_title('Arps Forecast on Daily Basis each year', fontsize=14) ax.set_xlabel('Time [days]', fontsize=10) ax.set_ylabel('Oil Rate [bbl/d]', fontsize=10) <pre>Calculate Daily Basis each Year\n         oil_rate        oil_cum  iteration     oil_volume\ndate                                                      \n0     1500.000000       0.000000          0  458705.023683\n365   1041.294976  458705.023683          0  388568.257432\n730    722.863485  777136.514865          0  269742.782947\n1095   501.809410  998190.589577          0  221054.074712\n</pre> Out[18]: <pre>Text(0, 0.5, 'Oil Rate [bbl/d]')</pre> In\u00a0[19]: Copied! <pre>print('Calculate Monthly Basis each Month')\n\nfr = a1.forecast(start=0,end=37,freq_input='M',freq_output='M')\nprint(fr)\n\nfig, ax = plt.subplots()\na1.plot(start=0,end=37,freq_input='M',freq_output='M',rate_kw=dict(palette=['darkgreen'],linestyle='-.',linewidth=2))\nax.set_title('Arps Forecast on Month Basis each month', fontsize=14)\nax.set_xlabel('Time [months]', fontsize=10)\nax.set_ylabel('Oil Rate [bbl/d]', fontsize=10)\n</pre> print('Calculate Monthly Basis each Month')  fr = a1.forecast(start=0,end=37,freq_input='M',freq_output='M') print(fr)  fig, ax = plt.subplots() a1.plot(start=0,end=37,freq_input='M',freq_output='M',rate_kw=dict(palette=['darkgreen'],linestyle='-.',linewidth=2)) ax.set_title('Arps Forecast on Month Basis each month', fontsize=14) ax.set_xlabel('Time [months]', fontsize=10) ax.set_ylabel('Oil Rate [bbl/d]', fontsize=10)  <pre>Calculate Monthly Basis each Month\n         oil_rate        oil_cum  iteration    oil_volume\ndate                                                     \n0     1500.000000       0.000000          0  44331.699677\n1     1455.668300   44331.699677          0  43676.599812\n2     1412.646800   87353.199624          0  42385.761208\n3     1370.896778  129103.222093          0  41133.072650\n4     1330.380655  169619.344924          0  39917.406635\n5     1291.061965  208938.035362          0  38737.668979\n6     1252.905317  247094.682883          0  37592.797841\n7     1215.876369  284123.631045          0  36481.762759\n8     1179.941792  320058.208400          0  35403.563725\n9     1145.069242  354930.758495          0  34357.230289\n10    1111.227331  388772.668977          0  33341.820679\n11    1078.385600  421614.399852          0  32356.420958\n12    1046.514489  453485.510893          0  31400.144200\n13    1015.585312  484414.688253          0  30472.129692\n14     985.570230  514429.770277          0  29571.542157\n15     956.442227  543557.772567          0  28697.571007\n16     928.175088  571824.912291          0  27849.429607\n17     900.743368  599256.631782          0  27026.354574\n18     874.122379  625877.621439          0  26227.605085\n19     848.288158  651711.841951          0  25452.462210\n20     823.217454  676782.545859          0  24700.228269\n21     798.887702  701112.298490          0  23970.226202\n22     775.277002  724722.998262          0  23261.798956\n23     752.364104  747635.896401          0  22574.308899\n24     730.128384  769871.616060          0  21907.137244\n25     708.549829  791450.170888          0  21259.683491\n26     687.609017  812390.983042          0  20631.364889\n27     667.287099  832712.900666          0  20021.615907\n28     647.565785  852434.214856          0  19429.887731\n29     628.427324  871572.676129          0  18855.647766\n30     609.854490  890145.510389          0  18298.379157\n31     591.830566  908169.434443          0  17757.580324\n32     574.339329  925660.671037          0  17232.764512\n33     557.365037  942634.963467          0  16723.459352\n34     540.892410  959107.589740          0  16229.206433\n35     524.906624  975093.376333          0  15749.560896\n36     509.393288  990606.711533          0  15513.335199\n</pre> Out[19]: <pre>Text(0, 0.5, 'Oil Rate [bbl/d]')</pre> In\u00a0[20]: Copied! <pre>print('Calculate Monthly Basis each Year')\n\nfr = a1.forecast(start=0,end=37,freq_input='M',freq_output='A')\nprint(fr)\n\nfig, ax = plt.subplots()\na1.plot(start=0,end=37,freq_input='M',freq_output='A',rate_kw=dict(palette=['darkgreen'],linestyle='-.',linewidth=2))\nax.set_title('Arps Forecast on Month Basis each year', fontsize=14)\nax.set_xlabel('Time [months]', fontsize=10)\nax.set_ylabel('Oil Rate [bbl/d]', fontsize=10)\n</pre> print('Calculate Monthly Basis each Year')  fr = a1.forecast(start=0,end=37,freq_input='M',freq_output='A') print(fr)  fig, ax = plt.subplots() a1.plot(start=0,end=37,freq_input='M',freq_output='A',rate_kw=dict(palette=['darkgreen'],linestyle='-.',linewidth=2)) ax.set_title('Arps Forecast on Month Basis each year', fontsize=14) ax.set_xlabel('Time [months]', fontsize=10) ax.set_ylabel('Oil Rate [bbl/d]', fontsize=10) <pre>Calculate Monthly Basis each Year\n         oil_rate        oil_cum  iteration     oil_volume\ndate                                                      \n0     1500.000000       0.000000          0  453485.510893\n12    1046.514489  453485.510893          0  384935.808030\n24     730.128384  769871.616060          0  268560.600320\n36     509.393288  990606.711533          0  220735.095473\n</pre> Out[20]: <pre>Text(0, 0.5, 'Oil Rate [bbl/d]')</pre> In\u00a0[21]: Copied! <pre>print('Calculate Annual Basis each Year')\n\nfr = a1.forecast(start=0,end=4,freq_input='A',freq_output='A')\nprint(fr)\n\nfig, ax = plt.subplots()\na1.plot(start=0,end=4,freq_input='A',freq_output='A',rate_kw=dict(palette=['darkgreen'],linestyle='-.',linewidth=2))\nax.set_title('Arps Forecast on Annual Basis each year', fontsize=14)\nax.set_xlabel('Time [Years]', fontsize=10)\nax.set_ylabel('Oil Rate [bbl/d]', fontsize=10)\n</pre> print('Calculate Annual Basis each Year')  fr = a1.forecast(start=0,end=4,freq_input='A',freq_output='A') print(fr)  fig, ax = plt.subplots() a1.plot(start=0,end=4,freq_input='A',freq_output='A',rate_kw=dict(palette=['darkgreen'],linestyle='-.',linewidth=2)) ax.set_title('Arps Forecast on Annual Basis each year', fontsize=14) ax.set_xlabel('Time [Years]', fontsize=10) ax.set_ylabel('Oil Rate [bbl/d]', fontsize=10) <pre>Calculate Annual Basis each Year\n         oil_rate       oil_cum  iteration     oil_volume\ndate                                                     \n0     1500.000000  0.000000e+00          0  459783.920767\n1     1046.514489  4.597839e+05          0  390282.138697\n2      730.128384  7.805643e+05          0  272290.608657\n3      509.393288  1.004365e+06          0  223800.860687\n</pre> Out[21]: <pre>Text(0, 0.5, 'Oil Rate [bbl/d]')</pre> In\u00a0[22]: Copied! <pre># Define an Arps Class with multiple values\n\na2 = dca.Arps(\n    ti = 0,\n    di = 0.03,\n    qi = [1500,1000,500],\n    b = 0,\n    freq_di='M'\n)\n\nprint(a2)\n</pre> # Define an Arps Class with multiple values  a2 = dca.Arps(     ti = 0,     di = 0.03,     qi = [1500,1000,500],     b = 0,     freq_di='M' )  print(a2) <pre>Declination \n Ti: 0 \n Qi: [1500.0, 1000.0, 500.0] bbl/d \n Di: 0.03 M \n b: 0.0\n</pre> In\u00a0[23]: Copied! <pre>print('Calculate Monthly Basis each month - Multiple parameters')\n\nfr = a2.forecast(start=0,end=12,freq_input='M',freq_output='M')\n#print(fr)\n\nfig, ax = plt.subplots()\na2.plot(start=0,end=12,freq_input='M',freq_output='M')\n</pre> print('Calculate Monthly Basis each month - Multiple parameters')  fr = a2.forecast(start=0,end=12,freq_input='M',freq_output='M') #print(fr)  fig, ax = plt.subplots() a2.plot(start=0,end=12,freq_input='M',freq_output='M')  <pre>Calculate Monthly Basis each month - Multiple parameters\n</pre> In\u00a0[24]: Copied! <pre># Define an Arps Class with multiple values - Fluid rate\n\na3 = dca.Arps(\n    ti = 0,\n    di = 0.03,\n    qi = [1500,1450],\n    b = [0,1],\n    freq_di='M', \n    fluid_rate = 2000\n)\n\nfr = a3.forecast(start=0,end=12,freq_input='M',freq_output='M')\nprint(fr)\n</pre> # Define an Arps Class with multiple values - Fluid rate  a3 = dca.Arps(     ti = 0,     di = 0.03,     qi = [1500,1450],     b = [0,1],     freq_di='M',      fluid_rate = 2000 )  fr = a3.forecast(start=0,end=12,freq_input='M',freq_output='M') print(fr) <pre>         oil_rate        oil_cum  iteration    oil_volume  fluid_rate  \\\ndate                                                                    \n0     1500.000000       0.000000          0  44331.699677      2000.0   \n1     1455.668300   44331.699677          0  43676.599812      2000.0   \n2     1412.646800   87353.199624          0  42385.761208      2000.0   \n3     1370.896778  129103.222093          0  41133.072650      2000.0   \n4     1330.380655  169619.344924          0  39917.406635      2000.0   \n5     1291.061965  208938.035362          0  38737.668979      2000.0   \n6     1252.905317  247094.682883          0  37592.797841      2000.0   \n7     1215.876369  284123.631045          0  36481.762759      2000.0   \n8     1179.941792  320058.208400          0  35403.563725      2000.0   \n9     1145.069242  354930.758495          0  34357.230289      2000.0   \n10    1111.227331  388772.668977          0  33341.820679      2000.0   \n11    1078.385600  421614.399852          0  32841.730875      2000.0   \n0     1450.000000       0.000000          1  42860.263250      2000.0   \n1     1407.766990   42860.263250          1  42244.958390      2000.0   \n2     1367.924528   84489.916780          1  41048.698150      2000.0   \n3     1330.275229  124957.659550          1  39918.338458      2000.0   \n4     1294.642857  164326.593695          1  38848.578447      2000.0   \n5     1260.869565  202654.816444          1  37834.671049      2000.0   \n6     1228.813559  239995.935792          1  36872.352494      2000.0   \n7     1198.347107  276399.521433          1  35957.782326      2000.0   \n8     1169.354839  311911.500445          1  35087.492125      2000.0   \n9     1141.732283  346574.505682          1  34258.341517      2000.0   \n10    1115.384615  380428.183478          1  33467.480278      2000.0   \n11    1090.225564  413509.466239          1  33081.282761      2000.0   \n\n      water_rate       bsw       wor      water_cum  fluid_cum  water_volume  \\\ndate                                                                           \n0     500.000000  0.250000  0.333333       0.000000        0.0  16329.950990   \n1     544.331700  0.272166  0.373939   16329.950990    60000.0  16975.273490   \n2     587.353200  0.293677  0.415782   33950.546979   120000.0  18246.846326   \n3     629.103222  0.314552  0.458899   52823.643642   180000.0  19480.838505   \n4     669.619345  0.334810  0.503329   72912.223990   240000.0  20678.360704   \n5     708.938035  0.354469  0.549112   94180.365050   300000.0  21840.490774   \n6     747.094683  0.373547  0.596290  116593.205537   360000.0  22968.274709   \n7     784.123631  0.392062  0.644904  140116.914468   420000.0  24062.727592   \n8     820.058208  0.410029  0.694999  164718.660720   480000.0  25124.834503   \n9     854.930758  0.427465  0.746619  190366.583475   540000.0  26155.551412   \n10    888.772669  0.444386  0.799812  217029.763544   600000.0  27155.806032   \n11    921.614400  0.460807  0.854624  244678.195540   660000.0  27648.431996   \n0     550.000000  0.275000  0.379310       0.000000        0.0  17766.990291   \n1     592.233010  0.296117  0.420690   17766.990291    60000.0  18364.627221   \n2     632.075472  0.316038  0.462069   36729.254442   120000.0  19527.003635   \n3     669.724771  0.334862  0.503448   56820.997561   180000.0  20626.228702   \n4     705.357143  0.352679  0.544828   77981.711847   240000.0  21667.313665   \n5     739.130435  0.369565  0.586207  100155.624891   300000.0  22654.753132   \n6     771.186441  0.385593  0.627586  123291.218111   360000.0  23592.589999   \n7     801.652893  0.400826  0.668966  147340.804888   420000.0  24484.470808   \n8     830.645161  0.415323  0.710345  172260.159727   480000.0  25333.693167   \n9     858.267717  0.429134  0.751724  198008.191223   540000.0  26143.246517   \n10    884.615385  0.442308  0.793103  224546.652761   600000.0  26915.847311   \n11    909.774436  0.454887  0.834483  251839.885844   660000.0  27293.233083   \n\n      fluid_volume  \ndate                \n0          60000.0  \n1          60000.0  \n2          60000.0  \n3          60000.0  \n4          60000.0  \n5          60000.0  \n6          60000.0  \n7          60000.0  \n8          60000.0  \n9          60000.0  \n10         60000.0  \n11         60000.0  \n0          60000.0  \n1          60000.0  \n2          60000.0  \n3          60000.0  \n4          60000.0  \n5          60000.0  \n6          60000.0  \n7          60000.0  \n8          60000.0  \n9          60000.0  \n10         60000.0  \n11         60000.0  \n</pre> <pre>/Users/scuervo91/Documents/dev/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n</pre> In\u00a0[25]: Copied! <pre>a4 = dca.Arps(\n    ti = 0,\n    di = 0.03,\n    qi = [1500,1450],\n    b = [0,1],\n    freq_di='M', \n    bsw = 0.6\n)\n\nfr = a4.forecast(start=0,end=12,freq_input='M',freq_output='M')\nprint(fr)\n</pre> a4 = dca.Arps(     ti = 0,     di = 0.03,     qi = [1500,1450],     b = [0,1],     freq_di='M',      bsw = 0.6 )  fr = a4.forecast(start=0,end=12,freq_input='M',freq_output='M') print(fr) <pre>         oil_rate        oil_cum  iteration    oil_volume  bsw   water_rate  \\\ndate                                                                          \n0     1500.000000       0.000000          0  44331.699677  0.6  2250.000000   \n1     1455.668300   44331.699677          0  43676.599812  0.6  2183.502450   \n2     1412.646800   87353.199624          0  42385.761208  0.6  2118.970201   \n3     1370.896778  129103.222093          0  41133.072650  0.6  2056.345167   \n4     1330.380655  169619.344924          0  39917.406635  0.6  1995.570983   \n5     1291.061965  208938.035362          0  38737.668979  0.6  1936.592947   \n6     1252.905317  247094.682883          0  37592.797841  0.6  1879.357976   \n7     1215.876369  284123.631045          0  36481.762759  0.6  1823.814553   \n8     1179.941792  320058.208400          0  35403.563725  0.6  1769.912687   \n9     1145.069242  354930.758495          0  34357.230289  0.6  1717.603862   \n10    1111.227331  388772.668977          0  33341.820679  0.6  1666.840997   \n11    1078.385600  421614.399852          0  32841.730875  0.6  1617.578400   \n0     1450.000000       0.000000          1  42860.263250  0.6  2175.000000   \n1     1407.766990   42860.263250          1  42244.958390  0.6  2111.650485   \n2     1367.924528   84489.916780          1  41048.698150  0.6  2051.886792   \n3     1330.275229  124957.659550          1  39918.338458  0.6  1995.412844   \n4     1294.642857  164326.593695          1  38848.578447  0.6  1941.964286   \n5     1260.869565  202654.816444          1  37834.671049  0.6  1891.304348   \n6     1228.813559  239995.935792          1  36872.352494  0.6  1843.220339   \n7     1198.347107  276399.521433          1  35957.782326  0.6  1797.520661   \n8     1169.354839  311911.500445          1  35087.492125  0.6  1754.032258   \n9     1141.732283  346574.505682          1  34258.341517  0.6  1712.598425   \n10    1115.384615  380428.183478          1  33467.480278  0.6  1673.076923   \n11    1090.225564  413509.466239          1  33081.282761  0.6  1635.338346   \n\n       fluid_rate  wor      water_cum     fluid_cum  water_volume  \\\ndate                                                                \n0     3750.000000  1.5       0.000000  0.000000e+00  65505.073515   \n1     3639.170751  1.5   65505.073515  1.091751e+05  64537.089766   \n2     3531.617001  1.5  129074.179531  2.151236e+05  62629.730511   \n3     3427.241945  1.5  190764.534537  3.179409e+05  60778.742242   \n4     3325.951638  1.5  250631.664016  4.177194e+05  58982.458944   \n5     3227.654912  1.5  308729.452424  5.145491e+05  57239.263839   \n6     3132.263293  1.5  365110.191695  6.085170e+05  55547.587937   \n7     3039.690922  1.5  419824.628298  6.997077e+05  53905.908612   \n8     2949.854479  1.5  472922.008920  7.882033e+05  52312.748245   \n9     2862.673104  1.5  524450.124787  8.740835e+05  50766.672882   \n10    2778.068328  1.5  574455.354683  9.574256e+05  49266.290951   \n11    2695.964000  1.5  622982.706690  1.038305e+06  48527.352007   \n0     3625.000000  1.5       0.000000  0.000000e+00  63349.514563   \n1     3519.417476  1.5   63349.514563  1.055825e+05  62453.059168   \n2     3419.811321  1.5  124906.118337  2.081769e+05  60709.494547   \n3     3325.688073  1.5  184768.503658  3.079475e+05  59060.656946   \n4     3236.607143  1.5  243027.432229  4.050457e+05  57499.029503   \n5     3152.173913  1.5  299766.562664  4.996109e+05  56017.870302   \n6     3072.033898  1.5  355063.172833  5.917720e+05  54611.115002   \n7     2995.867769  1.5  408988.792668  6.816480e+05  53273.293788   \n8     2923.387097  1.5  461609.760410  7.693496e+05  51999.460249   \n9     2854.330709  1.5  512987.713166  8.549795e+05  50785.130224   \n10    2788.461538  1.5  563180.020858  9.386334e+05  49626.229034   \n11    2725.563910  1.5  612240.171234  1.020400e+06  49060.150376   \n\n       fluid_volume  \ndate                 \n0     109175.122524  \n1     107561.816276  \n2     104382.884186  \n3     101297.903737  \n4      98304.098239  \n5      95398.773066  \n6      92579.313228  \n7      89843.181021  \n8      87187.913741  \n9      84611.121470  \n10     82110.484919  \n11     80878.920011  \n0     105582.524272  \n1     104088.431947  \n2     101182.490912  \n3      98434.428244  \n4      95831.715839  \n5      93363.117170  \n6      91018.525004  \n7      88788.822981  \n8      86665.767082  \n9      84641.883707  \n10     82710.381724  \n11     81766.917293  \n</pre> <pre>/Users/scuervo91/Documents/dev/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n</pre> <p>Remember you can pass a time list with a custom time distribution</p> In\u00a0[26]: Copied! <pre>fr = a4.forecast(time_list=[0,2,3,4,6,8,12],freq_input='M',freq_output='M')\nprint(fr)\n</pre> fr = a4.forecast(time_list=[0,2,3,4,6,8,12],freq_input='M',freq_output='M') print(fr) <pre>         oil_rate        oil_cum  iteration     oil_volume  bsw   water_rate  \\\ndate                                                                           \n0     1500.000000       0.000000          0   87353.199624  0.6  2250.000000   \n2     1412.646800   87353.199624          0   64551.611047  0.6  2118.970201   \n3     1370.896778  129103.222093          0   41133.072650  0.6  2056.345167   \n4     1330.380655  169619.344924          0   58995.730395  0.6  1995.570983   \n6     1252.905317  247094.682883          0   75219.431738  0.6  1879.357976   \n8     1179.941792  320058.208400          0  103195.414005  0.6  1769.912687   \n12    1046.514489  453485.510893          0  133427.302493  0.6  1569.771734   \n0     1450.000000       0.000000          1   84489.916780  0.6  2175.000000   \n2     1367.924528   84489.916780          1   62478.829775  0.6  2051.886792   \n3     1330.275229  124957.659550          1   39918.338458  0.6  1995.412844   \n4     1294.642857  164326.593695          1   57519.138121  0.6  1941.964286   \n6     1228.813559  239995.935792          1   73792.453375  0.6  1843.220339   \n8     1169.354839  311911.500445          1  102928.439421  0.6  1754.032258   \n12    1066.176471  445852.814635          1  133941.314190  0.6  1599.264706   \n\n       fluid_rate  wor      water_cum     fluid_cum   water_volume  \\\ndate                                                                 \n0     3750.000000  1.5       0.000000  0.000000e+00  127138.212034   \n2     3531.617001  1.5  127138.212034  2.118970e+05   94414.283520   \n3     3427.241945  1.5  188828.567040  3.147143e+05   60778.742242   \n4     3325.951638  1.5  248695.696518  4.144928e+05   86314.304009   \n6     3132.263293  1.5  361457.175059  6.024286e+05  109478.119892   \n8     2949.854479  1.5  467651.936303  7.794199e+05  147283.684642   \n12    2616.286223  1.5  656024.544342  1.093374e+06  188372.608039   \n0     3625.000000  1.5       0.000000  0.000000e+00  123113.207547   \n2     3419.811321  1.5  123113.207547  2.051887e+05   91487.796434   \n3     3325.688073  1.5  182975.592868  3.049593e+05   59060.656946   \n4     3236.607143  1.5  241234.521440  4.020575e+05   84426.074455   \n6     3072.033898  1.5  351827.741779  5.863796e+05  107917.577911   \n8     2923.387097  1.5  457069.677263  7.617828e+05  148576.850095   \n12    2665.441176  1.5  648981.441968  1.081636e+06  191911.764706   \n\n       fluid_volume  \ndate                 \n0     211897.020056  \n2     157357.139200  \n3     101297.903737  \n4     143857.173349  \n6     182463.533154  \n8     245472.807736  \n12    313954.346732  \n0     205188.679245  \n2     152479.660724  \n3      98434.428244  \n4     140710.124092  \n6     179862.629852  \n8     247628.083491  \n12    319852.941176  \n</pre> <pre>/Users/scuervo91/Documents/dev/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n</pre> In\u00a0[27]: Copied! <pre>a5 = dca.Arps(\n    ti = date(2021,1,1),\n    di = [0.03,0.05],\n    qi = 1500,\n    b = 0,\n    freq_di='M', \n    fluid_rate = 2000\n)\nprint(a5)\n</pre> a5 = dca.Arps(     ti = date(2021,1,1),     di = [0.03,0.05],     qi = 1500,     b = 0,     freq_di='M',      fluid_rate = 2000 ) print(a5) <pre>Declination \n Ti: 2021-01-01 \n Qi: 1500.0 bbl/d \n Di: [0.03, 0.05] M \n b: 0.0\n</pre> In\u00a0[28]: Copied! <pre>fr = a5.forecast(start=date(2021,1,1),end=date(2021,1,10),freq_output='D')\nprint(fr.head())\nprint(fr.tail())\n</pre> fr = a5.forecast(start=date(2021,1,1),end=date(2021,1,10),freq_output='D') print(fr.head()) print(fr.tail()) <pre>               oil_rate      oil_cum  iteration   oil_volume  fluid_rate  \\\ndate                                                                       \n2021-01-01  1500.000000     0.000000          0  1499.250250      2000.0   \n2021-01-02  1498.500750  1499.250250          0  1498.501000      2000.0   \n2021-01-03  1497.002998  2997.001999          0  1497.003248      2000.0   \n2021-01-04  1495.506743  4493.256745          0  1495.506993      2000.0   \n2021-01-05  1494.011984  5988.015984          0  1494.012233      2000.0   \n\n            water_rate       bsw       wor    water_cum  fluid_cum  \\\ndate                                                                 \n2021-01-01  500.000000  0.250000  0.333333     0.000000        0.0   \n2021-01-02  501.499250  0.250750  0.334667   501.499250     2000.0   \n2021-01-03  502.997002  0.251499  0.336003  1004.496252     4000.0   \n2021-01-04  504.493257  0.252247  0.337339  1508.989509     6000.0   \n2021-01-05  505.988016  0.252994  0.338677  2014.977525     8000.0   \n\n            water_volume  fluid_volume  \ndate                                    \n2021-01-01    501.499250        2000.0  \n2021-01-02    502.248126        2000.0  \n2021-01-03    503.745129        2000.0  \n2021-01-04    505.240636        2000.0  \n2021-01-05    506.734649        2000.0  \n               oil_rate       oil_cum  iteration   oil_volume  fluid_rate  \\\ndate                                                                        \n2021-01-06  1487.551939   7468.836625          1  1487.552628      2000.0   \n2021-01-07  1485.074751   8955.149626          1  1485.075438      2000.0   \n2021-01-08  1482.601687  10438.987501          1  1482.602374      2000.0   \n2021-01-09  1480.132743  11920.354374          1  1480.133428      2000.0   \n2021-01-10  1477.667909  13399.254357          1  1478.899984      2000.0   \n\n            water_rate       bsw       wor    water_cum  fluid_cum  \\\ndate                                                                 \n2021-01-06  512.448061  0.256224  0.344491  2537.385677    10000.0   \n2021-01-07  514.925249  0.257463  0.346734  3052.310926    12000.0   \n2021-01-08  517.398313  0.258699  0.348980  3569.709238    14000.0   \n2021-01-09  519.867257  0.259934  0.351230  4089.576496    16000.0   \n2021-01-10  522.332091  0.261166  0.353484  4611.908586    18000.0   \n\n            water_volume  fluid_volume  \ndate                                    \n2021-01-06    513.686655        2000.0  \n2021-01-07    516.161781        2000.0  \n2021-01-08    518.632785        2000.0  \n2021-01-09    521.099674        2000.0  \n2021-01-10    522.332091        2000.0  \n</pre> In\u00a0[29]: Copied! <pre>a5.plot(start=date(2021,1,1),end=date(2021,1,10),freq_output='D')\n</pre> a5.plot(start=date(2021,1,1),end=date(2021,1,10),freq_output='D') In\u00a0[17]: Copied! <pre>fr = a5.forecast(start=date(2021,1,1),end=date(2022,1,1),freq_output='M')\nprint(fr)\n</pre> fr = a5.forecast(start=date(2021,1,1),end=date(2022,1,1),freq_output='M') print(fr) <pre>            oil_rate        oil_cum  iteration    oil_volume  fluid_rate  \\\ndate                                                                       \n2021-01  1500.000000       0.000000          0  45786.640386      2000.0   \n2021-02  1454.213360   45786.640386          0  42969.923132      2000.0   \n2021-03  1414.060154   85939.846264          0  41658.290854      2000.0   \n2021-04  1370.896778  129103.222093          0  41839.749330      2000.0   \n2021-05  1330.380655  169619.344924          0  40562.614959      2000.0   \n2021-06  1289.771548  210228.452011          0  39363.808516      2000.0   \n2021-07  1251.653038  248346.961956          0  38162.250820      2000.0   \n2021-08  1213.447046  286552.953650          0  37622.883693      2000.0   \n2021-09  1176.407271  323592.729343          0  35903.932453      2000.0   \n2021-10  1141.639181  358360.818557          0  34807.985491      2000.0   \n2021-11  1106.791300  393208.700324          0  33779.254051      2000.0   \n2021-12  1074.080673  425919.326659          0  32748.161679      2000.0   \n2022-01  1041.294976  458705.023683          0  32785.697024      2000.0   \n2021-01  1500.000000       0.000000          1  45319.173710      2000.0   \n2021-02  1424.468044   45319.173710          1  42143.967983      2000.0   \n2021-03  1359.520107   84287.935965          1  40021.823754      2000.0   \n2021-04  1291.061965  125362.821217          1  39427.193132      2000.0   \n2021-05  1228.096130  163142.322230          1  37441.851116      2000.0   \n2021-06  1166.255794  200246.523450          1  35615.790490      2000.0   \n2021-07  1109.376828  234373.903209          1  33822.370272      2000.0   \n2021-08  1053.514560  267891.263994          1  32673.483509      2000.0   \n2021-09  1000.465216  299720.870227          1  30552.782427      2000.0   \n2021-10   951.671952  328996.828847          1  29014.308144      2000.0   \n2021-11   903.750856  357749.486516          1  27599.263638      2000.0   \n2021-12   859.674406  384195.356123          1  26209.512724      2000.0   \n2022-01   816.385813  410168.511963          1  25973.155840      2000.0   \n\n          water_rate       bsw       wor      water_cum  fluid_cum  \\\ndate                                                                 \n2021-01   500.000000  0.250000  0.333333       0.000000        0.0   \n2021-02   545.786640  0.272893  0.375314   16919.385852    62000.0   \n2021-03   585.939846  0.292970  0.414367   33325.701547   118000.0   \n2021-04   629.103222  0.314552  0.458899   52827.901432   180000.0   \n2021-05   669.619345  0.334810  0.503329   72916.481780   240000.0   \n2021-06   710.228452  0.355114  0.550662   94933.563792   302000.0   \n2021-07   748.346962  0.374173  0.597887  117383.972651   362000.0   \n2021-08   786.552954  0.393276  0.648197  141767.114214   424000.0   \n2021-09   823.592729  0.411796  0.700091  167298.488824   486000.0   \n2021-10   858.360819  0.429180  0.751867  193049.313380   546000.0   \n2021-11   893.208700  0.446604  0.807025  220738.783091   608000.0   \n2021-12   925.919327  0.462960  0.862058  248516.362890   668000.0   \n2022-01   958.705024  0.479353  0.920685  278236.218624   730000.0   \n2021-01   500.000000  0.250000  0.333333       0.000000        0.0   \n2021-02   575.531956  0.287766  0.404033   17841.490642    62000.0   \n2021-03   640.479893  0.320240  0.471107   35774.927653   118000.0   \n2021-04   708.938035  0.354469  0.549112   57752.006750   180000.0   \n2021-05   771.903870  0.385952  0.628537   80909.122861   240000.0   \n2021-06   833.744206  0.416872  0.714890  106755.193239   302000.0   \n2021-07   890.623172  0.445312  0.802814  133473.888400   362000.0   \n2021-08   946.485440  0.473243  0.898408  162814.937039   424000.0   \n2021-09   999.534784  0.499767  0.999070  193800.515335   486000.0   \n2021-10  1048.328048  0.524164  1.101565  225250.356777   546000.0   \n2021-11  1096.249144  0.548125  1.212999  259234.080247   608000.0   \n2021-12  1140.325594  0.570163  1.326462  293443.848053   668000.0   \n2022-01  1183.614187  0.591807  1.449822  330135.887838   730000.0   \n\n         water_volume  fluid_volume  \ndate                                 \n2021-01  16919.385852       62000.0  \n2021-02  16662.850774       59000.0  \n2021-03  17954.257790       59000.0  \n2021-04  19795.390116       61000.0  \n2021-05  21052.831180       61000.0  \n2021-06  22233.745436       61000.0  \n2021-07  23416.775211       61000.0  \n2021-08  24957.258086       62000.0  \n2021-09  25641.099583       61000.0  \n2021-10  26720.147133       61000.0  \n2021-11  27733.524755       61000.0  \n2021-12  28748.717767       61000.0  \n2022-01  29719.855734       62000.0  \n2021-01  17841.490642       62000.0  \n2021-02  17887.463827       59000.0  \n2021-03  19955.258054       59000.0  \n2021-04  22567.097604       61000.0  \n2021-05  24501.593245       61000.0  \n2021-06  26282.382769       61000.0  \n2021-07  28029.871900       61000.0  \n2021-08  30163.313467       62000.0  \n2021-09  31217.709869       61000.0  \n2021-10  32716.782456       61000.0  \n2021-11  34096.745638       61000.0  \n2021-12  35450.903795       61000.0  \n2022-01  36692.039785       62000.0  \n</pre> In\u00a0[18]: Copied! <pre>fr = a5.forecast(start=date(2021,1,1),end=date(2026,1,1),freq_output='A')\nprint(fr)\n</pre> fr = a5.forecast(start=date(2021,1,1),end=date(2026,1,1),freq_output='A') print(fr) <pre>         oil_rate       oil_cum  iteration     oil_volume  fluid_rate  \\\ndate                                                                    \n2021  1500.000000  0.000000e+00          0  458705.023683      2000.0   \n2022  1041.294976  4.587050e+05          0  388568.257432      2000.0   \n2023   722.863485  7.771365e+05          0  269742.782947      2000.0   \n2024   501.809410  9.981906e+05          0  187428.626667      2000.0   \n2025   348.006232  1.151994e+06          0  130112.324911      2000.0   \n2026   241.584761  1.258415e+06          0  106421.471200      2000.0   \n2021  1500.000000  0.000000e+00          1  410168.511963      2000.0   \n2022   816.385813  4.101685e+05          1  316702.840738      2000.0   \n2023   444.323864  6.334057e+05          1  172367.804160      2000.0   \n2024   241.826466  7.549041e+05          1   93878.173091      2000.0   \n2025   131.396621  8.211620e+05          1   51093.872466      2000.0   \n2026    71.513558  8.570919e+05          1   35929.837558      2000.0   \n\n       water_rate       bsw        wor     water_cum  fluid_cum  \\\ndate                                                              \n2021   500.000000  0.250000   0.333333  0.000000e+00        0.0   \n2022   958.705024  0.479353   0.920685  3.499273e+05   730000.0   \n2023  1277.136515  0.638568   1.766774  8.160822e+05  1460000.0   \n2024  1498.190590  0.749095   2.985577  1.362922e+06  2190000.0   \n2025  1651.993768  0.825997   4.747024  1.967551e+06  2922000.0   \n2026  1758.415239  0.879208   7.278668  2.609373e+06  3652000.0   \n2021   500.000000  0.250000   0.333333  0.000000e+00        0.0   \n2022  1183.614187  0.591807   1.449822  4.320192e+05   730000.0   \n2023  1555.676136  0.777838   3.501221  9.998410e+05  1460000.0   \n2024  1758.173534  0.879087   7.270393  1.641574e+06  2190000.0   \n2025  1868.603379  0.934302  14.221092  2.325483e+06  2922000.0   \n2026  1928.486442  0.964243  26.966725  3.029381e+06  3652000.0   \n\n       water_volume  fluid_volume  \ndate                               \n2021  349927.333644      730000.0  \n2022  408041.080785      730000.0  \n2023  506497.196561      730000.0  \n2024  575734.642178      731000.0  \n2025  623225.640771      731000.0  \n2026  641821.562380      730000.0  \n2021  432019.178111      730000.0  \n2022  499920.483838      730000.0  \n2023  604777.564702      730000.0  \n2024  662821.088355      731000.0  \n2025  693903.194105      731000.0  \n2026  703897.551339      730000.0  \n</pre> <p>Plot them</p> In\u00a0[19]: Copied! <pre>a5.plot(start=date(2021,1,1),end=date(2022,1,1),freq_output='M')\n</pre> a5.plot(start=date(2021,1,1),end=date(2022,1,1),freq_output='M')"},{"location":"examples/1-basics/1b-Tutorial-Arps_Class/#dcapy-arps-class","title":"Dcapy -  Arps Class\u00b6","text":"<p>This section introduces the <code>Arps</code> class which is a 'wrapper' for the Arps Function seen in the previous section. It add certain functionalities to the forecast estimation, like dates, plots, cumulatives, water calculation.</p> <p>By taking advantage of python Object-Oriented functionalities it is very convinient to define a class with the required properties to make an Arps declination analysis. With the class are defined methods that help to make the forecast in a very flexible way. That means you can make different kind of forecast from the same Arps declination parameters.</p>"},{"location":"examples/1-basics/1b-Tutorial-Arps_Class/#arps-class","title":"Arps Class\u00b6","text":"<p>As seen in the previous section to define an Arps declination object you must have a Decline rate <code>di</code>, b coefficient <code>b</code>, Initial Time <code>Ti</code>, Initial rate <code>qi</code>. With these properties you can create a simple Arps Class. The time array to make a forecast can vary depending on the horizon time, frequency or rates limits. In that way you can estimate multiple forecast from the same class depending on the needs.</p> <p>Let's define a simple Aprs class by providing the same properties we have been seen. We can add a property we had not seen so far which is useful when we incorporates different time units. The units of the declination rate <code>di</code>. So far we can handle three periods of time. Days, Months and years.</p>"},{"location":"examples/1-basics/1b-Tutorial-Arps_Class/#time-basis","title":"Time basis\u00b6","text":"<p>When the time is defined with integers, they can represent any of the periods available (days, months or years). For example you can define forecast on daily basis each day or on daily basis each month. Next are the different ways you can create forecast</p> <p>By calling the method <code>forecast</code> and providing either a time array or the start and end, and the frequencies of the output it returns a pandas DataFrame with the forecast with some useful metadata</p>"},{"location":"examples/1-basics/1b-Tutorial-Arps_Class/#multiple-values","title":"Multiple Values\u00b6","text":"<p>You may have noticed that the pandas dataframe returned with the forecast has a column name iteration. As we have defined so far a singles parameters for the Arps class it is created only one iteration.</p> <p>You can declare Multiple values for any of the Arps parameters and they will result on Multiple iteration on the pandas dataframe.</p>"},{"location":"examples/1-basics/1b-Tutorial-Arps_Class/#estimate-water-rate","title":"Estimate Water Rate.\u00b6","text":"<p>You can add water columns for the returning forecast by providing either a fluid rate or water cut. When any of them is provided the function assumes they are constant and the water estimation are simple substraction.</p>"},{"location":"examples/1-basics/1b-Tutorial-Arps_Class/#using-arps-class-with-dates","title":"Using Arps class with dates\u00b6","text":"<p>You can also define the Arps class with dates. Like before, the output frequency approach also works</p>"},{"location":"examples/1-basics/1c-Tutorial-Wor_basic/","title":"WOR Forecasting","text":"In\u00a0[1]: Copied! <pre>import os\nfrom dcapy import dca\nfrom datetime import date\nimport numpy as np\n</pre> import os from dcapy import dca from datetime import date import numpy as np  <p>The WOR forecasting is an empirical method to estimate the trend of the water production with respect the cumulative oil production.</p> <p>Generally you can determine the WOR (Water-Oil Ratio) vs the Np (Cumulative Oil Production) linear relationship on a semi-log plot when preducing at a constant rate of total fluids.</p> <p>$ WOR = \\frac{q_{w}}{q_{o}} $</p> In\u00a0[2]: Copied! <pre>list_bsw = [0.01,0.01,0.1,0.5,0.8,0.9,0.95,0.99]\n\nlist_wor = dca.bsw_to_wor(list_bsw)\n</pre> list_bsw = [0.01,0.01,0.1,0.5,0.8,0.9,0.95,0.99]  list_wor = dca.bsw_to_wor(list_bsw) In\u00a0[3]: Copied! <pre>dca.wor_to_bsw(list_wor)\n</pre> dca.wor_to_bsw(list_wor) Out[3]: <pre>array([0.01, 0.01, 0.1 , 0.5 , 0.8 , 0.9 , 0.95, 0.99])</pre> In\u00a0[4]: Copied! <pre>time1 = np.arange(0,10,1)\nslope = 3e-6\nbswi = 0.5\nwori = dca.bsw_to_wor(bswi)\nfluid_rate = [5000]*10\n\nf1 = dca.wor_forecast(time1,fluid_rate,slope,wori)\nprint(f1)\n</pre> time1 = np.arange(0,10,1) slope = 3e-6 bswi = 0.5 wori = dca.bsw_to_wor(bswi) fluid_rate = [5000]*10  f1 = dca.wor_forecast(time1,fluid_rate,slope,wori) print(f1)  <pre>         oil_rate   water_rate       oil_cum     water_cum       bsw  \\\ndate                                                                   \n0     2500.000000  2500.000000   2500.000000   2500.000000  0.500000   \n1     2490.625044  2509.374956   4990.625044   5009.374956  0.501875   \n2     2481.285506  2518.714494   7471.910550   7528.089450  0.503743   \n3     2471.981509  2528.018491   9943.892058  10056.107942  0.505604   \n4     2462.713170  2537.286830  12406.605228  12593.394772  0.507457   \n5     2453.480601  2546.519399  14860.085829  15139.914171  0.509304   \n6     2444.283905  2555.716095  17304.369734  17695.630266  0.511143   \n7     2435.123183  2564.876817  19739.492917  20260.507083  0.512975   \n8     2425.998526  2574.001474  22165.491443  22834.508557  0.514800   \n9     2416.910022  2583.089978  24582.401465  25417.598535  0.516618   \n\n           wor     wor_1  delta_time  fluid_rate  fluid_cum  \ndate                                                         \n0     1.000000  2.000000         1.0        5000     5000.0  \n1     1.007528  2.007528         1.0        5000    10000.0  \n2     1.015085  2.015085         1.0        5000    15000.0  \n3     1.022669  2.022669         1.0        5000    20000.0  \n4     1.030281  2.030281         1.0        5000    25000.0  \n5     1.037921  2.037921         1.0        5000    30000.0  \n6     1.045589  2.045589         1.0        5000    35000.0  \n7     1.053284  2.053284         1.0        5000    40000.0  \n8     1.061007  2.061007         1.0        5000    45000.0  \n9     1.068757  2.068757         1.0        5000    50000.0  \n</pre> <p>In this case you have to pass an array with the desired rate whose length be equal to the time array. That means you can pass a fluid rate array with different values.</p> In\u00a0[5]: Copied! <pre>time1 = np.arange(0,10,1)\nslope = 3e-5\nbswi = 0.5\nwori = dca.bsw_to_wor(bswi)\nfluid_rate = [5000]*5 + [6000]*5\n\nf1 = dca.wor_forecast(time1,fluid_rate,slope,wori)\nprint(f1)\n</pre> time1 = np.arange(0,10,1) slope = 3e-5 bswi = 0.5 wori = dca.bsw_to_wor(bswi) fluid_rate = [5000]*5 + [6000]*5  f1 = dca.wor_forecast(time1,fluid_rate,slope,wori) print(f1) <pre>         oil_rate   water_rate       oil_cum     water_cum       bsw  \\\ndate                                                                   \n0     2500.000000  2500.000000   2500.000000   2500.000000  0.500000   \n1     2406.293921  2593.706079   4906.293921   5093.706079  0.518741   \n2     2316.345424  2683.654576   7222.639345   7777.360655  0.536731   \n3     2230.205766  2769.794234   9452.845111  10547.154889  0.553959   \n4     2147.874995  2852.125005  11600.720106  13399.279894  0.570425   \n5     2483.173555  3516.826445  14083.893662  16916.106338  0.586138   \n6     2375.487941  3624.512059  16459.381602  20540.618398  0.604085   \n7     2274.018964  3725.981036  18733.400566  24266.599434  0.620997   \n8     2178.506150  3821.493850  20911.906716  28088.093284  0.636916   \n9     2088.660154  3911.339846  23000.566869  31999.433131  0.651890   \n\n           wor     wor_1  delta_time  fluid_rate  fluid_cum  \ndate                                                         \n0     1.000000  2.000000         1.0        5000     5000.0  \n1     1.077884  2.077884         1.0        5000    10000.0  \n2     1.158573  2.158573         1.0        5000    15000.0  \n3     1.241946  2.241946         1.0        5000    20000.0  \n4     1.327882  2.327882         1.0        5000    25000.0  \n5     1.416263  2.416263         1.0        6000    31000.0  \n6     1.525797  2.525797         1.0        6000    37000.0  \n7     1.638500  2.638500         1.0        6000    43000.0  \n8     1.754181  2.754181         1.0        6000    49000.0  \n9     1.872655  2.872655         1.0        6000    55000.0  \n</pre> In\u00a0[6]: Copied! <pre>bsw = 0.5\nslope = 3.5e-6\nti =  0\nfluid = 1000\nw1 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)\n\nprint(type(w1))\n</pre> bsw = 0.5 slope = 3.5e-6 ti =  0 fluid = 1000 w1 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)  print(type(w1)) <pre>&lt;class 'dcapy.dca.wor.Wor'&gt;\n</pre> <p>The forecast method is also present with the same parameters as seen in Arps class</p> In\u00a0[7]: Copied! <pre>fr = w1.forecast(\n    start = 0,\n    end = 5,\n)\nprint(fr)\n</pre> fr = w1.forecast(     start = 0,     end = 5, ) print(fr) <pre>        oil_rate  water_rate      oil_cum    water_cum       bsw       wor  \\\ndate                                                                         \n0     500.000000  500.000000   500.000000   500.000000  0.500000  1.000000   \n1     499.562500  500.437500   999.562500  1000.437500  0.500437  1.001752   \n2     499.125384  500.874616  1498.687884  1501.312116  0.500875  1.003505   \n3     498.688651  501.311349  1997.376535  2002.623465  0.501311  1.005259   \n4     498.252303  501.747697  2495.628838  2504.371162  0.501748  1.007015   \n\n         wor_1  delta_time  fluid_rate  fluid_cum  iteration  oil_volume  \\\ndate                                                                       \n0     2.000000         1.0      1000.0     1000.0          0  499.562500   \n1     2.001752         1.0      1000.0     2000.0          0  499.343942   \n2     2.003505         1.0      1000.0     3000.0          0  498.907017   \n3     2.005259         1.0      1000.0     4000.0          0  498.470477   \n4     2.007015         1.0      1000.0     5000.0          0  498.252303   \n\n      water_volume  gas_cum  gas_volume  gas_rate  \ndate                                               \n0       500.437500        0           0         0  \n1       500.656058        0           0         0  \n2       501.092983        0           0         0  \n3       501.529523        0           0         0  \n4       501.747697        0           0         0  \n</pre> <p>If you want to change the fluid rate you can pass a different value when calling the <code>forecast</code> method</p> In\u00a0[8]: Copied! <pre>fr = w1.forecast(\n    start = 0,\n    end = 10,\n    fluid_rate = 2000\n)\nprint(fr)\n</pre> fr = w1.forecast(     start = 0,     end = 10,     fluid_rate = 2000 ) print(fr) <pre>         oil_rate   water_rate      oil_cum     water_cum       bsw       wor  \\\ndate                                                                            \n0     1000.000000  1000.000000  1000.000000   1000.000000  0.500000  1.000000   \n1      998.250002  1001.749998  1998.250002   2001.749998  0.500875  1.003506   \n2      996.503077  1003.496923  2994.753079   3005.246921  0.501748  1.007018   \n3      994.759230  1005.240770  3989.512309   4010.487691  0.502620  1.010537   \n4      993.018467  1006.981533  4982.530776   5017.469224  0.503491  1.014061   \n5      991.280792  1008.719208  5973.811568   6026.188432  0.504360  1.017592   \n6      989.546211  1010.453789  6963.357778   7036.642222  0.505227  1.021128   \n7      987.814727  1012.185273  7951.172505   8048.827495  0.506093  1.024671   \n8      986.086346  1013.913654  8937.258851   9062.741149  0.506957  1.028220   \n9      984.361072  1015.638928  9921.619923  10078.380077  0.507819  1.031775   \n\n         wor_1  delta_time  fluid_rate  fluid_cum  iteration  oil_volume  \\\ndate                                                                       \n0     2.000000         1.0      2000.0     2000.0          0  998.250002   \n1     2.003506         1.0      2000.0     4000.0          0  997.376539   \n2     2.007018         1.0      2000.0     6000.0          0  995.631153   \n3     2.010537         1.0      2000.0     8000.0          0  993.888848   \n4     2.014061         1.0      2000.0    10000.0          0  992.149630   \n5     2.017592         1.0      2000.0    12000.0          0  990.413501   \n6     2.021128         1.0      2000.0    14000.0          0  988.680469   \n7     2.024671         1.0      2000.0    16000.0          0  986.950537   \n8     2.028220         1.0      2000.0    18000.0          0  985.223709   \n9     2.031775         1.0      2000.0    20000.0          0  984.361072   \n\n      water_volume  gas_cum  gas_volume  gas_rate  \ndate                                               \n0      1001.749998        0           0         0  \n1      1002.623461        0           0         0  \n2      1004.368847        0           0         0  \n3      1006.111152        0           0         0  \n4      1007.850370        0           0         0  \n5      1009.586499        0           0         0  \n6      1011.319531        0           0         0  \n7      1013.049463        0           0         0  \n8      1014.776291        0           0         0  \n9      1015.638928        0           0         0  \n</pre> In\u00a0[9]: Copied! <pre>bsw = [0.4,0.5,0.6]\nslope = 3.5e-6\nti =  0\nfluid = 1000\nw2 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)\n\nfr = w2.forecast(\n    start = 0,\n    end = 4,\n    fluid_rate = 2000\n)\nprint(fr)\n</pre> bsw = [0.4,0.5,0.6] slope = 3.5e-6 ti =  0 fluid = 1000 w2 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)  fr = w2.forecast(     start = 0,     end = 4,     fluid_rate = 2000 ) print(fr) <pre>         oil_rate   water_rate      oil_cum    water_cum       bsw       wor  \\\ndate                                                                           \n0     1200.000000   800.000000  1200.000000   800.000000  0.400000  0.666667   \n1     1197.983156   802.016844  2397.983156  1602.016844  0.401008  0.669473   \n2     1195.968028   804.031972  3593.951184  2406.048816  0.402016  0.672286   \n3     1193.954637   806.045363  4787.905821  3212.094179  0.403023  0.675106   \n0     1000.000000  1000.000000  1000.000000  1000.000000  0.500000  1.000000   \n1      998.250002  1001.749998  1998.250002  2001.749998  0.500875  1.003506   \n2      996.503077  1003.496923  2994.753079  3005.246921  0.501748  1.007018   \n3      994.759230  1005.240770  3989.512309  4010.487691  0.502620  1.010537   \n0      800.000000  1200.000000   800.000000  1200.000000  0.600000  1.500000   \n1      798.656377  1201.343623  1598.656377  2401.343623  0.600672  1.504206   \n2      797.315766  1202.684234  2395.972143  3604.027857  0.601342  1.508416   \n3      795.978163  1204.021837  3191.950306  4808.049694  0.602011  1.512632   \n\n         wor_1  delta_time  fluid_rate  fluid_cum  iteration   oil_volume  \\\ndate                                                                        \n0     1.666667         1.0      2000.0     2000.0          0  1197.983156   \n1     1.669473         1.0      2000.0     4000.0          0  1196.975592   \n2     1.672286         1.0      2000.0     6000.0          0  1194.961333   \n3     1.675106         1.0      2000.0     8000.0          0  1193.954637   \n0     2.000000         1.0      2000.0     2000.0          1   998.250002   \n1     2.003506         1.0      2000.0     4000.0          1   997.376539   \n2     2.007018         1.0      2000.0     6000.0          1   995.631153   \n3     2.010537         1.0      2000.0     8000.0          1   994.759230   \n0     2.500000         1.0      2000.0     2000.0          2   798.656377   \n1     2.504206         1.0      2000.0     4000.0          2   797.986072   \n2     2.508416         1.0      2000.0     6000.0          2   796.646965   \n3     2.512632         1.0      2000.0     8000.0          2   795.978163   \n\n      water_volume  gas_cum  gas_volume  gas_rate  \ndate                                               \n0       802.016844        0           0         0  \n1       803.024408        0           0         0  \n2       805.038667        0           0         0  \n3       806.045363        0           0         0  \n0      1001.749998        0           0         0  \n1      1002.623461        0           0         0  \n2      1004.368847        0           0         0  \n3      1005.240770        0           0         0  \n0      1201.343623        0           0         0  \n1      1202.013928        0           0         0  \n2      1203.353035        0           0         0  \n3      1204.021837        0           0         0  \n</pre> <p>As the each case of fluid rate can be an array with multiple values, you can pass a 2D array to make more than one iteration.</p> In\u00a0[10]: Copied! <pre>bsw = 0.4\nslope = 3.5e-6\nti =  0\nfluid = [[1000],[2000]]\nw3 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)\n\nfr = w3.forecast(\n    start = 0,\n    end = 4,\n)\nprint(fr)\n</pre> bsw = 0.4 slope = 3.5e-6 ti =  0 fluid = [[1000],[2000]] w3 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)  fr = w3.forecast(     start = 0,     end = 4, ) print(fr) <pre>         oil_rate  water_rate      oil_cum    water_cum       bsw       wor  \\\ndate                                                                          \n0      600.000000  400.000000   600.000000   400.000000  0.400000  0.666667   \n1      599.495894  400.504106  1199.495894   800.504106  0.400504  0.668068   \n2      598.992002  401.007998  1798.487896  1201.512104  0.401008  0.669471   \n3      598.488324  401.511676  2396.976220  1603.023780  0.401512  0.670876   \n0     1200.000000  800.000000  1200.000000   800.000000  0.400000  0.666667   \n1     1197.983156  802.016844  2397.983156  1602.016844  0.401008  0.669473   \n2     1195.968028  804.031972  3593.951184  2406.048816  0.402016  0.672286   \n3     1193.954637  806.045363  4787.905821  3212.094179  0.403023  0.675106   \n\n         wor_1  delta_time  fluid_rate  fluid_cum  iteration   oil_volume  \\\ndate                                                                        \n0     1.666667         1.0      1000.0     1000.0          0   599.495894   \n1     1.668068         1.0      1000.0     2000.0          0   599.243948   \n2     1.669471         1.0      1000.0     3000.0          0   598.740163   \n3     1.670876         1.0      1000.0     4000.0          0   598.488324   \n0     1.666667         1.0      2000.0     2000.0          1  1197.983156   \n1     1.669473         1.0      2000.0     4000.0          1  1196.975592   \n2     1.672286         1.0      2000.0     6000.0          1  1194.961333   \n3     1.675106         1.0      2000.0     8000.0          1  1193.954637   \n\n      water_volume  gas_cum  gas_volume  gas_rate  \ndate                                               \n0       400.504106        0           0         0  \n1       400.756052        0           0         0  \n2       401.259837        0           0         0  \n3       401.511676        0           0         0  \n0       802.016844        0           0         0  \n1       803.024408        0           0         0  \n2       805.038667        0           0         0  \n3       806.045363        0           0         0  \n</pre> In\u00a0[11]: Copied! <pre>bsw = 0.4\nslope = 3.5e-6\nti =  0\nfluid = [[1000,1200,1300,1250],[2000,2200,2300,2250]]\nw4 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)\n\nfr = w4.forecast(\n    start = 0,\n    end = 4,\n)\nprint(fr)\n</pre> bsw = 0.4 slope = 3.5e-6 ti =  0 fluid = [[1000,1200,1300,1250],[2000,2200,2300,2250]] w4 = dca.Wor(bsw=bsw,slope=slope,ti=ti, fluid_rate = fluid)  fr = w4.forecast(     start = 0,     end = 4, ) print(fr) <pre>         oil_rate  water_rate      oil_cum    water_cum       bsw       wor  \\\ndate                                                                          \n0      600.000000  400.000000   600.000000   400.000000  0.400000  0.666667   \n1      719.395073  480.604927  1319.395073   880.604927  0.400504  0.668068   \n2      778.558558  521.441442  2097.953631  1402.046369  0.401109  0.669752   \n3      747.795540  502.204460  2845.749171  1904.250829  0.401764  0.671580   \n0     1200.000000  800.000000  1200.000000   800.000000  0.400000  0.666667   \n1     1317.781471  882.218529  2517.781471  1682.218529  0.401008  0.669473   \n2     1375.131387  924.868613  3892.912859  2607.087141  0.402117  0.672567   \n3     1342.632470  907.367530  5235.545329  3514.454671  0.403274  0.675812   \n\n         wor_1  delta_time  fluid_rate  fluid_cum  iteration   oil_volume  \\\ndate                                                                        \n0     1.666667         1.0      1000.0     1000.0          0   719.395073   \n1     1.668068         1.0      1200.0     2200.0          0   748.976815   \n2     1.669752         1.0      1300.0     3500.0          0   763.177049   \n3     1.671580         1.0      1250.0     4750.0          0   747.795540   \n0     1.666667         1.0      2000.0     2000.0          1  1317.781471   \n1     1.669473         1.0      2200.0     4200.0          1  1346.456429   \n2     1.672567         1.0      2300.0     6500.0          1  1358.881929   \n3     1.675812         1.0      2250.0     8750.0          1  1342.632470   \n\n      water_volume  gas_cum  gas_volume  gas_rate  \ndate                                               \n0       480.604927        0           0         0  \n1       501.023185        0           0         0  \n2       511.822951        0           0         0  \n3       502.204460        0           0         0  \n0       882.218529        0           0         0  \n1       903.543571        0           0         0  \n2       916.118071        0           0         0  \n3       907.367530        0           0         0  \n</pre> In\u00a0[12]: Copied! <pre>w1 = dca.Wor(\n    bsw = 0.5,\n    slope = 3e-5,\n    fluid_rate = 4000,\n    ti=date(2021,1,1)\n)\n\nprint(w1)\n</pre> w1 = dca.Wor(     bsw = 0.5,     slope = 3e-5,     fluid_rate = 4000,     ti=date(2021,1,1) )  print(w1) <pre>bsw=0.5 slope=3e-05 fluid_rate=4000.0 ti=datetime.date(2021, 1, 1) seed=None gor=None glr=None\n</pre> In\u00a0[13]: Copied! <pre>fr = w1.forecast(start=date(2021,1,1),end=date(2021,1,10),freq_output='D')\nprint(fr)\n</pre> fr = w1.forecast(start=date(2021,1,1),end=date(2021,1,10),freq_output='D') print(fr) <pre>               oil_rate   water_rate       oil_cum     water_cum       bsw  \\\ndate                                                                         \n2021-01-01  2000.000000  2000.000000   2000.000000   2000.000000  0.500000   \n2021-01-02  1940.017994  2059.982006   3940.017994   4059.982006  0.514996   \n2021-01-03  1881.936887  2118.063113   5821.954880   6178.045120  0.529516   \n2021-01-04  1825.784009  2174.215991   7647.738890   8352.261110  0.543554   \n2021-01-05  1771.568989  2228.431011   9419.307879  10580.692121  0.557108   \n2021-01-06  1719.286223  2280.713777  11138.594102  12861.405898  0.570178   \n2021-01-07  1668.917224  2331.082776  12807.511326  15192.488674  0.582771   \n2021-01-08  1620.432808  2379.567192  14427.944134  17572.055866  0.594892   \n2021-01-09  1573.795080  2426.204920  16001.739214  19998.260786  0.606551   \n2021-01-10  1528.959218  2471.040782  17530.698433  22469.301567  0.617760   \n\n                 wor     wor_1  delta_time  fluid_rate  fluid_cum  iteration  \\\ndate                                                                           \n2021-01-01  1.000000  2.000000         1.0      4000.0     4000.0          0   \n2021-01-02  1.061837  2.061837         1.0      4000.0     8000.0          0   \n2021-01-03  1.125470  2.125470         1.0      4000.0    12000.0          0   \n2021-01-04  1.190840  2.190840         1.0      4000.0    16000.0          0   \n2021-01-05  1.257886  2.257886         1.0      4000.0    20000.0          0   \n2021-01-06  1.326547  2.326547         1.0      4000.0    24000.0          0   \n2021-01-07  1.396764  2.396764         1.0      4000.0    28000.0          0   \n2021-01-08  1.468476  2.468476         1.0      4000.0    32000.0          0   \n2021-01-09  1.541627  2.541627         1.0      4000.0    36000.0          0   \n2021-01-10  1.616159  2.616159         1.0      4000.0    40000.0          0   \n\n             oil_volume  water_volume  gas_cum  gas_volume  gas_rate  \ndate                                                                  \n2021-01-01  1940.017994   2059.982006        0           0         0  \n2021-01-02  1910.977440   2089.022560        0           0         0  \n2021-01-03  1853.860448   2146.139552        0           0         0  \n2021-01-04  1798.676499   2201.323501        0           0         0  \n2021-01-05  1745.427606   2254.572394        0           0         0  \n2021-01-06  1694.101723   2305.898277        0           0         0  \n2021-01-07  1644.675016   2355.324984        0           0         0  \n2021-01-08  1597.113944   2402.886056        0           0         0  \n2021-01-09  1551.377149   2448.622851        0           0         0  \n2021-01-10  1528.959218   2471.040782        0           0         0  \n</pre> In\u00a0[14]: Copied! <pre>fr = w1.forecast(start=date(2021,1,1),end=date(2022,1,1),freq_output='M')\nprint(fr)\n</pre> fr = w1.forecast(start=date(2021,1,1),end=date(2022,1,1),freq_output='M') print(fr) <pre>         iteration     oil_rate   water_rate        oil_cum  gas_rate  \\\ndate                                                                    \n2021-01          0  1350.964057  2649.035943   41879.885779         0   \n2021-02          0   698.307430  3301.692570   61432.493832         0   \n2021-03          0   454.264376  3545.735624   75514.689501         0   \n2021-04          0   328.988562  3671.011438   85384.346349         0   \n2021-05          0   256.785782  3743.214218   93344.705592         0   \n2021-06          0   209.970023  3790.029977   99643.806288         0   \n2021-07          0   177.400299  3822.599701  105143.215557         0   \n2021-08          0   153.085705  3846.914295  109888.872406         0   \n2021-09          0   134.807356  3865.192644  113933.093099         0   \n2021-10          0   120.397024  3879.602976  117665.400837         0   \n2021-11          0   108.726462  3891.273538  120927.194690         0   \n2021-12          0    99.106363  3900.893637  123999.491938         0   \n2022-01          0    94.643721  3905.356279  124094.135659         0   \n\n            water_cum       bsw        wor      wor_1  delta_time  fluid_rate  \\\ndate                                                                            \n2021-01  8.212011e+04  0.662259   2.131557   3.131557         1.0      4000.0   \n2021-02  1.745675e+05  0.825423   4.841201   5.841201         1.0      4000.0   \n2021-03  2.844853e+05  0.886434   7.909190   8.909190         1.0      4000.0   \n2021-04  3.946157e+05  0.917753  11.233783  12.233783         1.0      4000.0   \n2021-05  5.106553e+05  0.935804  14.642358  15.642358         1.0      4000.0   \n2021-06  6.243562e+05  0.947507  18.101453  19.101453         1.0      4000.0   \n2021-07  7.428568e+05  0.955650  21.594753  22.594753         1.0      4000.0   \n2021-08  8.621111e+05  0.961729  25.170100  26.170100         1.0      4000.0   \n2021-09  9.780669e+05  0.966298  28.706044  29.706044         1.0      4000.0   \n2021-10  1.098335e+06  0.969901  32.256139  33.256139         1.0      4000.0   \n2021-11  1.215073e+06  0.972818  35.817407  36.817407         1.0      4000.0   \n2021-12  1.336001e+06  0.975223  39.387899  40.387899         1.0      4000.0   \n2022-01  1.339906e+06  0.976339  41.263765  42.263765         1.0      4000.0   \n\n         fluid_cum  gas_cum    oil_volume   water_volume  gas_volume  \ndate                                                                  \n2021-01   124000.0        0  41293.084427   82706.915573           0  \n2021-02   236000.0        0  19382.818094   92617.181906           0  \n2021-03   360000.0        0  13996.847735  110003.152265           0  \n2021-04   480000.0        0   9824.916434  110175.083566           0  \n2021-05   604000.0        0   7931.659383  116068.340617           0  \n2021-06   724000.0        0   6280.311138  113719.688862           0  \n2021-07   848000.0        0   5485.431980  118514.568020           0  \n2021-08   972000.0        0   4735.183684  119264.816316           0  \n2021-09  1092000.0        0   4036.324926  115963.675074           0  \n2021-10  1216000.0        0   3725.775309  120274.224691           0  \n2021-11  1336000.0        0   3256.623092  116743.376908           0  \n2021-12  1460000.0        0   3067.846594  120932.153406           0  \n2022-01  1464000.0        0     94.643721    3905.356279           0  \n</pre> In\u00a0[15]: Copied! <pre>fr = w1.forecast(start=date(2021,1,1),end=date(2024,1,1),freq_output='A')\nprint(fr)\n</pre> fr = w1.forecast(start=date(2021,1,1),end=date(2024,1,1),freq_output='A') print(fr) <pre>      iteration    oil_rate   water_rate        oil_cum  gas_rate  \\\ndate                                                                \n2021          0  339.724635  3660.275365  123999.491938         0   \n2022          0   65.339756  3934.660244  147848.502869         0   \n2023          0   37.900718  3962.099282  161682.264808         0   \n2024          0   31.055857  3968.944143  161713.320665         0   \n\n         water_cum       bsw         wor       wor_1  delta_time  fluid_rate  \\\ndate                                                                           \n2021  1.336001e+06  0.915069   20.238811   21.238811         1.0      4000.0   \n2022  2.772151e+06  0.983665   62.728836   63.728836         1.0      4000.0   \n2023  4.218318e+06  0.990525  106.022536  107.022536         1.0      4000.0   \n2024  4.222287e+06  0.992236  127.800179  128.800179         1.0      4000.0   \n\n      fluid_cum  gas_cum     oil_volume  water_volume  gas_volume  \ndate                                                               \n2021  1460000.0        0  123016.822796  1.336983e+06           0  \n2022  2920000.0        0   23825.110874  1.436175e+06           0  \n2023  4380000.0        0   13825.868064  1.446174e+06           0  \n2024  4384000.0        0      31.055857  3.968944e+03           0  \n</pre>"},{"location":"examples/1-basics/1c-Tutorial-Wor_basic/#wor-forecasting","title":"WOR Forecasting\u00b6","text":"<p>In this section is introduced the basic classes and functions to make Forecast by applying the Wor Methodology</p>"},{"location":"examples/1-basics/1c-Tutorial-Wor_basic/#simple-functions-to-convert-bsw-to-wor","title":"Simple Functions to convert Bsw to Wor\u00b6","text":""},{"location":"examples/1-basics/1c-Tutorial-Wor_basic/#wor-forecasting-function","title":"Wor Forecasting function\u00b6","text":"<p>The parameters required to define a WOR model are:</p> <ul> <li>Slope: It is the relationship between the WOR and Np. It is defined as $\\frac{d(log(WOR))}{d Np}$</li> <li>Fluid Rate: Total fluid rate production target</li> <li>Ti: Initial Time</li> <li>WOR initial: The Wor value at the initial time</li> </ul>"},{"location":"examples/1-basics/1c-Tutorial-Wor_basic/#wor-class","title":"Wor Class\u00b6","text":"<p>Like Arps class, the Wor class have the same advantages described before. In this case you can pass the initial bsw directly so it internally will convert it to WOR value.</p>"},{"location":"examples/1-basics/1c-Tutorial-Wor_basic/#multiple-values","title":"Multiple Values\u00b6","text":"<p>You can create Wor instances with multiple values on each of the parameters. This will create additional iterations accorging with the number of cases and the broadcast shape</p>"},{"location":"examples/1-basics/1c-Tutorial-Wor_basic/#wor-with-dates","title":"Wor with Dates\u00b6","text":""},{"location":"examples/1-basics/1d-Tutorial_Probabilistic_Variables/","title":"Dcapy &amp; Probabilistic Variables","text":"In\u00a0[1]: Copied! <pre>import os\nfrom dcapy import dca\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\nnp.seterr(divide='ignore')\n</pre> import os from dcapy import dca import numpy as np  import pandas as pd from datetime import date import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats np.seterr(divide='ignore') Out[1]: <pre>{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}</pre> In\u00a0[2]: Copied! <pre>a1 = dca.Arps(\n    ti = 0,\n    di = 0.03,\n    qi = [1500,1000],\n    b = 0,\n    freq_di='M'\n)\n\nfr = a1.forecast(start=0,end=12,freq_input='M',freq_output='M')\nprint(fr)\n</pre> a1 = dca.Arps(     ti = 0,     di = 0.03,     qi = [1500,1000],     b = 0,     freq_di='M' )  fr = a1.forecast(start=0,end=12,freq_input='M',freq_output='M') print(fr) <pre>[1500. 1000.] 1 None None\n         oil_rate        oil_cum  iteration    oil_volume\ndate                                                     \n0     1500.000000       0.000000          0  44331.699677\n1     1455.668300   44331.699677          0  43676.599812\n2     1412.646800   87353.199624          0  42385.761208\n3     1370.896778  129103.222093          0  41133.072650\n4     1330.380655  169619.344924          0  39917.406635\n5     1291.061965  208938.035362          0  38737.668979\n6     1252.905317  247094.682883          0  37592.797841\n7     1215.876369  284123.631045          0  36481.762759\n8     1179.941792  320058.208400          0  35403.563725\n9     1145.069242  354930.758495          0  34357.230289\n10    1111.227331  388772.668977          0  33341.820679\n11    1078.385600  421614.399852          0  32841.730875\n0     1000.000000       0.000000          1  29554.466451\n1      970.445534   29554.466451          1  29117.733208\n2      941.764534   58235.466416          1  28257.174139\n3      913.931185   86068.814729          1  27422.048434\n4      886.920437  113079.563283          1  26611.604423\n5      860.707976  139292.023575          1  25825.112653\n6      835.270211  164729.788589          1  25061.865227\n7      810.584246  189415.754030          1  24321.175172\n8      786.627861  213372.138933          1  23602.375817\n9      763.379494  236620.505663          1  22904.820192\n10     740.818221  259181.779318          1  22227.880452\n11     718.923733  281076.266568          1  21894.487250\n</pre> <p>Here it was defined an <code>Arps</code> instance with two initial rates. The result forecast, indeed there are two different forecast, is a DataFrame with two iterations.</p> <p>What if you would like to simulate a forecast with a initial rate as probabilistic variable normally distributed with a mean of 1300 and a standard deviation of 300?</p> <p>There are two ways you can do this.</p> In\u00a0[3]: Copied! <pre>qi_random = stats.norm.rvs(loc=1300, scale=300, size=10, random_state=91)\n\nprint('Random qi values generated')\nprint(qi_random)\n\na2 = dca.Arps(\n    ti = 0,\n    di = 0.03,\n    qi = qi_random.tolist(),\n    b = 0,\n    freq_di='M'\n)\n\na2.plot(start=0,end=12,freq_input='M',freq_output='M')\n</pre> qi_random = stats.norm.rvs(loc=1300, scale=300, size=10, random_state=91)  print('Random qi values generated') print(qi_random)  a2 = dca.Arps(     ti = 0,     di = 0.03,     qi = qi_random.tolist(),     b = 0,     freq_di='M' )  a2.plot(start=0,end=12,freq_input='M',freq_output='M')  <pre>Random qi values generated\n[1118.16369468  982.01807391 1134.72409807 1217.29411833 1666.67611805\n 1028.2423041  1320.80565156 1953.59669695 1344.19507322 1455.17713872]\n[1118.16369468  982.01807391 1134.72409807 1217.29411833 1666.67611805\n 1028.2423041  1320.80565156 1953.59669695 1344.19507322 1455.17713872] 1 None None\n</pre> In\u00a0[4]: Copied! <pre>qi_prob = dca.ProbVar(dist='norm', kw=dict(loc=1300, scale=300), seed=91)\n\nprint(qi_prob)\n</pre> qi_prob = dca.ProbVar(dist='norm', kw=dict(loc=1300, scale=300), seed=91)  print(qi_prob) <pre>dist='norm' kw={'loc': 1300, 'scale': 300} factor=1.0 seed=91\n</pre> <ul> <li>Get Random Samples</li> </ul> In\u00a0[5]: Copied! <pre>qi_prob.get_sample(size=10)\n</pre> qi_prob.get_sample(size=10) Out[5]: <pre>array([1118.16369468,  982.01807391, 1134.72409807, 1217.29411833,\n       1666.67611805, 1028.2423041 , 1320.80565156, 1953.59669695,\n       1344.19507322, 1455.17713872])</pre> <ul> <li>Get percent point</li> </ul> In\u00a0[6]: Copied! <pre>qi_prob.get_sample(ppf=[0.1,0.5,0.9])\n</pre> qi_prob.get_sample(ppf=[0.1,0.5,0.9]) Out[6]: <pre>array([ 915.53453034, 1300.        , 1684.46546966])</pre> <ul> <li>**Use <code>dca.ProbVar</code> in <code>dca.Arps</code></li> </ul> In\u00a0[7]: Copied! <pre>a3 = dca.Arps(\n    ti = date(2021,1,1),\n    di = 0.03,\n    qi = dca.ProbVar(dist='norm', kw=dict(loc=1300, scale=300)),\n    b = 0,\n    freq_di='M',\n    #seed=91\n)\n\na3.plot(start=date(2021,1,1),end=date(2022,1,1),freq_output='M', iter=10)\n</pre> a3 = dca.Arps(     ti = date(2021,1,1),     di = 0.03,     qi = dca.ProbVar(dist='norm', kw=dict(loc=1300, scale=300)),     b = 0,     freq_di='M',     #seed=91 )  a3.plot(start=date(2021,1,1),end=date(2022,1,1),freq_output='M', iter=10) <pre>[1395.89528719 1265.9880505  1236.0637988  1338.39322009 1523.33028265\n 1138.9800723  1434.14999262 1177.43542666 1794.86141495 1762.74221843] 10 None None\n</pre> In\u00a0[8]: Copied! <pre>a3.plot(start=date(2021,1,1),end=date(2022,1,1),freq_output='M', ppf=[0.1,0.5,0.9])\n</pre> a3.plot(start=date(2021,1,1),end=date(2022,1,1),freq_output='M', ppf=[0.1,0.5,0.9])  <pre>[ 915.53453034 1300.         1684.46546966] 1 [0.1, 0.5, 0.9] None\n</pre> In\u00a0[29]: Copied! <pre>a3.get_qi(size=5, ppf=[0.1,0.5,0.9])\n</pre> a3.get_qi(size=5, ppf=[0.1,0.5,0.9]) Out[29]: <pre>array([1746.88417022,  811.61361827, 1418.51489622, 1561.97227396,\n       2047.25528332])</pre> In\u00a0[\u00a0]: Copied! <pre>w1 = dca.Wor(\n    bsw = dca.ProbVar(dist='uniform', kw=dict(loc=0.3, scale=0.4)),\n    slope = 3e-5,\n    fluid_rate = 4000,\n    ti=date(2021,1,1)\n)\n\nfr = w1.forecast(start=date(2021,1,1),end=date(2022,1,1),freq_output='D', iter=15, seed=91)\n\nfig, ax = plt.subplots(2,1, figsize=(10,7))\n\nsns.lineplot(data=fr, x=fr.index.to_timestamp(), y='oil_rate', hue='iteration', ax=ax[0],palette='Greens')\nsns.lineplot(data=fr, x=fr.index.to_timestamp(), y='bsw', hue='iteration', ax=ax[1], palette='Blues')\n</pre> w1 = dca.Wor(     bsw = dca.ProbVar(dist='uniform', kw=dict(loc=0.3, scale=0.4)),     slope = 3e-5,     fluid_rate = 4000,     ti=date(2021,1,1) )  fr = w1.forecast(start=date(2021,1,1),end=date(2022,1,1),freq_output='D', iter=15, seed=91)  fig, ax = plt.subplots(2,1, figsize=(10,7))  sns.lineplot(data=fr, x=fr.index.to_timestamp(), y='oil_rate', hue='iteration', ax=ax[0],palette='Greens') sns.lineplot(data=fr, x=fr.index.to_timestamp(), y='bsw', hue='iteration', ax=ax[1], palette='Blues') In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/1-basics/1d-Tutorial_Probabilistic_Variables/#dcapy-probabilistic-variables","title":"Dcapy &amp; Probabilistic Variables\u00b6","text":"<p>In <code>Dcapy</code> the two main classes to define a declination model are <code>Arps</code> and <code>Wor</code>. When creating instances of any of them you can define multiple values for a single parameter to create different iterations and obverve the impact of these changes in the result forecast.</p> <p>The ability to accept multiple values opens the opportunity to evaluate uncertainty variables modeled by probabilistic distributions throughout a Montecarlo Analysis.</p> <p>Let's review some cases of those instances with multiple values</p>"},{"location":"examples/1-basics/1d-Tutorial_Probabilistic_Variables/#1-create-a-probabilistic-instance-of-scipystats-module-and-create-n-random-variables","title":"1- Create a probabilistic instance of <code>scipy.stats</code> module and create <code>n</code> random variables\u00b6","text":""},{"location":"examples/1-basics/1d-Tutorial_Probabilistic_Variables/#2-create-a-probabilistic-instance-of-dcaprobvar-which-is-a-wrapper-for-any-of-the-scipystats-probabilistic-distributions-adding-some-features-to-ease-the-forcasting-process","title":"2- Create a probabilistic instance of <code>dca.ProbVar</code> which is a wrapper for any of the <code>scipy.stats</code> probabilistic distributions adding some features to ease the forcasting process\u00b6","text":""},{"location":"examples/1-basics/1e-Tutorial_Fit%20data/","title":"Fitting real data to Arps and Wor Models","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport numpy as np\nfrom dcapy import dca\nfrom dcapy.filters import exp_wgh_avg\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date, datetime\nnp.seterr(divide='ignore')\n</pre> import pandas as pd import numpy as np from dcapy import dca from dcapy.filters import exp_wgh_avg import matplotlib.pyplot as plt import seaborn as sns from datetime import date, datetime np.seterr(divide='ignore') Out[1]: <pre>{'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}</pre> In\u00a0[2]: Copied! <pre>prod = pd.read_csv('prod.csv')\nprod['date'] = pd.to_datetime(prod['date'], format='%Y-%m-%d')\nprint(prod.head())\nprint(prod.tail())\nprint(prod.shape)\n</pre> prod = pd.read_csv('prod.csv') prod['date'] = pd.to_datetime(prod['date'], format='%Y-%m-%d') print(prod.head()) print(prod.tail()) print(prod.shape)  <pre>        date    prod\n0 2015-07-01  338.58\n1 2015-07-02  339.75\n2 2015-07-03  349.65\n3 2015-07-04  357.48\n4 2015-07-05  344.16\n          date   prod\n602 2017-02-27  97.47\n603 2017-02-28  97.56\n604 2017-03-01  97.65\n605 2017-03-02  97.74\n606 2017-03-03  97.92\n(607, 2)\n</pre> <p>It is highly recommended to convert the date data to a datetime pandas format before pass it to the <code>fit</code> method</p> In\u00a0[3]: Copied! <pre>fig, ax = plt.subplots(figsize=(10,7))\nprod.plot(x='date',y='prod', kind='scatter',ax=ax)\n</pre> fig, ax = plt.subplots(figsize=(10,7)) prod.plot(x='date',y='prod', kind='scatter',ax=ax) Out[3]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='prod'&gt;</pre> <p>You can create an empty <code>Arps</code> instance and just define the frequency of the decline rate. As the input data format is a datetime, the <code>freq_di</code> is set on 'D'</p> <p>By calling <code>fit</code> method with the dataframe containing the production information you have to indicate the columns name containing the time and rate.</p> In\u00a0[4]: Copied! <pre>d1 = dca.Arps(freq_di='D')\nd1.fit(df=prod,time='date',rate='prod', beta=0.5)\nd1\n</pre> d1 = dca.Arps(freq_di='D') d1.fit(df=prod,time='date',rate='prod', beta=0.5) d1 Out[4]: <pre>Declination \n Ti: 2015-07-01 \n Qi: 407.6556078551238 bbl/d \n Di: 0.0061166609125105275 D \n b: 0.9285505938791447</pre> <p>The method tries to fit the data to Arps equation by tunning in this case the parameters <code>di</code> and <code>b</code>.</p> <p>Once the data is fitted the instances is populated with those parameters and you can start to make forecast</p> In\u00a0[5]: Copied! <pre>fig, ax = plt.subplots(figsize=(10,7))\n\nprod.plot(x='date',y='prod', kind='scatter',ax=ax)\n\nd1.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28))\n</pre> fig, ax = plt.subplots(figsize=(10,7))  prod.plot(x='date',y='prod', kind='scatter',ax=ax)  d1.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28)) In\u00a0[6]: Copied! <pre>d2 = dca.Arps(freq_di='D')\nfilters = d2.fit(df=prod,time='date',rate='prod', b=1)\nprint(d2)\n\nfig, ax = plt.subplots(figsize=(10,7))\n\nprod.plot(x='date',y='prod', kind='scatter',ax=ax)\n\nd2.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28))\n</pre> d2 = dca.Arps(freq_di='D') filters = d2.fit(df=prod,time='date',rate='prod', b=1) print(d2)  fig, ax = plt.subplots(figsize=(10,7))  prod.plot(x='date',y='prod', kind='scatter',ax=ax)  d2.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28))  <pre>Declination \n Ti: 2015-07-01 \n Qi: 406.35680255401354 bbl/d \n Di: 0.006157519157501374 D \n b: 1.0\n</pre> <pre>/Users/scuervo91/Documents/dev/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n</pre> In\u00a0[7]: Copied! <pre>d2 = dca.Arps(freq_di='D')\nfilters = d2.fit(df=prod,time='date',rate='prod', b_bounds=[0.1,0.5])\nprint(d2)\n\nfig, ax = plt.subplots(figsize=(10,7))\n\nprod.plot(x='date',y='prod', kind='scatter',ax=ax)\n\nd2.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28))\n</pre> d2 = dca.Arps(freq_di='D') filters = d2.fit(df=prod,time='date',rate='prod', b_bounds=[0.1,0.5]) print(d2)  fig, ax = plt.subplots(figsize=(10,7))  prod.plot(x='date',y='prod', kind='scatter',ax=ax)  d2.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28)) <pre>Declination \n Ti: 2015-07-01 \n Qi: 380.28249474984807 bbl/d \n Di: 0.004172719889709341 D \n b: 0.4999999999999999\n</pre> In\u00a0[8]: Copied! <pre>fig, ax = plt.subplots(figsize=(10,7))\nprod.plot(x='date',y='prod', kind='scatter',ax=ax)\n\nd2.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28))\nfilters.loc[filters['filter']==1].plot(x='time',y='oil_rate', kind='scatter',ax=ax, color='r')\n</pre> fig, ax = plt.subplots(figsize=(10,7)) prod.plot(x='date',y='prod', kind='scatter',ax=ax)  d2.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28)) filters.loc[filters['filter']==1].plot(x='time',y='oil_rate', kind='scatter',ax=ax, color='r') Out[8]: <pre>&lt;AxesSubplot:xlabel='time', ylabel='oil_rate'&gt;</pre> <p>If you want to apply another filter to remove possible outliers or anomaly data, you can use the <code>zscore</code> filter in the <code>dcapy.filters</code> module</p> In\u00a0[9]: Copied! <pre>from dcapy.filters import zscore\n</pre> from dcapy.filters import zscore In\u00a0[10]: Copied! <pre>d3 = dca.Arps(freq_di='D')\nf = d3.fit(df=prod,time='date',rate='prod', filter=zscore)\nd3\n</pre> d3 = dca.Arps(freq_di='D') f = d3.fit(df=prod,time='date',rate='prod', filter=zscore) d3 Out[10]: <pre>Declination \n Ti: 2015-07-01 \n Qi: 405.41476516605366 bbl/d \n Di: 0.006069294137811537 D \n b: 0.9871241473437588</pre> In\u00a0[11]: Copied! <pre>fig, ax = plt.subplots(figsize=(10,7))\nprod.plot(x='date',y='prod', kind='scatter',ax=ax)\n\nd3.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28))\nf.loc[f['filter']==1].plot(x='time',y='oil_rate', kind='scatter',ax=ax, color='r')\n</pre> fig, ax = plt.subplots(figsize=(10,7)) prod.plot(x='date',y='prod', kind='scatter',ax=ax)  d3.plot(ax=ax, start=date(2015,7,1), end=date(2017,2,28)) f.loc[f['filter']==1].plot(x='time',y='oil_rate', kind='scatter',ax=ax, color='r') Out[11]: <pre>&lt;AxesSubplot:xlabel='time', ylabel='oil_rate'&gt;</pre> In\u00a0[12]: Copied! <pre>d3 = dca.Arps(freq_di='D')\nf = d3.fit(df=prod,time=prod.index.values,rate='prod', filter=zscore)\nd3\n</pre> d3 = dca.Arps(freq_di='D') f = d3.fit(df=prod,time=prod.index.values,rate='prod', filter=zscore) d3 Out[12]: <pre>Declination \n Ti: 0 \n Qi: 405.1865720320772 bbl/d \n Di: 0.006036089475311114 D \n b: 0.9768008843670666</pre> <p>Fit data using dates with a custom declination frequency <code>freq_di</code>, which is different from the default frequency <code>D</code>.</p> In\u00a0[13]: Copied! <pre>a3 = dca.Arps(\n    ti = date(2021,1,1),\n    qi = 20,\n    di = 0.1,\n    b = 0.1,\n    freq_di='M',\n    seed=42\n)\na3\n\na4 = a3.forecast(start=date(2021,1,1),end=date(2022,1,1), freq_output='M', iter=10)\na4 = a4.reset_index()\na4['date'] = a4['date'].dt.to_timestamp()\n\nd2 = dca.Arps(freq_di='M')\nd2.fit(df=a4, time='date', rate='oil_rate',beta=1)\nprint(d2)\n\nfig, ax = plt.subplots(figsize=(10,7))\na4.plot(x='date', y='oil_rate', kind='scatter',ax=ax)\nd2.plot(ax=ax, start=date(2021,1,1), end=date(2022,1,1))\n</pre> a3 = dca.Arps(     ti = date(2021,1,1),     qi = 20,     di = 0.1,     b = 0.1,     freq_di='M',     seed=42 ) a3  a4 = a3.forecast(start=date(2021,1,1),end=date(2022,1,1), freq_output='M', iter=10) a4 = a4.reset_index() a4['date'] = a4['date'].dt.to_timestamp()  d2 = dca.Arps(freq_di='M') d2.fit(df=a4, time='date', rate='oil_rate',beta=1) print(d2)  fig, ax = plt.subplots(figsize=(10,7)) a4.plot(x='date', y='oil_rate', kind='scatter',ax=ax) d2.plot(ax=ax, start=date(2021,1,1), end=date(2022,1,1)) <pre>Declination \n Ti: 2021-01-01 \n Qi: 20.000000000000004 bbl/d \n Di: 0.10000000000000019 M \n b: 0.1000000000000047\n</pre> In\u00a0[14]: Copied! <pre>prod_wor = pd.read_csv('prod_wor.csv')\nprod_wor['date'] = pd.to_datetime(prod_wor['date'], format='%Y-%m-%d')\nprod_wor['fluid'] = prod_wor['oil'] + prod_wor['water']\nprod_wor['wor'] = prod_wor['water'] / prod_wor['oil']\nprod_wor['np'] = prod_wor['oil'].cumsum()\nprint(prod_wor.head())\nprint(prod_wor.tail())\nprint(prod_wor.shape)\n</pre> prod_wor = pd.read_csv('prod_wor.csv') prod_wor['date'] = pd.to_datetime(prod_wor['date'], format='%Y-%m-%d') prod_wor['fluid'] = prod_wor['oil'] + prod_wor['water'] prod_wor['wor'] = prod_wor['water'] / prod_wor['oil'] prod_wor['np'] = prod_wor['oil'].cumsum() print(prod_wor.head()) print(prod_wor.tail()) print(prod_wor.shape) <pre>        date    oil    water    fluid        wor      np\n0 1990-08-29  52.90  1065.25  1118.15  20.137051   52.90\n1 1990-08-30  66.10  1548.10  1614.20  23.420575  119.00\n2 1990-08-31  85.35  1654.45  1739.80  19.384300  204.35\n3 1990-09-01  79.95  1686.05  1766.00  21.088806  284.30\n4 1990-09-02  84.15  1791.65  1875.80  21.291147  368.45\n          date    oil    water    fluid        wor        np\n235 1991-04-21  47.65  2552.65  2600.30  53.570829  19241.25\n236 1991-04-22  47.15  2552.35  2599.50  54.132556  19288.40\n237 1991-04-23  46.30  2554.65  2600.95  55.176026  19334.70\n238 1991-04-24  46.30  2554.65  2600.95  55.176026  19381.00\n239 1991-04-25  45.05  2557.15  2602.20  56.762486  19426.05\n(240, 6)\n</pre> <p>When plotting you can identify two periods of production when the fluid rate is constant. We can extract the production profile after 1990-12.</p> In\u00a0[15]: Copied! <pre>fig, ax = plt.subplots(2,2,figsize=(15,10))\nprod_wor.plot(x='date',y='oil', kind='scatter', ax=ax[0,0], color='g')\nprod_wor.plot(x='date',y='wor', kind='scatter', ax=ax[0,1], color='b')\nprod_wor.plot(x='date',y='np', kind='scatter', ax=ax[1,0], color='darkgreen')\nprod_wor.plot(x='date',y='fluid', kind='scatter', ax=ax[1,1], color='grey')\n\nax[0,1].set_yscale('log')\n</pre> fig, ax = plt.subplots(2,2,figsize=(15,10)) prod_wor.plot(x='date',y='oil', kind='scatter', ax=ax[0,0], color='g') prod_wor.plot(x='date',y='wor', kind='scatter', ax=ax[0,1], color='b') prod_wor.plot(x='date',y='np', kind='scatter', ax=ax[1,0], color='darkgreen') prod_wor.plot(x='date',y='fluid', kind='scatter', ax=ax[1,1], color='grey')  ax[0,1].set_yscale('log') In\u00a0[16]: Copied! <pre>prod_w1 = prod_wor[prod_wor['date']&gt;=pd.Timestamp(1990,12,12)]\nprint(prod_w1.head())\n</pre> prod_w1 = prod_wor[prod_wor['date']&gt;=pd.Timestamp(1990,12,12)] print(prod_w1.head()) <pre>          date    oil    water    fluid        wor        np\n105 1990-12-12  97.70  2508.00  2605.70  25.670420  10121.30\n106 1990-12-13  97.35  2508.65  2606.00  25.769389  10218.65\n107 1990-12-14  96.20  2504.20  2600.40  26.031185  10314.85\n108 1990-12-15  96.20  2506.10  2602.30  26.050936  10411.05\n109 1990-12-16  95.45  2507.30  2602.75  26.268203  10506.50\n</pre> <p>The Wor fitting workflow is similar to Arps. Create an empty Wor instance, call the <code>fit</code> method with with the columns required.</p> In\u00a0[17]: Copied! <pre>wor_dec = dca.Wor()\nwor_dec.fit(df=prod_w1[['date','oil','water']], time='date',oil_rate='oil',water_rate='water')\nprint(wor_dec)\n</pre> wor_dec = dca.Wor() wor_dec.fit(df=prod_w1[['date','oil','water']], time='date',oil_rate='oil',water_rate='water') print(wor_dec) <pre>bsw=0.9600600634231139 slope=8.181985964097689e-05 fluid_rate=2596.3974074074076 ti=datetime.date(1990, 12, 12) seed=None gor=None glr=None\n</pre> <p>Plot the results</p> In\u00a0[18]: Copied! <pre>wor_forecast=wor_dec.forecast(start=date(1990,12,12),end=date(1991,4,25), cum_i=10121)\nfig, ax = plt.subplots(2,1, figsize=(10,10))\n\nprod_wor.plot(x='date',y='oil', kind='scatter', ax=ax[0], color='g')\nsns.lineplot(data=wor_forecast.to_timestamp().reset_index(), x='date',y='oil_rate', ax=ax[0])\n\n\nprod_wor.plot(x='np',y='wor', kind='scatter', ax=ax[1], color='b')\nsns.lineplot(data=wor_forecast.to_timestamp().reset_index(), x='oil_cum',y='wor', ax=ax[1])\nax[1].set_yscale('log')\n\nax[0].grid()\nax[1].grid()\n</pre> wor_forecast=wor_dec.forecast(start=date(1990,12,12),end=date(1991,4,25), cum_i=10121) fig, ax = plt.subplots(2,1, figsize=(10,10))  prod_wor.plot(x='date',y='oil', kind='scatter', ax=ax[0], color='g') sns.lineplot(data=wor_forecast.to_timestamp().reset_index(), x='date',y='oil_rate', ax=ax[0])   prod_wor.plot(x='np',y='wor', kind='scatter', ax=ax[1], color='b') sns.lineplot(data=wor_forecast.to_timestamp().reset_index(), x='oil_cum',y='wor', ax=ax[1]) ax[1].set_yscale('log')  ax[0].grid() ax[1].grid() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/1-basics/1e-Tutorial_Fit%20data/#fitting-real-data-to-arps-and-wor-models","title":"Fitting real data to Arps and Wor Models\u00b6","text":"<p>Most of the time you have to get the declination parameters by fitting the real data. Both Arps and Wor classes have the method <code>fit</code> to excecute the workflow.</p>"},{"location":"examples/1-basics/1e-Tutorial_Fit%20data/#fit-to-arps","title":"Fit to Arps\u00b6","text":"<p>Import a sample production from a csv file and plot it.</p>"},{"location":"examples/1-basics/1e-Tutorial_Fit%20data/#fit-data-with-a-fix-b-value","title":"Fit data with a fix <code>b</code> value\u00b6","text":"<p>If you'd like to fit the data specifically with a certain value of <code>b</code> parameter, you can declare it in the <code>fit</code>  method</p>"},{"location":"examples/1-basics/1e-Tutorial_Fit%20data/#data-filtering","title":"Data Filtering\u00b6","text":"<p>When passing data to the <code>fit</code> method it automatically filter production greater than zero to used by the fitting function.</p>"},{"location":"examples/1-basics/1e-Tutorial_Fit%20data/#fit-to-wor","title":"Fit to WOR\u00b6","text":"<p>Load the production data and estimate some parameters like Wor and Cumulative oil production</p>"},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/","title":"CashFlow Analysis","text":"In\u00a0[1]: Copied! <pre>from datetime import date \nfrom dcapy.cashflow import CashFlow\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n</pre> from datetime import date  from dcapy.cashflow import CashFlow import numpy as np import matplotlib.pyplot as plt import pandas as pd In\u00a0[2]: Copied! <pre>cash1 = CashFlow(\n    name = 'Cashflow_zeros',\n    start = date(2021,1,1),\n    end = date(2021,6,1),\n    freq_input = 'M'\n)\nprint(cash1)\nprint(cash1.get_cashflow())\n</pre> cash1 = CashFlow(     name = 'Cashflow_zeros',     start = date(2021,1,1),     end = date(2021,6,1),     freq_input = 'M' ) print(cash1) print(cash1.get_cashflow()) <pre>name='Cashflow_zeros' const_value=0 start=datetime.date(2021, 1, 1) end=datetime.date(2021, 6, 1) periods=None freq_output=None freq_input=&lt;FreqEnum.M: 'M'&gt; chgpts=None\n2021-01    0.0\n2021-02    0.0\n2021-03    0.0\n2021-04    0.0\n2021-05    0.0\n2021-06    0.0\nFreq: M, dtype: float64\n</pre> <p>By default, if the cashflow has no value assignment, it creates an array of zeros.</p> In\u00a0[3]: Copied! <pre>cash2 = CashFlow(\n    name = 'Cashflow_cons_value',\n    const_value= 2000,\n    start = date(2021,1,1),\n    end = date(2021,6,1),\n    freq_input = 'M'\n)\nprint(cash2)\nprint(cash2.get_cashflow())\n</pre> cash2 = CashFlow(     name = 'Cashflow_cons_value',     const_value= 2000,     start = date(2021,1,1),     end = date(2021,6,1),     freq_input = 'M' ) print(cash2) print(cash2.get_cashflow()) <pre>name='Cashflow_cons_value' const_value=2000.0 start=datetime.date(2021, 1, 1) end=datetime.date(2021, 6, 1) periods=None freq_output=None freq_input=&lt;FreqEnum.M: 'M'&gt; chgpts=None\n2021-01    2000.0\n2021-02    2000.0\n2021-03    2000.0\n2021-04    2000.0\n2021-05    2000.0\n2021-06    2000.0\nFreq: M, dtype: float64\n</pre> In\u00a0[4]: Copied! <pre>cash3 = CashFlow(\n    name = 'Cashflow_different_values',\n    const_value= [2000,1500,1252,1458,5869,550],\n    start = date(2021,1,1),\n    end = date(2026,1,1),\n    freq_input = 'A'\n)\nprint(cash3)\nprint(cash3.get_cashflow())\n</pre> cash3 = CashFlow(     name = 'Cashflow_different_values',     const_value= [2000,1500,1252,1458,5869,550],     start = date(2021,1,1),     end = date(2026,1,1),     freq_input = 'A' ) print(cash3) print(cash3.get_cashflow()) <pre>name='Cashflow_different_values' const_value=[2000.0, 1500.0, 1252.0, 1458.0, 5869.0, 550.0] start=datetime.date(2021, 1, 1) end=datetime.date(2026, 1, 1) periods=None freq_output=None freq_input=&lt;FreqEnum.A: 'A'&gt; chgpts=None\n2021    2000.0\n2022    1500.0\n2023    1252.0\n2024    1458.0\n2025    5869.0\n2026     550.0\nFreq: A-DEC, dtype: float64\n</pre> In\u00a0[5]: Copied! <pre>cash3 = CashFlow(\n    name = 'Cashflow_different_values',\n    const_value= 100,\n    start = date(2021,1,1),\n    end = date(2022,12,1),\n    freq_input = 'M'\n)\nprint(cash3)\nprint(cash3.get_cashflow())\n</pre> cash3 = CashFlow(     name = 'Cashflow_different_values',     const_value= 100,     start = date(2021,1,1),     end = date(2022,12,1),     freq_input = 'M' ) print(cash3) print(cash3.get_cashflow()) <pre>name='Cashflow_different_values' const_value=100.0 start=datetime.date(2021, 1, 1) end=datetime.date(2022, 12, 1) periods=None freq_output=None freq_input=&lt;FreqEnum.M: 'M'&gt; chgpts=None\n2021-01    100.0\n2021-02    100.0\n2021-03    100.0\n2021-04    100.0\n2021-05    100.0\n2021-06    100.0\n2021-07    100.0\n2021-08    100.0\n2021-09    100.0\n2021-10    100.0\n2021-11    100.0\n2021-12    100.0\n2022-01    100.0\n2022-02    100.0\n2022-03    100.0\n2022-04    100.0\n2022-05    100.0\n2022-06    100.0\n2022-07    100.0\n2022-08    100.0\n2022-09    100.0\n2022-10    100.0\n2022-11    100.0\n2022-12    100.0\nFreq: M, dtype: float64\n</pre> In\u00a0[6]: Copied! <pre>print(cash3.get_cashflow(freq_output='A'))\n</pre> print(cash3.get_cashflow(freq_output='A')) <pre>2021    1200.0\n2022    1200.0\nFreq: A-DEC, dtype: float64\n</pre> In\u00a0[7]: Copied! <pre>cash3a = CashFlow(\n    name = 'Cashflow_different_values',\n    const_value= 100,\n    start = 0,\n    end = 47,\n    periods=None,\n    freq_input = 'M'\n)\nprint(cash3a)\nprint(cash3a.get_cashflow(freq_output='A'))\n</pre> cash3a = CashFlow(     name = 'Cashflow_different_values',     const_value= 100,     start = 0,     end = 47,     periods=None,     freq_input = 'M' ) print(cash3a) print(cash3a.get_cashflow(freq_output='A')) <pre>name='Cashflow_different_values' const_value=100.0 start=0 end=47 periods=None freq_output=None freq_input=&lt;FreqEnum.M: 'M'&gt; chgpts=None\n0.0    1200.0\n1.0    1200.0\n2.0    1200.0\n3.0    1200.0\ndtype: float64\n</pre> In\u00a0[8]: Copied! <pre>cash4 = CashFlow(\n    name = 'Cashflow_different_values',\n    const_value= 10000,\n    periods = 6,\n    start = date(2021,1,1),\n    end = date(2022,12,1),\n    freq_input = 'M'\n)\nprint(cash4)\nprint(cash4.get_cashflow())\n</pre> cash4 = CashFlow(     name = 'Cashflow_different_values',     const_value= 10000,     periods = 6,     start = date(2021,1,1),     end = date(2022,12,1),     freq_input = 'M' ) print(cash4) print(cash4.get_cashflow()) <pre>name='Cashflow_different_values' const_value=10000.0 start=datetime.date(2021, 1, 1) end=datetime.date(2022, 12, 1) periods=6 freq_output=None freq_input=&lt;FreqEnum.M: 'M'&gt; chgpts=None\n2021-01    10000.0\n2021-02    10000.0\n2021-03    10000.0\n2021-04    10000.0\n2021-05    10000.0\n2021-06    10000.0\nFreq: M, dtype: float64\n</pre> In\u00a0[9]: Copied! <pre>### Set to the last period\n</pre> ### Set to the last period In\u00a0[10]: Copied! <pre>cash5 = CashFlow(\n    name = 'Cashflow_different_values',\n    const_value= -10000,\n    periods = -1,\n    start = date(2021,1,1),\n    end = date(2022,12,1),\n    freq_input = 'M'\n)\nprint(cash5)\nprint(cash5.get_cashflow())\n</pre> cash5 = CashFlow(     name = 'Cashflow_different_values',     const_value= -10000,     periods = -1,     start = date(2021,1,1),     end = date(2022,12,1),     freq_input = 'M' ) print(cash5) print(cash5.get_cashflow()) <pre>name='Cashflow_different_values' const_value=-10000.0 start=datetime.date(2021, 1, 1) end=datetime.date(2022, 12, 1) periods=-1 freq_output=None freq_input=&lt;FreqEnum.M: 'M'&gt; chgpts=None\n2022-12   -10000.0\nFreq: M, dtype: float64\n</pre> In\u00a0[11]: Copied! <pre>cash6 = CashFlow(\n    name = 'Cashflow_different_values',\n    start = date(2021,1,1),\n    end = date(2021,12,1),\n    freq_input = 'M',\n    chgpts = {\n        'date': ['2021-03-01','2021-07-01', '2021-12-01'],\n        'value': [-500,-600,-700]\n    }\n)\nprint(cash6)\nprint(cash6.get_cashflow())\n</pre> cash6 = CashFlow(     name = 'Cashflow_different_values',     start = date(2021,1,1),     end = date(2021,12,1),     freq_input = 'M',     chgpts = {         'date': ['2021-03-01','2021-07-01', '2021-12-01'],         'value': [-500,-600,-700]     } ) print(cash6) print(cash6.get_cashflow()) <pre>name='Cashflow_different_values' const_value=0 start=datetime.date(2021, 1, 1) end=datetime.date(2021, 12, 1) periods=None freq_output=None freq_input=&lt;FreqEnum.M: 'M'&gt; chgpts=ChgPts(date=[datetime.date(2021, 3, 1), datetime.date(2021, 7, 1), datetime.date(2021, 12, 1)], value=[-500.0, -600.0, -700.0])\n2021-01      0.0\n2021-02      0.0\n2021-03   -500.0\n2021-04      0.0\n2021-05      0.0\n2021-06      0.0\n2021-07   -600.0\n2021-08      0.0\n2021-09      0.0\n2021-10      0.0\n2021-11      0.0\n2021-12   -700.0\nFreq: M, dtype: float64\n</pre> <p>Create a cashflow from a <code>pd.Series</code></p> In\u00a0[12]: Copied! <pre>period = pd.period_range(start='2021-01-01', end='2021-03-01', freq='M').to_timestamp()\nsr = pd.Series([1000,2000,3000], index=period, name='Cashflow_different_values')\nsr\n</pre> period = pd.period_range(start='2021-01-01', end='2021-03-01', freq='M').to_timestamp() sr = pd.Series([1000,2000,3000], index=period, name='Cashflow_different_values') sr Out[12]: <pre>2021-01-01    1000\n2021-02-01    2000\n2021-03-01    3000\nFreq: MS, Name: Cashflow_different_values, dtype: int64</pre> In\u00a0[13]: Copied! <pre>csh_from_sr = CashFlow.from_series(sr)\ncsh_from_sr\n</pre> csh_from_sr = CashFlow.from_series(sr) csh_from_sr Out[13]: <pre>CashFlow(name='Cashflow_different_values', const_value=[1000.0, 2000.0, 3000.0], start=datetime.date(2021, 1, 1), end=datetime.date(2021, 3, 1), periods=None, freq_output=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, chgpts=None)</pre> In\u00a0[14]: Copied! <pre>oil_sell = CashFlow(\n    name = 'oil_sell',\n    const_value= [60000,58000,55000,62000,65000,64000,60000,58000,55000,62000,65000,64000],\n    start = date(2021,1,1),\n    end = date(2021,12,1),\n    freq_input = 'M'\n)\n\ngas_sell = CashFlow(\n    name = 'gas_sell',\n    const_value= [36000,34000,30000,34000,28000,31000,36000,34000,30000,34000,28000,31000],\n    start = date(2021,1,1),\n    end = date(2021,12,1),\n    freq_input = 'M'\n)\n\ngas_sell = CashFlow(\n    name = 'gas_sell',\n    const_value= [36000,34000,30000,34000,28000,31000,36000,34000,30000,34000,28000,31000],\n    start = date(2021,1,1),\n    end = date(2021,12,1),\n    freq_input = 'M'\n)\n\nopex = CashFlow(\n    name = 'cost',\n    const_value= -30000,\n    start = date(2021,1,1),\n    end = date(2021,12,1),\n    freq_input = 'M'\n)\n\ncapex_init = CashFlow(\n    name = 'capex_initial',\n    const_value= -250000,\n    periods = 1,\n    start = date(2021,1,1),\n    end = date(2021,12,1),\n    freq_input = 'M'\n)\n\ncapex_final = CashFlow(\n    name = 'capex_initial',\n    const_value= -80000,\n    periods = -1,\n    start = date(2021,1,1),\n    end = date(2021,12,1),\n    freq_input = 'M'\n)\n</pre> oil_sell = CashFlow(     name = 'oil_sell',     const_value= [60000,58000,55000,62000,65000,64000,60000,58000,55000,62000,65000,64000],     start = date(2021,1,1),     end = date(2021,12,1),     freq_input = 'M' )  gas_sell = CashFlow(     name = 'gas_sell',     const_value= [36000,34000,30000,34000,28000,31000,36000,34000,30000,34000,28000,31000],     start = date(2021,1,1),     end = date(2021,12,1),     freq_input = 'M' )  gas_sell = CashFlow(     name = 'gas_sell',     const_value= [36000,34000,30000,34000,28000,31000,36000,34000,30000,34000,28000,31000],     start = date(2021,1,1),     end = date(2021,12,1),     freq_input = 'M' )  opex = CashFlow(     name = 'cost',     const_value= -30000,     start = date(2021,1,1),     end = date(2021,12,1),     freq_input = 'M' )  capex_init = CashFlow(     name = 'capex_initial',     const_value= -250000,     periods = 1,     start = date(2021,1,1),     end = date(2021,12,1),     freq_input = 'M' )  capex_final = CashFlow(     name = 'capex_initial',     const_value= -80000,     periods = -1,     start = date(2021,1,1),     end = date(2021,12,1),     freq_input = 'M' )   In\u00a0[15]: Copied! <pre>from dcapy.cashflow import CashFlowModel\n</pre> from dcapy.cashflow import CashFlowModel In\u00a0[16]: Copied! <pre>cm = CashFlowModel(\n    name = 'Example Cashflow Model',\n    income=[oil_sell, gas_sell],\n    opex=[opex],\n    capex=[capex_init,capex_final]\n)\n\nprint(cm)\n</pre> cm = CashFlowModel(     name = 'Example Cashflow Model',     income=[oil_sell, gas_sell],     opex=[opex],     capex=[capex_init,capex_final] )  print(cm) <pre>name='Example Cashflow Model' income=[CashFlow(name='oil_sell', const_value=[60000.0, 58000.0, 55000.0, 62000.0, 65000.0, 64000.0, 60000.0, 58000.0, 55000.0, 62000.0, 65000.0, 64000.0], start=datetime.date(2021, 1, 1), end=datetime.date(2021, 12, 1), periods=None, freq_output=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, chgpts=None), CashFlow(name='gas_sell', const_value=[36000.0, 34000.0, 30000.0, 34000.0, 28000.0, 31000.0, 36000.0, 34000.0, 30000.0, 34000.0, 28000.0, 31000.0], start=datetime.date(2021, 1, 1), end=datetime.date(2021, 12, 1), periods=None, freq_output=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, chgpts=None)] opex=[CashFlow(name='cost', const_value=-30000.0, start=datetime.date(2021, 1, 1), end=datetime.date(2021, 12, 1), periods=None, freq_output=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, chgpts=None)] capex=[CashFlow(name='capex_initial', const_value=-250000.0, start=datetime.date(2021, 1, 1), end=datetime.date(2021, 12, 1), periods=1, freq_output=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, chgpts=None), CashFlow(name='capex_initial', const_value=-80000.0, start=datetime.date(2021, 1, 1), end=datetime.date(2021, 12, 1), periods=-1, freq_output=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, chgpts=None)]\n</pre> <p>Create the Free Cash Flow</p> In\u00a0[17]: Copied! <pre>print(cm.fcf())\n</pre> print(cm.fcf()) <pre>         oil_sell  gas_sell  total_income     cost  total_opex  capex_initial  \\\n2021-01   60000.0   36000.0       96000.0 -30000.0    -30000.0      -250000.0   \n2021-02   58000.0   34000.0       92000.0 -30000.0    -30000.0            0.0   \n2021-03   55000.0   30000.0       85000.0 -30000.0    -30000.0            0.0   \n2021-04   62000.0   34000.0       96000.0 -30000.0    -30000.0            0.0   \n2021-05   65000.0   28000.0       93000.0 -30000.0    -30000.0            0.0   \n2021-06   64000.0   31000.0       95000.0 -30000.0    -30000.0            0.0   \n2021-07   60000.0   36000.0       96000.0 -30000.0    -30000.0            0.0   \n2021-08   58000.0   34000.0       92000.0 -30000.0    -30000.0            0.0   \n2021-09   55000.0   30000.0       85000.0 -30000.0    -30000.0            0.0   \n2021-10   62000.0   34000.0       96000.0 -30000.0    -30000.0            0.0   \n2021-11   65000.0   28000.0       93000.0 -30000.0    -30000.0            0.0   \n2021-12   64000.0   31000.0       95000.0 -30000.0    -30000.0            0.0   \n\n         capex_initial  total_capex       fcf   cum_fcf  \n2021-01            0.0    -250000.0 -184000.0 -184000.0  \n2021-02            0.0          0.0   62000.0 -122000.0  \n2021-03            0.0          0.0   55000.0  -67000.0  \n2021-04            0.0          0.0   66000.0   -1000.0  \n2021-05            0.0          0.0   63000.0   62000.0  \n2021-06            0.0          0.0   65000.0  127000.0  \n2021-07            0.0          0.0   66000.0  193000.0  \n2021-08            0.0          0.0   62000.0  255000.0  \n2021-09            0.0          0.0   55000.0  310000.0  \n2021-10            0.0          0.0   66000.0  376000.0  \n2021-11            0.0          0.0   63000.0  439000.0  \n2021-12       -80000.0     -80000.0  -15000.0  424000.0  \n</pre> In\u00a0[18]: Copied! <pre>irr = cm.irr()\n\nprint(f'IRR {round(irr,2)}')\n</pre> irr = cm.irr()  print(f'IRR {round(irr,2)}') <pre>IRR 0.31\n</pre> <p>Define annual rates of 0, 5, 10 and 15%. Convert them to montly basis and call the <code>nvp method</code></p> In\u00a0[19]: Copied! <pre>annual_rates = np.array([0,0.5,0.1,0.15])\nmonthly_rates = np.power(1 + annual_rates,(1/12)) - 1\nprint(monthly_rates)\n</pre> annual_rates = np.array([0,0.5,0.1,0.15]) monthly_rates = np.power(1 + annual_rates,(1/12)) - 1 print(monthly_rates) <pre>[0.         0.03436608 0.00797414 0.01171492]\n</pre> In\u00a0[20]: Copied! <pre>cashflow_npv = cm.npv(monthly_rates)\n\nprint(cashflow_npv)\n</pre> cashflow_npv = cm.npv(monthly_rates)  print(cashflow_npv) <pre>                    npv\n0.000000  424000.000000\n0.034366  325004.808220\n0.007974  398668.970497\n0.011715  387312.164217\n</pre> In\u00a0[21]: Copied! <pre>fig, ax = plt.subplots(2,2,figsize=(20,10))\n\ncm.plot(ax=ax[0,0])\ncm.plot(ax=ax[0,1], cum=True)\ncm.plot(ax=ax[1,0], format='m')\ncm.plot(ax=ax[1,1], bar_kw={'palette': {\n            'income':'darkgreen',\n            'opex':'blue',\n            'capex':'darkred',\n            'fcf':'black'\n        }})\n</pre> fig, ax = plt.subplots(2,2,figsize=(20,10))  cm.plot(ax=ax[0,0]) cm.plot(ax=ax[0,1], cum=True) cm.plot(ax=ax[1,0], format='m') cm.plot(ax=ax[1,1], bar_kw={'palette': {             'income':'darkgreen',             'opex':'blue',             'capex':'darkred',             'fcf':'black'         }}) <pre>/Users/scuervo91/Documents/dev/dcapy/dcapy/cashflow/cashflow.py:368: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/Users/scuervo91/Documents/dev/dcapy/dcapy/cashflow/cashflow.py:368: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/Users/scuervo91/Documents/dev/dcapy/dcapy/cashflow/cashflow.py:376: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/Users/scuervo91/Documents/dev/dcapy/dcapy/cashflow/cashflow.py:368: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/Users/scuervo91/Documents/dev/dcapy/dcapy/cashflow/cashflow.py:368: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n</pre> In\u00a0[22]: Copied! <pre>cm.plot(\n    bar_kw={\n        'palette': {\n            'income':'darkgreen',\n            'opex':'blue',\n            'capex':'darkred',\n            'fcf':'black'\n        }\n    }\n)\n</pre> cm.plot(     bar_kw={         'palette': {             'income':'darkgreen',             'opex':'blue',             'capex':'darkred',             'fcf':'black'         }     } ) <pre>/Users/scuervo91/Documents/dev/dcapy/dcapy/cashflow/cashflow.py:368: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#cashflow-analysis","title":"CashFlow Analysis\u00b6","text":"<p>Before talking the scheule capabilities, it is required to introduce the user with the CashFlow module. This Module allows you to create a series of cashflow woth the purpose of creating a CashFlow Model which can be used to analized the financial behavior of any forecast produced by <code>dcapy.dca</code> Module</p> <p>This module is inspired by Python cashflows Package</p>"},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#get-output-cashflow-on-different-time-frequency","title":"Get output cashflow on different time frequency\u00b6","text":""},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#define-number-of-periods-of-the-cashflow","title":"Define Number of periods of the cashflow\u00b6","text":""},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#set-custom-cashflow-throgh-time","title":"Set custom cashflow throgh time\u00b6","text":"<p>by setting the <code>chgpts</code> parameter as a dictionary with date and value keys, you can make a custom cashflow to certain dates</p>"},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#cashflow-models","title":"CashFlow Models\u00b6","text":"<p>The <code>CashFlow</code> class is very useful when combined in a full CashFlow Model to incorporate income, opex and capex and evaluate the capital efficiency on a Free Cash Flow.</p> <p>Let's create some cashflows that represent those items.</p>"},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#create-a-cashflow-model","title":"Create a CashFlow Model\u00b6","text":""},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#estimate-the-irr-and-npv","title":"Estimate The IRR and NPV\u00b6","text":""},{"location":"examples/2-cashflow/2a-Cashflow%20Basics/#plot-the-cashflow","title":"Plot The cashflow\u00b6","text":""},{"location":"examples/3-Wiener/3-Wiener_procces/","title":"Wiener Processes","text":"In\u00a0[1]: Copied! <pre>import os\nfrom dcapy.wiener import Brownian, GeometricBrownian,MeanReversion\nfrom dcapy.dca import ProbVar\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\n</pre> import os from dcapy.wiener import Brownian, GeometricBrownian,MeanReversion from dcapy.dca import ProbVar import numpy as np  import pandas as pd from datetime import date import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats In\u00a0[3]: Copied! <pre>rw = Brownian()\nrw\n</pre> rw = Brownian() rw Out[3]: <pre>Brownian(initial_condition=0, ti=0, steps=1, processes=1, generator=ProbVar(dist='norm', kw={'loc': 0, 'scale': 1}, factor=1.0, seed=None), freq_input='D', freq_output='D', drift=0)</pre> <p>By default, a <code>Brownian</code> class is initialized with random generator defined by a <code>ProbVar</code> class (Seen on Montecarlo analysis when forecasting) with a standard normal distribution.</p> <p>By calling the method <code>generate</code> and pass the number of steps and processes it returns a dataframe with the data.</p> In\u00a0[9]: Copied! <pre>steps = 500 \nprocesses = 20\n\ndf = rw.generate(steps, processes,seed=21)\ndf.plot(legend=False)\n</pre> steps = 500  processes = 20  df = rw.generate(steps, processes,seed=21) df.plot(legend=False) Out[9]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[18]: Copied! <pre>rw = Brownian(\n    initial_condition=100,\n    ti=0,\n    drift = 0.2\n)\ndf = rw.generate(steps, processes, seed=21)\ndf.plot(legend=False)\n</pre> rw = Brownian(     initial_condition=100,     ti=0,     drift = 0.2 ) df = rw.generate(steps, processes, seed=21) df.plot(legend=False)   Out[18]: <pre>&lt;AxesSubplot:&gt;</pre> <p>Try different generator parameters</p> In\u00a0[20]: Copied! <pre>rw = Brownian(\n    initial_condition=100,\n    ti=0,\n    drift = 0.2,\n    generator=ProbVar(dist='norm', kw={'loc': 0, 'scale': 3})\n)\ndf = rw.generate(steps, processes, seed=21)\ndf.plot(legend=False)\n</pre> rw = Brownian(     initial_condition=100,     ti=0,     drift = 0.2,     generator=ProbVar(dist='norm', kw={'loc': 0, 'scale': 3}) ) df = rw.generate(steps, processes, seed=21) df.plot(legend=False) Out[20]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[21]: Copied! <pre>df.iloc[-5:,2:4].to_dict()\n</pre> df.iloc[-5:,2:4].to_dict() Out[21]: <pre>{2: {495: 232.45683887750448,\n  496: 232.13758213986907,\n  497: 226.4127500997084,\n  498: 230.31191895112065,\n  499: 231.53885761432832},\n 3: {495: 188.09406097045363,\n  496: 187.18454346136707,\n  497: 184.99190959455308,\n  498: 187.43233147587208,\n  499: 186.18314679682655}}</pre> In\u00a0[6]: Copied! <pre>rw = Brownian(\n    initial_condition=100,\n    ti=date(2021,1,1,),\n    freq_output='D',\n    drift = 0.2,\n    generator=ProbVar(dist='norm', kw={'loc': 0, 'scale': 3})\n)\ndf = rw.generate(steps, processes)\ndf.plot(legend=False)\n</pre> rw = Brownian(     initial_condition=100,     ti=date(2021,1,1,),     freq_output='D',     drift = 0.2,     generator=ProbVar(dist='norm', kw={'loc': 0, 'scale': 3}) ) df = rw.generate(steps, processes) df.plot(legend=False) Out[6]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[7]: Copied! <pre>x1 = Brownian(initial_condition=100,drift=0.5, freq_input='A')\n\nfig,ax = plt.subplots(figsize=(12,7))\ndf1 = x1.generate(50*12,50, freq_output='M')\ndf1.plot(ax=ax,legend=False)\ndf1a = x1.generate(50*12,3, freq_output='M',interval=0.07)\ndf1a.plot(ax=ax)\n</pre> x1 = Brownian(initial_condition=100,drift=0.5, freq_input='A')  fig,ax = plt.subplots(figsize=(12,7)) df1 = x1.generate(50*12,50, freq_output='M') df1.plot(ax=ax,legend=False) df1a = x1.generate(50*12,3, freq_output='M',interval=0.07) df1a.plot(ax=ax) Out[7]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[8]: Copied! <pre>x2 = Brownian(\n    initial_condition=0,\n    generator = ProbVar(dist='norm',kw={'loc':0,'scale':0.2887}, seed=910821),\n    drift=0.2/12,\n    freq_input='M')\n\nfig,ax = plt.subplots(figsize=(12,7))\ndf2 = x2.generate(50*12,10, freq_output='M')\ndf2.plot(ax=ax,legend=False)\ndf2a = x2.generate(50*12,3, freq_output='M',interval=0.07)\ndf2a.plot(ax=ax)\n</pre> x2 = Brownian(     initial_condition=0,     generator = ProbVar(dist='norm',kw={'loc':0,'scale':0.2887}, seed=910821),     drift=0.2/12,     freq_input='M')  fig,ax = plt.subplots(figsize=(12,7)) df2 = x2.generate(50*12,10, freq_output='M') df2.plot(ax=ax,legend=False) df2a = x2.generate(50*12,3, freq_output='M',interval=0.07) df2a.plot(ax=ax) Out[8]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[23]: Copied! <pre>x3 = GeometricBrownian(\n    initial_condition=80,\n    generator = ProbVar(dist='norm',kw={'loc':0,'scale':0.26}, seed=9113),\n    drift=0.01,\n    freq_input='A')\n\nfig,ax = plt.subplots(figsize=(12,8))\ndf3 = x3.generate(12,20, freq_output='A', seed=21)\ndf3.plot(ax=ax,legend=False)\n</pre> x3 = GeometricBrownian(     initial_condition=80,     generator = ProbVar(dist='norm',kw={'loc':0,'scale':0.26}, seed=9113),     drift=0.01,     freq_input='A')  fig,ax = plt.subplots(figsize=(12,8)) df3 = x3.generate(12,20, freq_output='A', seed=21) df3.plot(ax=ax,legend=False) Out[23]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[10]: Copied! <pre>#x4 = Weiner(initial_condition=10,generator=stats.norm, mu=0.03/12, kw_generator={'scale':np.sqrt(np.power(0.26,2)/12)},freq_mu='A', seed=9)\n\nx4 = GeometricBrownian(\n    initial_condition=10,\n    generator = ProbVar(dist='norm',kw={'loc':0,'scale':np.sqrt(np.power(0.26,2)/12)}, seed=9),\n    drift=0.03/12,\n    freq_input='A')\n\nfig,ax = plt.subplots(figsize=(12,8))\ndf4 = x4.generate(20*12,20, freq_output='A')\ndf4.plot(ax=ax,legend=False)\ndf4a = x4.generate(20*12,3, freq_output='A',interval=0.1)\ndf4a.plot(ax=ax, linewidth=4)\n</pre> #x4 = Weiner(initial_condition=10,generator=stats.norm, mu=0.03/12, kw_generator={'scale':np.sqrt(np.power(0.26,2)/12)},freq_mu='A', seed=9)  x4 = GeometricBrownian(     initial_condition=10,     generator = ProbVar(dist='norm',kw={'loc':0,'scale':np.sqrt(np.power(0.26,2)/12)}, seed=9),     drift=0.03/12,     freq_input='A')  fig,ax = plt.subplots(figsize=(12,8)) df4 = x4.generate(20*12,20, freq_output='A') df4.plot(ax=ax,legend=False) df4a = x4.generate(20*12,3, freq_output='A',interval=0.1) df4a.plot(ax=ax, linewidth=4) Out[10]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[11]: Copied! <pre>df4 = x4.generate(20*12,3, freq_output='A',interval=0.1)\ndf4.plot()\n</pre>  df4 = x4.generate(20*12,3, freq_output='A',interval=0.1) df4.plot() Out[11]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[30]: Copied! <pre>oil_mr = MeanReversion(\n    initial_condition = 66,\n    ti = 0,\n    generator = {'dist':'norm','kw':{'loc':0,'scale':5.13}},\n    m=46.77,\n    eta=0.112652,\n    freq_input = 'A'\n)\n\nprice_mr = oil_mr.generate(12,50, freq_output='A', seed=21)\n\nprice_mr.plot(legend=False)\n</pre> oil_mr = MeanReversion(     initial_condition = 66,     ti = 0,     generator = {'dist':'norm','kw':{'loc':0,'scale':5.13}},     m=46.77,     eta=0.112652,     freq_input = 'A' )  price_mr = oil_mr.generate(12,50, freq_output='A', seed=21)  price_mr.plot(legend=False) Out[30]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[31]: Copied! <pre>price_mr.iloc[-5:,2:4].to_dict()\n</pre> price_mr.iloc[-5:,2:4].to_dict() Out[31]: <pre>{2: {7: 75.17152947067616,\n  8: 65.04597525741526,\n  9: 54.13505845726961,\n  10: 55.41636945148142,\n  11: 60.879395238090595},\n 3: {7: 68.96120878051282,\n  8: 71.31717910163093,\n  9: 65.83984995324853,\n  10: 62.34497287513045,\n  11: 55.34394126548259}}</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/3-Wiener/3-Wiener_procces/#wiener-processes","title":"Wiener Processes\u00b6","text":"<p>One of the important parameters when evaluating forecast economically is the Oil Price. Several authors have stated that the Oil Price follows a Wiener process in which the future value does not depend on the past but follows Gaussian increments each step.</p> <p><code>Dcapy.wiener</code> module provides somes classes to implement simple Random Walks, Brownian Geometric Motion and Mean Reversion. This sections review how to initialize those proccesesss and in laters sections are going to be implemented directly on a cashflow modeling</p>"},{"location":"examples/3-Wiener/3-Wiener_procces/#add-custom-parameters","title":"Add custom parameters\u00b6","text":"<p>Set initial conditions and drift</p>"},{"location":"examples/3-Wiener/3-Wiener_procces/#add-dates","title":"Add dates\u00b6","text":""},{"location":"examples/3-Wiener/3-Wiener_procces/#geometric-brownian-motion","title":"Geometric Brownian Motion\u00b6","text":"<p>You can create a Geometric Brownian Motion in the same way</p>"},{"location":"examples/3-Wiener/3-Wiener_procces/#mean-reversion","title":"Mean Reversion\u00b6","text":"<p>To create the mean reversion  instance privide the mean <code>m</code> and the velocity of reversion eta <code>eta</code>.</p>"},{"location":"examples/4-schedules/4-DCACashFlow/","title":"4 DCACashFlow","text":"In\u00a0[1]: Copied! <pre>import os\nfrom dcapy import dca\nfrom dcapy.models import CashFlow, ChgPts, CashFlowModel, Period, Scenario, CashFlowParams\nfrom dcapy.weiner import Weiner\n\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\nimport seaborn as sns\n</pre> import os from dcapy import dca from dcapy.models import CashFlow, ChgPts, CashFlowModel, Period, Scenario, CashFlowParams from dcapy.weiner import Weiner  import numpy as np  import pandas as pd from datetime import date import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats import seaborn as sns In\u00a0[2]: Copied! <pre>cashflow_params = [\n            {\n                'name':'fix_opex',\n                'value':-5.000,\n                'target':'opex',\n            },\n            {\n                'name':'var_opex',\n                'value':-0.005,\n                'iter':1,\n                'target':'opex',\n                'multiply':'oil_volume'\n            },\n            {\n                'name':'income',\n                'value':Weiner(initial_condition=60,ti='2021-01-01', generator={'dist':'norm','kw':{'loc':0.0,'scale':0.02}}),   #[0.060,0.045,0.02],\n                'iter':5,\n                'target':'income',\n                'multiply':'oil_volume'\n            },\n            {\n                'name':'capex',\n                'value':{'date':['2021-01-01'],'value':[-70000]},\n                'target':'capex'\n            }\n    ]\n\nCashFlowParams(**cashflow_params[2]).get_value(0,steps=10, freq_output='M')\n</pre> cashflow_params = [             {                 'name':'fix_opex',                 'value':-5.000,                 'target':'opex',             },             {                 'name':'var_opex',                 'value':-0.005,                 'iter':1,                 'target':'opex',                 'multiply':'oil_volume'             },             {                 'name':'income',                 'value':Weiner(initial_condition=60,ti='2021-01-01', generator={'dist':'norm','kw':{'loc':0.0,'scale':0.02}}),   #[0.060,0.045,0.02],                 'iter':5,                 'target':'income',                 'multiply':'oil_volume'             },             {                 'name':'capex',                 'value':{'date':['2021-01-01'],'value':[-70000]},                 'target':'capex'             }     ]  CashFlowParams(**cashflow_params[2]).get_value(0,steps=10, freq_output='M') Out[2]: <pre>ChgPts(date=[datetime.date(2021, 1, 1), datetime.date(2021, 2, 1), datetime.date(2021, 3, 1), datetime.date(2021, 4, 1), datetime.date(2021, 5, 1), datetime.date(2021, 6, 1), datetime.date(2021, 7, 1), datetime.date(2021, 8, 1), datetime.date(2021, 9, 1), datetime.date(2021, 10, 1)], value=[60.0, 65.11877280468299, 60.51235734967255, 75.79794054852441, 68.03163126636414, 68.07750716672265, 66.34926773060904, 55.21769546388741, 52.65220345573669, 49.9026003797814])</pre> In\u00a0[3]: Copied! <pre>cashflow_params[2]\n</pre> cashflow_params[2] Out[3]: <pre>{'name': 'income',\n 'value': Weiner(initial_condition=60.0, ti=datetime.date(2021, 1, 1), generator=ProbVar(dist='norm', kw={'loc': 0.0, 'scale': 0.02}, seed=None), freq='D', drift=0),\n 'iter': 5,\n 'target': 'income',\n 'multiply': 'oil_volume'}</pre> In\u00a0[4]: Copied! <pre>p1_dict = {\n    'name':'pdp',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.15,\n        'freq_di':'A',\n        'qi':2500, #{'dist':'norm', 'kw':{'loc':2500,'scale':200}}, #[800,1000],\n        'b':0,\n        'fluid_rate':5000\n    },\n    'start':'2021-01-01',\n    'end':'2030-01-01',\n    'freq_input':'A',\n    'freq_output':'A',\n    'rate_limit': 80,\n    'iter':10,\n    'cashflow_params':cashflow_params\n}\np1 = Period(**p1_dict)\np1\n</pre> p1_dict = {     'name':'pdp',     'dca': {         'ti':'2021-01-01',         'di':0.15,         'freq_di':'A',         'qi':2500, #{'dist':'norm', 'kw':{'loc':2500,'scale':200}}, #[800,1000],         'b':0,         'fluid_rate':5000     },     'start':'2021-01-01',     'end':'2030-01-01',     'freq_input':'A',     'freq_output':'A',     'rate_limit': 80,     'iter':10,     'cashflow_params':cashflow_params } p1 = Period(**p1_dict) p1 Out[4]: <pre>Period(name='pdp', dca=Declination \n Ti: 2021-01-01 \n Qi: 2500.0 bbl/d \n Di: 0.15 A \n b: 0.0, start=datetime.date(2021, 1, 1), end=datetime.date(2030, 1, 1), time_list=None, freq_input='A', freq_output='A', rate_limit=80.0, cum_limit=None, iter=10, ppf=None, cashflow_params=[CashFlowParams(name='fix_opex', const_value=None, wi=1.0, periods=None, value=-5.0, array_values=None, target='opex', multiply=None, agg='sum', depends=False, iter=1), CashFlowParams(name='var_opex', const_value=None, wi=1.0, periods=None, value=-0.005, array_values=None, target='opex', multiply='oil_volume', agg='sum', depends=False, iter=1), CashFlowParams(name='income', const_value=None, wi=1.0, periods=None, value=Weiner(initial_condition=60.0, ti=datetime.date(2021, 1, 1), generator=ProbVar(dist='norm', kw={'loc': 0.0, 'scale': 0.02}, seed=None), freq='D', drift=0), array_values=None, target='income', multiply='oil_volume', agg='sum', depends=False, iter=5), CashFlowParams(name='capex', const_value=None, wi=1.0, periods=None, value=ChgPts(date=[datetime.date(2021, 1, 1)], value=[-70000.0]), array_values=None, target='capex', multiply=None, agg='sum', depends=False, iter=1)], cashflow=None, depends=None, forecast=None)</pre> In\u00a0[5]: Copied! <pre>fore1 = p1.generate_forecast()\nfore1\n</pre> fore1 = p1.generate_forecast() fore1 <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:239: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:63: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:80: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:81: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[5]: oil_rate oil_cum iteration oil_volume fluid_rate water_rate bsw wor water_cum fluid_cum water_volume fluid_volume period date 2021 2500.000000 0.000000e+00 0 847359.810081 5000.0 2500.000000 0.500000 1.000000 0.000000e+00 0.0 1.039604e+06 1825000.0 pdp 2022 2151.769941 8.473598e+05 0 788344.578760 5000.0 2848.230059 0.569646 1.323668 1.039604e+06 1825000.0 1.094304e+06 1825000.0 pdp 2023 1852.045552 1.576689e+06 0 678534.467110 5000.0 3147.954448 0.629591 1.699718 2.188607e+06 3650000.0 1.196084e+06 1825000.0 pdp 2024 1594.070379 2.204429e+06 0 584705.901723 5000.0 3405.929621 0.681186 2.136624 3.431772e+06 5475000.0 1.285604e+06 1827500.0 pdp 2025 1371.465359 2.746101e+06 0 503261.033476 5000.0 3628.534641 0.725707 2.645736 4.759815e+06 7305000.0 1.361093e+06 1827500.0 pdp 2026 1180.431173 3.210951e+06 0 432474.912134 5000.0 3819.568827 0.763914 3.235740 6.153958e+06 9130000.0 1.424150e+06 1825000.0 pdp 2027 1016.006527 3.611051e+06 0 372234.606478 5000.0 3983.993473 0.796799 3.921228 7.608116e+06 10955000.0 1.479985e+06 1825000.0 pdp 2028 874.484922 3.955420e+06 0 320761.555651 5000.0 4125.515078 0.825103 4.717651 9.113929e+06 12780000.0 1.530223e+06 1827500.0 pdp 2029 752.366892 4.252574e+06 0 276082.029480 5000.0 4247.633108 0.849527 5.645694 1.066856e+07 14610000.0 1.571636e+06 1827500.0 pdp 2030 647.568185 4.507584e+06 0 255010.186630 5000.0 4352.431815 0.870486 6.721195 1.225720e+07 16435000.0 1.588638e+06 1825000.0 pdp In\u00a0[6]: Copied! <pre>sns.lineplot(data=fore1,  x=fore1.index.to_timestamp(), y='oil_rate', hue='iteration')\n</pre> sns.lineplot(data=fore1,  x=fore1.index.to_timestamp(), y='oil_rate', hue='iteration') Out[6]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[7]: Copied! <pre>c1 = p1.generate_cashflow()\n</pre> c1 = p1.generate_cashflow() In\u00a0[8]: Copied! <pre>c1[0].fcf()\n</pre> c1[0].fcf() Out[8]: income total_income fix_opex var_opex total_opex capex total_capex fcf cum_fcf 2021 5.084159e+07 5.084159e+07 -5.0 -4236.799050 -4241.799050 -70000.0 -70000.0 5.076735e+07 5.076735e+07 2022 6.854061e+07 6.854061e+07 -5.0 -3941.722894 -3946.722894 0.0 0.0 6.853667e+07 1.193040e+08 2023 3.944636e+07 3.944636e+07 -5.0 -3392.672336 -3397.672336 0.0 0.0 3.944297e+07 1.587470e+08 2024 2.007352e+07 2.007352e+07 -5.0 -2923.529509 -2928.529509 0.0 0.0 2.007059e+07 1.788176e+08 2025 1.521732e+07 1.521732e+07 -5.0 -2516.305167 -2521.305167 0.0 0.0 1.521480e+07 1.940324e+08 2026 7.284083e+06 7.284083e+06 -5.0 -2162.374561 -2167.374561 0.0 0.0 7.281915e+06 2.013143e+08 2027 7.923985e+06 7.923985e+06 -5.0 -1861.173032 -1866.173032 0.0 0.0 7.922119e+06 2.092364e+08 2028 7.540440e+06 7.540440e+06 -5.0 -1603.807778 -1608.807778 0.0 0.0 7.538831e+06 2.167752e+08 2029 7.702069e+06 7.702069e+06 -5.0 -1380.410147 -1385.410147 0.0 0.0 7.700684e+06 2.244759e+08 2030 2.416958e+06 2.416958e+06 -5.0 -1275.050933 -1280.050933 0.0 0.0 2.415677e+06 2.268916e+08 In\u00a0[9]: Copied! <pre>p1.npv([0.0])\n</pre> p1.npv([0.0]) Out[9]: npv iteration 0.0 2.268916e+08 0 0.0 1.297280e+08 1 0.0 2.435373e+08 2 0.0 2.443090e+08 3 0.0 2.548397e+08 4 In\u00a0[10]: Copied! <pre>p1.irr(freq_output='A')\n</pre> p1.irr(freq_output='A') Out[10]: irr 0 NaN 1 NaN 2 NaN 3 NaN 4 NaN In\u00a0[11]: Copied! <pre>len(c1)\n</pre> len(c1) Out[11]: <pre>5</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-schedules/4-DCACashFlow_int/","title":"Add another period","text":"In\u00a0[1]: Copied! <pre>import os\nfrom dcapy import dca\nfrom dcapy.models import CashFlow, ChgPts, CashFlowModel, Period, Scenario\n\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\nimport seaborn as sns\n</pre> import os from dcapy import dca from dcapy.models import CashFlow, ChgPts, CashFlowModel, Period, Scenario  import numpy as np  import pandas as pd from datetime import date import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats import seaborn as sns In\u00a0[2]: Copied! <pre>cashflow_params = [\n            {\n                'name':'fix_opex',\n                'const_value':-5.000,\n                'target':'opex',\n            },\n            {\n                'name':'var_opex',\n                'const_value':-0.005,\n                'target':'opex',\n                'multiply':'oil_volume'\n            },\n            {\n                'name':'income',\n                'const_value':0.045,\n                'target':'income',\n                'multiply':'oil_volume'\n            },\n            {\n                'name':'capex',\n                'array_values':{'date':[1],'value':[-70000]},\n                'target':'capex'\n            }\n    ]\n</pre> cashflow_params = [             {                 'name':'fix_opex',                 'const_value':-5.000,                 'target':'opex',             },             {                 'name':'var_opex',                 'const_value':-0.005,                 'target':'opex',                 'multiply':'oil_volume'             },             {                 'name':'income',                 'const_value':0.045,                 'target':'income',                 'multiply':'oil_volume'             },             {                 'name':'capex',                 'array_values':{'date':[1],'value':[-70000]},                 'target':'capex'             }     ] In\u00a0[3]: Copied! <pre>p1_dict = {\n    'name':'pdp',\n    'dca': {\n        'ti':0,\n        'di':0.15,\n        'freq_di':'A',\n        'qi':[2000,1300],#{'dist':'norm', 'kw':{'loc':2500,'scale':200}}, #[800,1000],\n        'b':0,\n        'fluid_rate':5000\n    },\n    'start':0,\n    'end':20,\n    'freq_input':'A',\n    'freq_output':'A',\n    'rate_limit': 700,\n    'iter':10,\n    'cashflow_params':cashflow_params\n}\np1 = Period(**p1_dict)\np1\n</pre> p1_dict = {     'name':'pdp',     'dca': {         'ti':0,         'di':0.15,         'freq_di':'A',         'qi':[2000,1300],#{'dist':'norm', 'kw':{'loc':2500,'scale':200}}, #[800,1000],         'b':0,         'fluid_rate':5000     },     'start':0,     'end':20,     'freq_input':'A',     'freq_output':'A',     'rate_limit': 700,     'iter':10,     'cashflow_params':cashflow_params } p1 = Period(**p1_dict) p1 Out[3]: <pre>Period(name='pdp', dca=Declination \n Ti: 0 \n Qi: [2000.0, 1300.0] bbl/d \n Di: 0.15 A \n b: 0.0, start=0, end=20, time_list=None, freq_input='A', freq_output='A', rate_limit=700.0, cum_limit=None, iter=10, ppf=None, cashflow_params=[CashFlowParams(name='fix_opex', const_value=-5.0, periods=None, array_values=None, target='opex', multiply=None, agg='sum', wi=1, depends=False), CashFlowParams(name='var_opex', const_value=-0.005, periods=None, array_values=None, target='opex', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='income', const_value=0.045, periods=None, array_values=None, target='income', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='capex', const_value=None, periods=None, array_values=ChgPts(date=[1], value=[-70000.0]), target='capex', multiply=None, agg='sum', wi=1, depends=False)], cashflow=None, depends=None, forecast=None)</pre> In\u00a0[4]: Copied! <pre>dca.arps_forecast([0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,8.,9.],800,0.15,0,[0,2])\n</pre> dca.arps_forecast([0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,8.,9.],800,0.15,0,[0,2]) <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:63: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n</pre> Out[4]: <pre>array([[800.        ,          nan],\n       [688.56638114,          nan],\n       [592.65457655, 800.        ],\n       [510.1025213 , 688.56638114],\n       [439.04930888, 592.65457655],\n       [377.89324219, 510.1025213 ],\n       [325.25572779, 439.04930888],\n       [279.95019929, 377.89324219],\n       [240.95536953, 325.25572779],\n       [207.39220852, 279.95019929]])</pre> In\u00a0[5]: Copied! <pre>fore1 = p1.generate_forecast()\nfore1\n</pre> fore1 = p1.generate_forecast() fore1 <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:239: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:80: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:81: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[5]: oil_rate oil_cum iteration oil_volume fluid_rate water_rate bsw wor water_cum fluid_cum water_volume fluid_volume period date 0 2000.000000 0.000000e+00 0 677887.848065 5000.0 3000.000000 0.600000 1.500000 0.000000e+00 0.0 1.196683e+06 1825000.0 pdp 1 1721.415953 6.778878e+05 0 630675.663008 5000.0 3278.584047 0.655717 1.904586 1.196683e+06 1825000.0 1.240443e+06 1825000.0 pdp 2 1481.636441 1.261351e+06 0 542827.573688 5000.0 3518.363559 0.703673 2.374647 2.480886e+06 3650000.0 1.321867e+06 1825000.0 pdp 3 1275.256303 1.763543e+06 0 467216.022497 5000.0 3724.743697 0.744949 2.920780 3.840417e+06 5475000.0 1.391949e+06 1825000.0 pdp 4 1097.623272 2.195783e+06 0 402136.557277 5000.0 3902.376728 0.780475 3.555297 5.264785e+06 7300000.0 1.452270e+06 1825000.0 pdp 5 944.733105 2.567816e+06 0 346122.142460 5000.0 4055.266895 0.811053 4.292500 6.744957e+06 9125000.0 1.504188e+06 1825000.0 pdp 6 813.139319 2.888028e+06 0 NaN 5000.0 4186.860681 0.837372 5.149008 8.273161e+06 10950000.0 NaN 1825000.0 pdp 0 1300.000000 0.000000e+00 1 440627.101242 5000.0 3700.000000 0.740000 2.846154 0.000000e+00 0.0 1.416594e+06 1825000.0 pdp 1 1118.920369 4.406271e+05 1 409939.180955 5000.0 3881.079631 0.776216 3.468593 1.416594e+06 1825000.0 1.445038e+06 1825000.0 pdp 2 963.063687 8.198784e+05 1 352837.922897 5000.0 4036.936313 0.807387 4.191765 2.890076e+06 3650000.0 1.497964e+06 1825000.0 pdp 3 828.916597 1.146303e+06 1 303690.414623 5000.0 4171.083403 0.834217 5.031970 4.412521e+06 5475000.0 1.543517e+06 1825000.0 pdp 4 713.455127 1.427259e+06 1 NaN 5000.0 4286.544873 0.857309 6.008149 5.977110e+06 7300000.0 NaN 1825000.0 pdp In\u00a0[6]: Copied! <pre>sns.lineplot(data=fore1,  x=fore1.index, y='oil_rate', hue='iteration')\n</pre> sns.lineplot(data=fore1,  x=fore1.index, y='oil_rate', hue='iteration') Out[6]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[7]: Copied! <pre>c1 = p1.generate_cashflow()\n</pre> c1 = p1.generate_cashflow() In\u00a0[8]: Copied! <pre>c1[0].fcf()\n</pre> c1[0].fcf() Out[8]: income total_income fix_opex var_opex total_opex capex total_capex fcf cum_fcf 0.0 30504.953163 30504.953163 -5.0 -3389.439240 -3394.439240 0.0 0.0 27110.513923 27110.513923 1.0 28380.404835 28380.404835 -5.0 -3153.378315 -3158.378315 -70000.0 -70000.0 -44777.973480 -17667.459557 2.0 24427.240816 24427.240816 -5.0 -2714.137868 -2719.137868 0.0 0.0 21708.102948 4040.643390 3.0 21024.721012 21024.721012 -5.0 -2336.080112 -2341.080112 0.0 0.0 18683.640900 22724.284290 4.0 18096.145077 18096.145077 -5.0 -2010.682786 -2015.682786 0.0 0.0 16080.462291 38804.746581 5.0 15575.496411 15575.496411 -5.0 -1730.610712 -1735.610712 0.0 0.0 13839.885698 52644.632280 6.0 0.000000 0.000000 -5.0 0.000000 -5.000000 0.0 0.0 -5.000000 52639.632280 In\u00a0[9]: Copied! <pre>p1.npv([0.10])\n</pre> p1.npv([0.10]) Out[9]: npv iteration 0.1 37954.972078 0 0.1 -10334.501904 1 In\u00a0[10]: Copied! <pre>p1.irr(freq_output='A')\n</pre> p1.irr(freq_output='A') Out[10]: irr 0 -0.999639 1 -0.250092 In\u00a0[11]: Copied! <pre>p1.get_end_dates()\n</pre> p1.get_end_dates() Out[11]: <pre>[6, 4]</pre> In\u00a0[12]: Copied! <pre>p2_dict = {\n    'name':'pdnp',\n    'dca': {\n        'ti':7,\n        'di':0.2,\n        'freq_di':'A',\n        'qi':1000,#{'dist':'norm', 'kw':{'loc':3500,'scale':200}}, #[800,1000],\n        'b':0,\n        'fluid_rate':5000\n    },\n    'start':0,\n    'end':20,\n    'freq_input':'A',\n    'freq_output':'A',\n    'rate_limit': 80,\n    'iter':14,\n    'cashflow_params':cashflow_params,\n    'depends':{'period':'pdp'}\n}\np2 = Period(**p2_dict)\np2\n</pre> p2_dict = {     'name':'pdnp',     'dca': {         'ti':7,         'di':0.2,         'freq_di':'A',         'qi':1000,#{'dist':'norm', 'kw':{'loc':3500,'scale':200}}, #[800,1000],         'b':0,         'fluid_rate':5000     },     'start':0,     'end':20,     'freq_input':'A',     'freq_output':'A',     'rate_limit': 80,     'iter':14,     'cashflow_params':cashflow_params,     'depends':{'period':'pdp'} } p2 = Period(**p2_dict) p2 Out[12]: <pre>Period(name='pdnp', dca=Declination \n Ti: 7 \n Qi: 1000.0 bbl/d \n Di: 0.2 A \n b: 0.0, start=0, end=20, time_list=None, freq_input='A', freq_output='A', rate_limit=80.0, cum_limit=None, iter=14, ppf=None, cashflow_params=[CashFlowParams(name='fix_opex', const_value=-5.0, periods=None, array_values=None, target='opex', multiply=None, agg='sum', wi=1, depends=False), CashFlowParams(name='var_opex', const_value=-0.005, periods=None, array_values=None, target='opex', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='income', const_value=0.045, periods=None, array_values=None, target='income', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='capex', const_value=None, periods=None, array_values=ChgPts(date=[1], value=[-70000.0]), target='capex', multiply=None, agg='sum', wi=1, depends=False)], cashflow=None, depends=Depends(period='pdp', delay=None), forecast=None)</pre> In\u00a0[13]: Copied! <pre>#s1 = Scenario(name='base', periods=[p1,p2])\ns1 = Scenario(**{\n    'name':'base',\n    'periods':[\n        p1_dict,\n        p2_dict\n    ]\n})\ns1\n</pre> #s1 = Scenario(name='base', periods=[p1,p2]) s1 = Scenario(**{     'name':'base',     'periods':[         p1_dict,         p2_dict     ] }) s1 Out[13]: <pre>Scenario(name='base', periods=[Period(name='pdp', dca=Declination \n Ti: 0 \n Qi: [2000.0, 1300.0] bbl/d \n Di: 0.15 A \n b: 0.0, start=0, end=20, time_list=None, freq_input='A', freq_output='A', rate_limit=700.0, cum_limit=None, iter=10, ppf=None, cashflow_params=[CashFlowParams(name='fix_opex', const_value=-5.0, periods=None, array_values=None, target='opex', multiply=None, agg='sum', wi=1, depends=False), CashFlowParams(name='var_opex', const_value=-0.005, periods=None, array_values=None, target='opex', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='income', const_value=0.045, periods=None, array_values=None, target='income', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='capex', const_value=None, periods=None, array_values=ChgPts(date=[1], value=[-70000.0]), target='capex', multiply=None, agg='sum', wi=1, depends=False)], cashflow=None, depends=None, forecast=None), Period(name='pdnp', dca=Declination \n Ti: 7 \n Qi: 1000.0 bbl/d \n Di: 0.2 A \n b: 0.0, start=0, end=20, time_list=None, freq_input='A', freq_output='A', rate_limit=80.0, cum_limit=None, iter=14, ppf=None, cashflow_params=[CashFlowParams(name='fix_opex', const_value=-5.0, periods=None, array_values=None, target='opex', multiply=None, agg='sum', wi=1, depends=False), CashFlowParams(name='var_opex', const_value=-0.005, periods=None, array_values=None, target='opex', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='income', const_value=0.045, periods=None, array_values=None, target='income', multiply='oil_volume', agg='sum', wi=1, depends=False), CashFlowParams(name='capex', const_value=None, periods=None, array_values=ChgPts(date=[1], value=[-70000.0]), target='capex', multiply=None, agg='sum', wi=1, depends=False)], cashflow=None, depends=Depends(period='pdp', delay=None), forecast=None)], cashflow_params=None, cashflow=None, forecast=None)</pre> In\u00a0[14]: Copied! <pre>sf1 = s1.generate_forecast(iter=3)\nsf1\n</pre> sf1 = s1.generate_forecast(iter=3) sf1 <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:239: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:63: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:80: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:81: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:239: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:63: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:115: RuntimeWarning: divide by zero encountered in log\n  return (qi/di)*np.log((di*time_array + 1)/(di*ti+1))\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:115: RuntimeWarning: invalid value encountered in log\n  return (qi/di)*np.log((di*time_array + 1)/(di*ti+1))\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:80: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:81: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[14]: oil_rate oil_cum iteration oil_volume fluid_rate water_rate bsw wor water_cum fluid_cum water_volume fluid_volume period scenario date 0 2000.000000 0.000000e+00 0 677887.848065 5000.0 3000.000000 0.600000 1.500000 0.000000e+00 0.0 1.196683e+06 1825000.0 pdp base 1 1721.415953 6.778878e+05 0 630675.663008 5000.0 3278.584047 0.655717 1.904586 1.196683e+06 1825000.0 1.240443e+06 1825000.0 pdp base 2 1481.636441 1.261351e+06 0 542827.573688 5000.0 3518.363559 0.703673 2.374647 2.480886e+06 3650000.0 1.321867e+06 1825000.0 pdp base 3 1275.256303 1.763543e+06 0 467216.022497 5000.0 3724.743697 0.744949 2.920780 3.840417e+06 5475000.0 1.391949e+06 1825000.0 pdp base 4 1097.623272 2.195783e+06 0 402136.557277 5000.0 3902.376728 0.780475 3.555297 5.264785e+06 7300000.0 1.452270e+06 1825000.0 pdp base 5 944.733105 2.567816e+06 0 346122.142460 5000.0 4055.266895 0.811053 4.292500 6.744957e+06 9125000.0 1.504188e+06 1825000.0 pdp base 6 813.139319 2.888028e+06 0 NaN 5000.0 4186.860681 0.837372 5.149008 8.273161e+06 10950000.0 NaN 1825000.0 pdp base 0 1300.000000 0.000000e+00 1 440627.101242 5000.0 3700.000000 0.740000 2.846154 0.000000e+00 0.0 1.416594e+06 1825000.0 pdp base 1 1118.920369 4.406271e+05 1 409939.180955 5000.0 3881.079631 0.776216 3.468593 1.416594e+06 1825000.0 1.445038e+06 1825000.0 pdp base 2 963.063687 8.198784e+05 1 352837.922897 5000.0 4036.936313 0.807387 4.191765 2.890076e+06 3650000.0 1.497964e+06 1825000.0 pdp base 3 828.916597 1.146303e+06 1 303690.414623 5000.0 4171.083403 0.834217 5.031970 4.412521e+06 5475000.0 1.543517e+06 1825000.0 pdp base 4 713.455127 1.427259e+06 1 NaN 5000.0 4286.544873 0.857309 6.008149 5.977110e+06 7300000.0 NaN 1825000.0 pdp base 6 1000.000000 0.000000e+00 0 367438.204637 5000.0 4000.000000 0.800000 4.000000 1.460000e+06 10950000.0 NaN 1825000.0 pdnp base 7 818.730753 3.308164e+05 0 300832.957992 5000.0 4181.269247 0.836254 5.107014 2.986163e+06 12775000.0 1.553248e+06 1825000.0 pdnp base 8 670.320046 6.016659e+05 0 246301.194248 5000.0 4329.679954 0.865936 6.459123 4.566496e+06 14600000.0 1.602508e+06 1825000.0 pdnp base 9 548.811636 8.234188e+05 0 201654.362251 5000.0 4451.188364 0.890238 8.110594 6.191180e+06 16425000.0 1.642839e+06 1825000.0 pdnp base 10 449.328964 1.004975e+06 0 165100.627867 5000.0 4550.671036 0.910134 10.127705 7.852175e+06 18250000.0 1.675859e+06 1825000.0 pdnp base 11 367.879441 1.153620e+06 0 135172.961387 5000.0 4632.120559 0.926424 12.591409 9.542899e+06 20075000.0 1.702894e+06 1825000.0 pdnp base 12 301.194212 1.275321e+06 0 110670.260472 5000.0 4698.805788 0.939761 15.600585 1.125796e+07 21900000.0 1.725028e+06 1825000.0 pdnp base 13 246.596964 1.374961e+06 0 90609.145700 5000.0 4753.403036 0.950681 19.276000 1.299296e+07 23725000.0 1.743150e+06 1825000.0 pdnp base 14 201.896518 1.456539e+06 0 74184.494095 5000.0 4798.103482 0.959621 23.765162 1.474426e+07 25550000.0 1.757987e+06 1825000.0 pdnp base 15 165.298888 1.523330e+06 0 60737.126717 5000.0 4834.701112 0.966940 29.248237 1.650893e+07 27375000.0 1.770134e+06 1825000.0 pdnp base 16 135.335283 1.578013e+06 0 49727.353497 5000.0 4864.664717 0.972933 35.945280 1.828453e+07 29200000.0 1.780080e+06 1825000.0 pdnp base 17 110.803158 1.622784e+06 0 40713.313577 5000.0 4889.196842 0.977839 44.125067 2.006909e+07 31025000.0 1.788222e+06 1825000.0 pdnp base 18 90.717953 1.659440e+06 0 NaN 5000.0 4909.282047 0.981856 54.115882 2.186098e+07 32850000.0 NaN 1825000.0 pdnp base 4 1000.000000 0.000000e+00 1 367438.204637 5000.0 4000.000000 0.800000 4.000000 1.460000e+06 7300000.0 NaN 1825000.0 pdnp base 5 818.730753 3.308164e+05 1 300832.957992 5000.0 4181.269247 0.836254 5.107014 2.986163e+06 9125000.0 1.553248e+06 1825000.0 pdnp base 6 670.320046 6.016659e+05 1 246301.194248 5000.0 4329.679954 0.865936 6.459123 4.566496e+06 10950000.0 1.602508e+06 1825000.0 pdnp base 7 548.811636 8.234188e+05 1 201654.362251 5000.0 4451.188364 0.890238 8.110594 6.191180e+06 12775000.0 1.642839e+06 1825000.0 pdnp base 8 449.328964 1.004975e+06 1 165100.627867 5000.0 4550.671036 0.910134 10.127705 7.852175e+06 14600000.0 1.675859e+06 1825000.0 pdnp base 9 367.879441 1.153620e+06 1 135172.961387 5000.0 4632.120559 0.926424 12.591409 9.542899e+06 16425000.0 1.702894e+06 1825000.0 pdnp base 10 301.194212 1.275321e+06 1 110670.260472 5000.0 4698.805788 0.939761 15.600585 1.125796e+07 18250000.0 1.725028e+06 1825000.0 pdnp base 11 246.596964 1.374961e+06 1 90609.145700 5000.0 4753.403036 0.950681 19.276000 1.299296e+07 20075000.0 1.743150e+06 1825000.0 pdnp base 12 201.896518 1.456539e+06 1 74184.494095 5000.0 4798.103482 0.959621 23.765162 1.474426e+07 21900000.0 1.757987e+06 1825000.0 pdnp base 13 165.298888 1.523330e+06 1 60737.126717 5000.0 4834.701112 0.966940 29.248237 1.650893e+07 23725000.0 1.770134e+06 1825000.0 pdnp base 14 135.335283 1.578013e+06 1 49727.353497 5000.0 4864.664717 0.972933 35.945280 1.828453e+07 25550000.0 1.780080e+06 1825000.0 pdnp base 15 110.803158 1.622784e+06 1 40713.313577 5000.0 4889.196842 0.977839 44.125067 2.006909e+07 27375000.0 1.788222e+06 1825000.0 pdnp base 16 90.717953 1.659440e+06 1 NaN 5000.0 4909.282047 0.981856 54.115882 2.186098e+07 29200000.0 NaN 1825000.0 pdnp base In\u00a0[15]: Copied! <pre>sns.lineplot(data=sf1, x=sf1.index, y='oil_rate', hue='iteration', style='period')\n</pre> sns.lineplot(data=sf1, x=sf1.index, y='oil_rate', hue='iteration', style='period') Out[15]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[16]: Copied! <pre>s1.forecast.df()\n</pre> s1.forecast.df() Out[16]: oil_rate oil_cum oil_volume gas_rate gas_cum gas_volume fluid_rate water_rate bsw wor water_cum fluid_cum fluid_volume iteration period scenario well date 0 2000.000000 0.000000e+00 677887.848065 None None None 5000.0 3000.000000 0.600000 1.500000 0.000000e+00 0.0 1825000.0 0 pdp base None 1 1721.415953 6.778878e+05 630675.663008 None None None 5000.0 3278.584047 0.655717 1.904586 1.196683e+06 1825000.0 1825000.0 0 pdp base None 2 1481.636441 1.261351e+06 542827.573688 None None None 5000.0 3518.363559 0.703673 2.374647 2.480886e+06 3650000.0 1825000.0 0 pdp base None 3 1275.256303 1.763543e+06 467216.022497 None None None 5000.0 3724.743697 0.744949 2.920780 3.840417e+06 5475000.0 1825000.0 0 pdp base None 4 1097.623272 2.195783e+06 402136.557277 None None None 5000.0 3902.376728 0.780475 3.555297 5.264785e+06 7300000.0 1825000.0 0 pdp base None 5 944.733105 2.567816e+06 346122.142460 None None None 5000.0 4055.266895 0.811053 4.292500 6.744957e+06 9125000.0 1825000.0 0 pdp base None 6 813.139319 2.888028e+06 NaN None None None 5000.0 4186.860681 0.837372 5.149008 8.273161e+06 10950000.0 1825000.0 0 pdp base None 0 1300.000000 0.000000e+00 440627.101242 None None None 5000.0 3700.000000 0.740000 2.846154 0.000000e+00 0.0 1825000.0 1 pdp base None 1 1118.920369 4.406271e+05 409939.180955 None None None 5000.0 3881.079631 0.776216 3.468593 1.416594e+06 1825000.0 1825000.0 1 pdp base None 2 963.063687 8.198784e+05 352837.922897 None None None 5000.0 4036.936313 0.807387 4.191765 2.890076e+06 3650000.0 1825000.0 1 pdp base None 3 828.916597 1.146303e+06 303690.414623 None None None 5000.0 4171.083403 0.834217 5.031970 4.412521e+06 5475000.0 1825000.0 1 pdp base None 4 713.455127 1.427259e+06 NaN None None None 5000.0 4286.544873 0.857309 6.008149 5.977110e+06 7300000.0 1825000.0 1 pdp base None 6 1000.000000 0.000000e+00 367438.204637 None None None 5000.0 4000.000000 0.800000 4.000000 1.460000e+06 10950000.0 1825000.0 0 pdnp base None 7 818.730753 3.308164e+05 300832.957992 None None None 5000.0 4181.269247 0.836254 5.107014 2.986163e+06 12775000.0 1825000.0 0 pdnp base None 8 670.320046 6.016659e+05 246301.194248 None None None 5000.0 4329.679954 0.865936 6.459123 4.566496e+06 14600000.0 1825000.0 0 pdnp base None 9 548.811636 8.234188e+05 201654.362251 None None None 5000.0 4451.188364 0.890238 8.110594 6.191180e+06 16425000.0 1825000.0 0 pdnp base None 10 449.328964 1.004975e+06 165100.627867 None None None 5000.0 4550.671036 0.910134 10.127705 7.852175e+06 18250000.0 1825000.0 0 pdnp base None 11 367.879441 1.153620e+06 135172.961387 None None None 5000.0 4632.120559 0.926424 12.591409 9.542899e+06 20075000.0 1825000.0 0 pdnp base None 12 301.194212 1.275321e+06 110670.260472 None None None 5000.0 4698.805788 0.939761 15.600585 1.125796e+07 21900000.0 1825000.0 0 pdnp base None 13 246.596964 1.374961e+06 90609.145700 None None None 5000.0 4753.403036 0.950681 19.276000 1.299296e+07 23725000.0 1825000.0 0 pdnp base None 14 201.896518 1.456539e+06 74184.494095 None None None 5000.0 4798.103482 0.959621 23.765162 1.474426e+07 25550000.0 1825000.0 0 pdnp base None 15 165.298888 1.523330e+06 60737.126717 None None None 5000.0 4834.701112 0.966940 29.248237 1.650893e+07 27375000.0 1825000.0 0 pdnp base None 16 135.335283 1.578013e+06 49727.353497 None None None 5000.0 4864.664717 0.972933 35.945280 1.828453e+07 29200000.0 1825000.0 0 pdnp base None 17 110.803158 1.622784e+06 40713.313577 None None None 5000.0 4889.196842 0.977839 44.125067 2.006909e+07 31025000.0 1825000.0 0 pdnp base None 18 90.717953 1.659440e+06 NaN None None None 5000.0 4909.282047 0.981856 54.115882 2.186098e+07 32850000.0 1825000.0 0 pdnp base None 4 1000.000000 0.000000e+00 367438.204637 None None None 5000.0 4000.000000 0.800000 4.000000 1.460000e+06 7300000.0 1825000.0 1 pdnp base None 5 818.730753 3.308164e+05 300832.957992 None None None 5000.0 4181.269247 0.836254 5.107014 2.986163e+06 9125000.0 1825000.0 1 pdnp base None 6 670.320046 6.016659e+05 246301.194248 None None None 5000.0 4329.679954 0.865936 6.459123 4.566496e+06 10950000.0 1825000.0 1 pdnp base None 7 548.811636 8.234188e+05 201654.362251 None None None 5000.0 4451.188364 0.890238 8.110594 6.191180e+06 12775000.0 1825000.0 1 pdnp base None 8 449.328964 1.004975e+06 165100.627867 None None None 5000.0 4550.671036 0.910134 10.127705 7.852175e+06 14600000.0 1825000.0 1 pdnp base None 9 367.879441 1.153620e+06 135172.961387 None None None 5000.0 4632.120559 0.926424 12.591409 9.542899e+06 16425000.0 1825000.0 1 pdnp base None 10 301.194212 1.275321e+06 110670.260472 None None None 5000.0 4698.805788 0.939761 15.600585 1.125796e+07 18250000.0 1825000.0 1 pdnp base None 11 246.596964 1.374961e+06 90609.145700 None None None 5000.0 4753.403036 0.950681 19.276000 1.299296e+07 20075000.0 1825000.0 1 pdnp base None 12 201.896518 1.456539e+06 74184.494095 None None None 5000.0 4798.103482 0.959621 23.765162 1.474426e+07 21900000.0 1825000.0 1 pdnp base None 13 165.298888 1.523330e+06 60737.126717 None None None 5000.0 4834.701112 0.966940 29.248237 1.650893e+07 23725000.0 1825000.0 1 pdnp base None 14 135.335283 1.578013e+06 49727.353497 None None None 5000.0 4864.664717 0.972933 35.945280 1.828453e+07 25550000.0 1825000.0 1 pdnp base None 15 110.803158 1.622784e+06 40713.313577 None None None 5000.0 4889.196842 0.977839 44.125067 2.006909e+07 27375000.0 1825000.0 1 pdnp base None 16 90.717953 1.659440e+06 NaN None None None 5000.0 4909.282047 0.981856 54.115882 2.186098e+07 29200000.0 1825000.0 1 pdnp base None"},{"location":"examples/4-schedules/4-DCACashFlow_int/#add-another-period","title":"Add another period\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/","title":"Forecast Scheduling - Period Class","text":"In\u00a0[1]: Copied! <pre>from dcapy import dca\nfrom dcapy.schedule import Period\n\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\nimport seaborn as sns\n</pre> from dcapy import dca from dcapy.schedule import Period  import numpy as np  import pandas as pd from datetime import date import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats import seaborn as sns In\u00a0[2]: Copied! <pre>dec_model = dca.Arps(\n    ti = date(2021,1,1),\n    di = 0.3,\n    freq_di = 'A',\n    qi = [80,100],\n    b = 0,\n    fluid_rate = 250\n)\n\n#Create forecast\nprint(dec_model.forecast(start = date(2021,1,1), end=date(2021,6,1), freq_output='M'))\n</pre> dec_model = dca.Arps(     ti = date(2021,1,1),     di = 0.3,     freq_di = 'A',     qi = [80,100],     b = 0,     fluid_rate = 250 )  #Create forecast print(dec_model.forecast(start = date(2021,1,1), end=date(2021,6,1), freq_output='M')) <pre>           oil_rate       oil_cum  iteration   oil_volume  fluid_rate  \\\ndate                                                                    \n2021-01   80.000000      0.000000          0  2448.672116       250.0   \n2021-02   77.987393   2448.672116          0  2303.691934       250.0   \n2021-03   76.213109   4607.383867          0  2245.736596       250.0   \n2021-04   74.295771   6940.145308          0  2267.189892       250.0   \n2021-05   72.486222   9141.763651          0  2210.152858       250.0   \n2021-06   70.662643  11360.451023          0  2218.687372       250.0   \n2021-01  100.000000      0.000000          1  3060.840145       250.0   \n2021-02   97.484241   3060.840145          1  2879.614917       250.0   \n2021-03   95.266386   5759.229834          1  2807.170745       250.0   \n2021-04   92.869714   8675.181635          1  2833.987365       250.0   \n2021-05   90.607777  11427.204563          1  2762.691072       250.0   \n2021-06   88.328304  14200.563778          1  2773.359215       250.0   \n\n         water_rate       bsw       wor     water_cum  fluid_cum  \\\ndate                                                               \n2021-01  170.000000  0.680000  2.125000      0.000000        0.0   \n2021-02  172.012607  0.688050  2.205646   5332.390824     7750.0   \n2021-03  173.786891  0.695148  2.280276  10198.423768    14750.0   \n2021-04  175.704229  0.702817  2.364929  15645.254867    22500.0   \n2021-05  177.513778  0.710055  2.448931  20970.668217    30000.0   \n2021-06  179.337357  0.717349  2.537937  26530.126285    37750.0   \n2021-01  150.000000  0.600000  1.500000      0.000000        0.0   \n2021-02  152.515759  0.610063  1.564517   4727.988530     7750.0   \n2021-03  154.733614  0.618934  1.624220   9060.529709    14750.0   \n2021-04  157.130286  0.628521  1.691943  13931.568584    22500.0   \n2021-05  159.392223  0.637569  1.759145  18713.335272    30000.0   \n2021-06  161.671696  0.646687  1.830350  23725.157856    37750.0   \n\n         water_volume  fluid_volume  \ndate                                 \n2021-01   5332.390824        7750.0  \n2021-02   5099.211884        7375.0  \n2021-03   5156.432022        7375.0  \n2021-04   5386.122225        7625.0  \n2021-05   5442.435709        7625.0  \n2021-06   5559.458067        7750.0  \n2021-01   4727.988530        7750.0  \n2021-02   4530.264855        7375.0  \n2021-03   4601.790027        7375.0  \n2021-04   4826.402781        7625.0  \n2021-05   4896.794636        7625.0  \n2021-06   5011.822584        7750.0  \n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> In\u00a0[3]: Copied! <pre>p1 = Period(\n    name = 'Period-1',\n    dca = dec_model,\n    start = date(2021,1,1),\n    end = date(2021,6,1),\n    freq_output='M'\n)\n\nprint(type(p1))\n</pre> p1 = Period(     name = 'Period-1',     dca = dec_model,     start = date(2021,1,1),     end = date(2021,6,1),     freq_output='M' )  print(type(p1)) <pre>&lt;class 'dcapy.schedule.schedule.Period'&gt;\n</pre> In\u00a0[4]: Copied! <pre>print(p1.json(exclude_unset=True, indent=2))\n</pre> print(p1.json(exclude_unset=True, indent=2)) <pre>{\n  \"name\": \"Period-1\",\n  \"dca\": {\n    \"qi\": [\n      80.0,\n      100.0\n    ],\n    \"di\": 0.3,\n    \"b\": 0.0,\n    \"ti\": \"2021-01-01\",\n    \"freq_di\": \"A\",\n    \"fluid_rate\": 250.0\n  },\n  \"start\": \"2021-01-01\",\n  \"end\": \"2021-06-01\",\n  \"freq_output\": \"M\"\n}\n</pre> In\u00a0[5]: Copied! <pre>try:\n    p1 = Period(\n        name = 'Period-1',\n        dca = 'string',\n        start = date(2021,1,1),\n        end = date(2021,6,1),\n        freq_output='BM'\n    )\nexcept Exception as e:\n    print(e)\n</pre>  try:     p1 = Period(         name = 'Period-1',         dca = 'string',         start = date(2021,1,1),         end = date(2021,6,1),         freq_output='BM'     ) except Exception as e:     print(e)  <pre>3 validation errors for Period\ndca\n  value is not a valid dict (type=type_error.dict)\ndca\n  value is not a valid dict (type=type_error.dict)\nfreq_output\n  value is not a valid enumeration member; permitted: 'A', 'M', 'D' (type=type_error.enum; enum_values=[&lt;FreqEnum.A: 'A'&gt;, &lt;FreqEnum.M: 'M'&gt;, &lt;FreqEnum.D: 'D'&gt;])\n</pre> <p>The wrong user input trigger the Pydantic validation error indicating the <code>dna</code> is not valid neither does <code>freq output</code></p> <p>Pydantic allows to create instances by passing a dictionary and it will validate even the deeper instances, for example the dca model</p> In\u00a0[6]: Copied! <pre>p1_dict = {\n    'name':'Period-1',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':[80,100],\n        'b':0,\n        'fluid_rate':250\n    },\n    'start':'2021-01-01',\n    'end':'2022-01-01',\n    'freq_output':'M'\n}\n\np1 = Period(**p1_dict)\n\nprint(p1)\n</pre> p1_dict = {     'name':'Period-1',     'dca': {         'ti':'2021-01-01',         'di':0.3,         'freq_di':'A',         'qi':[80,100],         'b':0,         'fluid_rate':250     },     'start':'2021-01-01',     'end':'2022-01-01',     'freq_output':'M' }  p1 = Period(**p1_dict)  print(p1) <pre>name='Period-1' cashflow_params=None cashflow=None forecast=None seed=None iter=1 ppf=None description=None id=None dca=Declination \n Ti: 2021-01-01 \n Qi: [80.0, 100.0] bbl/d \n Di: 0.3 A \n b: 0.0 start=datetime.date(2021, 1, 1) end=datetime.date(2022, 1, 1) time_list=None freq_input='D' freq_output=&lt;FreqEnum.M: 'M'&gt; rate_limit=None cum_limit=None depends=None type=&lt;SchemasEnum.period: 'period'&gt;\n</pre> <p>It automatically validates dates even they are strings, floats and deeper instances like dca.Arps</p> <p>If an input error is made on dca model the validator will also detect where is the mistake.</p> <p>To generate the forecast of the period just call the method <code>generate_forecast</code></p> In\u00a0[7]: Copied! <pre>print(p1.generate_forecast())\n</pre> print(p1.generate_forecast()) <pre>           oil_rate       oil_cum  iteration   oil_volume  fluid_rate  \\\ndate                                                                    \n2021-01   80.000000      0.000000          0  2448.672116       250.0   \n2021-02   77.987393   2448.672116          0  2303.691934       250.0   \n2021-03   76.213109   4607.383867          0  2245.736596       250.0   \n2021-04   74.295771   6940.145308          0  2267.189892       250.0   \n2021-05   72.486222   9141.763651          0  2210.152858       250.0   \n2021-06   70.662643  11360.451023          0  2156.322329       250.0   \n2021-07   68.941582  13454.408309          0  2102.074456       250.0   \n2021-08   67.207178  15564.599934          0  2083.647957       250.0   \n2021-09   65.516407  17621.704223          0  1999.281182       250.0   \n2021-10   63.920689  19563.162298          0  1948.984085       250.0   \n2021-11   62.312598  21519.672393          0  1901.514589       250.0   \n2021-12   60.794911  23366.191475          0  1853.677064       250.0   \n2022-01   59.265458  25227.026520          0  1860.835045       250.0   \n2021-01  100.000000      0.000000          1  3060.840145       250.0   \n2021-02   97.484241   3060.840145          1  2879.614917       250.0   \n2021-03   95.266386   5759.229834          1  2807.170745       250.0   \n2021-04   92.869714   8675.181635          1  2833.987365       250.0   \n2021-05   90.607777  11427.204563          1  2762.691072       250.0   \n2021-06   88.328304  14200.563778          1  2695.402911       250.0   \n2021-07   86.176978  16818.010386          1  2627.593070       250.0   \n2021-08   84.008973  19455.749917          1  2604.559946       250.0   \n2021-09   81.895509  22027.130278          1  2499.101477       250.0   \n2021-10   79.900861  24453.952872          1  2436.230106       250.0   \n2021-11   77.890748  26899.590491          1  2376.893236       250.0   \n2021-12   75.993639  29207.739344          1  2317.096330       250.0   \n2022-01   74.081822  31533.783150          1  2326.043807       250.0   \n\n         water_rate       bsw       wor     water_cum  fluid_cum  \\\ndate                                                               \n2021-01  170.000000  0.680000  2.125000      0.000000        0.0   \n2021-02  172.012607  0.688050  2.205646   5332.390824     7750.0   \n2021-03  173.786891  0.695148  2.280276  10198.423768    14750.0   \n2021-04  175.704229  0.702817  2.364929  15645.254867    22500.0   \n2021-05  177.513778  0.710055  2.448931  20970.668217    30000.0   \n2021-06  179.337357  0.717349  2.537937  26530.126285    37750.0   \n2021-07  181.058418  0.724234  2.626259  31961.878818    45250.0   \n2021-08  182.792822  0.731171  2.719841  37628.456296    53000.0   \n2021-09  184.483593  0.737934  2.815838  43347.447664    60750.0   \n2021-10  186.079311  0.744317  2.911097  48929.827008    68250.0   \n2021-11  187.687402  0.750750  3.012030  54748.136469    76000.0   \n2021-12  189.205089  0.756820  3.112186  60424.289136    83500.0   \n2022-01  190.734542  0.762938  3.218309  66337.059948    91250.0   \n2021-01  150.000000  0.600000  1.500000      0.000000        0.0   \n2021-02  152.515759  0.610063  1.564517   4727.988530     7750.0   \n2021-03  154.733614  0.618934  1.624220   9060.529709    14750.0   \n2021-04  157.130286  0.628521  1.691943  13931.568584    22500.0   \n2021-05  159.392223  0.637569  1.759145  18713.335272    30000.0   \n2021-06  161.671696  0.646687  1.830350  23725.157856    37750.0   \n2021-07  163.823022  0.655292  1.901007  28639.848523    45250.0   \n2021-08  165.991027  0.663964  1.975873  33785.570370    53000.0   \n2021-09  168.104491  0.672418  2.052670  38996.809580    60750.0   \n2021-10  170.099139  0.680397  2.128877  44099.783760    68250.0   \n2021-11  172.109252  0.688437  2.209624  49435.170587    76000.0   \n2021-12  174.006361  0.696025  2.289749  54655.361420    83500.0   \n2022-01  175.918178  0.703673  2.374647  60108.824936    91250.0   \n\n         water_volume  fluid_volume    period  \ndate                                           \n2021-01   5332.390824        7750.0  Period-1  \n2021-02   5099.211884        7375.0  Period-1  \n2021-03   5156.432022        7375.0  Period-1  \n2021-04   5386.122225        7625.0  Period-1  \n2021-05   5442.435709        7625.0  Period-1  \n2021-06   5495.605300        7625.0  Period-1  \n2021-07   5549.165006        7625.0  Period-1  \n2021-08   5692.784423        7750.0  Period-1  \n2021-09   5650.685356        7625.0  Period-1  \n2021-10   5700.344403        7625.0  Period-1  \n2021-11   5747.231064        7625.0  Period-1  \n2021-12   5794.461740        7625.0  Period-1  \n2022-01   5912.770813        7750.0  Period-1  \n2021-01   4727.988530        7750.0  Period-1  \n2021-02   4530.264855        7375.0  Period-1  \n2021-03   4601.790027        7375.0  Period-1  \n2021-04   4826.402781        7625.0  Period-1  \n2021-05   4896.794636        7625.0  Period-1  \n2021-06   4963.256626        7625.0  Period-1  \n2021-07   5030.206257        7625.0  Period-1  \n2021-08   5178.480529        7750.0  Period-1  \n2021-09   5157.106695        7625.0  Period-1  \n2021-10   5219.180503        7625.0  Period-1  \n2021-11   5277.788830        7625.0  Period-1  \n2021-12   5336.827175        7625.0  Period-1  \n2022-01   5453.463516        7750.0  Period-1  \n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> In\u00a0[8]: Copied! <pre>p1_dict = {\n    'name':'Period-1',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':[80,100],\n        'b':0,\n        'fluid_rate':250\n    },\n    'start':'2021-01-01',\n    'end':'2022-01-01',\n    'freq_output':'M',\n    'rate_limit': 70\n}\n\np1 = Period(**p1_dict)\n\nprint(p1.generate_forecast())\n</pre> p1_dict = {     'name':'Period-1',     'dca': {         'ti':'2021-01-01',         'di':0.3,         'freq_di':'A',         'qi':[80,100],         'b':0,         'fluid_rate':250     },     'start':'2021-01-01',     'end':'2022-01-01',     'freq_output':'M',     'rate_limit': 70 }  p1 = Period(**p1_dict)  print(p1.generate_forecast()) <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> <pre>           oil_rate       oil_cum  iteration   oil_volume  fluid_rate  \\\ndate                                                                    \n2021-01   80.000000      0.000000          0  2448.672116       250.0   \n2021-02   77.987393   2448.672116          0  2303.691934       250.0   \n2021-03   76.213109   4607.383867          0  2245.736596       250.0   \n2021-04   74.295771   6940.145308          0  2267.189892       250.0   \n2021-05   72.486222   9141.763651          0  2210.152858       250.0   \n2021-06   70.662643  11360.451023          0 -4570.881825       250.0   \n2021-01  100.000000      0.000000          1  3060.840145       250.0   \n2021-02   97.484241   3060.840145          1  2879.614917       250.0   \n2021-03   95.266386   5759.229834          1  2807.170745       250.0   \n2021-04   92.869714   8675.181635          1  2833.987365       250.0   \n2021-05   90.607777  11427.204563          1  2762.691072       250.0   \n2021-06   88.328304  14200.563778          1  2695.402911       250.0   \n2021-07   86.176978  16818.010386          1  2627.593070       250.0   \n2021-08   84.008973  19455.749917          1  2604.559946       250.0   \n2021-09   81.895509  22027.130278          1  2499.101477       250.0   \n2021-10   79.900861  24453.952872          1  2436.230106       250.0   \n2021-11   77.890748  26899.590491          1  2376.893236       250.0   \n2021-12   75.993639  29207.739344          1  2317.096330       250.0   \n2022-01   74.081822  31533.783150          1  2326.043807       250.0   \n\n         water_rate       bsw       wor     water_cum  fluid_cum  \\\ndate                                                               \n2021-01  170.000000  0.680000  2.125000      0.000000        0.0   \n2021-02  172.012607  0.688050  2.205646   5332.390824     7750.0   \n2021-03  173.786891  0.695148  2.280276  10198.423768    14750.0   \n2021-04  175.704229  0.702817  2.364929  15645.254867    22500.0   \n2021-05  177.513778  0.710055  2.448931  20970.668217    30000.0   \n2021-06  179.337357  0.717349  2.537937  26530.126285    37750.0   \n2021-01  150.000000  0.600000  1.500000      0.000000        0.0   \n2021-02  152.515759  0.610063  1.564517   4727.988530     7750.0   \n2021-03  154.733614  0.618934  1.624220   9060.529709    14750.0   \n2021-04  157.130286  0.628521  1.691943  13931.568584    22500.0   \n2021-05  159.392223  0.637569  1.759145  18713.335272    30000.0   \n2021-06  161.671696  0.646687  1.830350  23725.157856    37750.0   \n2021-07  163.823022  0.655292  1.901007  28639.848523    45250.0   \n2021-08  165.991027  0.663964  1.975873  33785.570370    53000.0   \n2021-09  168.104491  0.672418  2.052670  38996.809580    60750.0   \n2021-10  170.099139  0.680397  2.128877  44099.783760    68250.0   \n2021-11  172.109252  0.688437  2.209624  49435.170587    76000.0   \n2021-12  174.006361  0.696025  2.289749  54655.361420    83500.0   \n2022-01  175.918178  0.703673  2.374647  60108.824936    91250.0   \n\n         water_volume  fluid_volume    period  \ndate                                           \n2021-01   5332.390824        7750.0  Period-1  \n2021-02   5099.211884        7375.0  Period-1  \n2021-03   5156.432022        7375.0  Period-1  \n2021-04   5386.122225        7625.0  Period-1  \n2021-05   5442.435709        7625.0  Period-1  \n2021-06           NaN        7625.0  Period-1  \n2021-01   4727.988530        7750.0  Period-1  \n2021-02   4530.264855        7375.0  Period-1  \n2021-03   4601.790027        7375.0  Period-1  \n2021-04   4826.402781        7625.0  Period-1  \n2021-05   4896.794636        7625.0  Period-1  \n2021-06   4963.256626        7625.0  Period-1  \n2021-07   5030.206257        7625.0  Period-1  \n2021-08   5178.480529        7750.0  Period-1  \n2021-09   5157.106695        7625.0  Period-1  \n2021-10   5219.180503        7625.0  Period-1  \n2021-11   5277.788830        7625.0  Period-1  \n2021-12   5336.827175        7625.0  Period-1  \n2022-01   5453.463516        7750.0  Period-1  \n</pre> In\u00a0[9]: Copied! <pre>### Probabilistic Variables\n</pre> ### Probabilistic Variables  In\u00a0[10]: Copied! <pre>p1_dict = {\n    'name':'Period-1',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':{'dist':'norm','kw':{'loc':90, 'scale':10}},\n        'b':0,\n        'fluid_rate':250\n    },\n    'start':'2021-01-01',\n    'end':'2022-01-01',\n    'freq_output':'M',\n    'rate_limit': 70,\n    'iter':20\n}\n\np1 = Period(**p1_dict)\n\nprob_forecast = p1.generate_forecast()\n\nfig, ax = plt.subplots(2,1, figsize=(7,10))\nsns.lineplot(data=prob_forecast, x = prob_forecast.index.to_timestamp(), y='oil_rate', ax=ax[0])\nsns.lineplot(data=prob_forecast, x = prob_forecast.index.to_timestamp(), y='oil_rate',hue='iteration', ax=ax[1])\n</pre> p1_dict = {     'name':'Period-1',     'dca': {         'ti':'2021-01-01',         'di':0.3,         'freq_di':'A',         'qi':{'dist':'norm','kw':{'loc':90, 'scale':10}},         'b':0,         'fluid_rate':250     },     'start':'2021-01-01',     'end':'2022-01-01',     'freq_output':'M',     'rate_limit': 70,     'iter':20 }  p1 = Period(**p1_dict)  prob_forecast = p1.generate_forecast()  fig, ax = plt.subplots(2,1, figsize=(7,10)) sns.lineplot(data=prob_forecast, x = prob_forecast.index.to_timestamp(), y='oil_rate', ax=ax[0]) sns.lineplot(data=prob_forecast, x = prob_forecast.index.to_timestamp(), y='oil_rate',hue='iteration', ax=ax[1]) <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[10]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[11]: Copied! <pre>p1cash_dict = {\n    'name':'Period-1',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':800,\n        'b':0,\n        'fluid_rate':250\n    },\n    'start':'2021-01-01',\n    'end':'2022-01-01',\n    'freq_output':'M',\n    'rate_limit': 70,\n\n    #Cashflow params keyword. It accept a list\n    'cashflow_params':[\n            {\n                'name':'fix_opex',\n                'value':-5000,       #Fix opex of U$ 5000 monthly\n                'target':'opex',     #The cashflow generated is going to be an Opex in the cashflow model\n                'freq_value':'M'     #The frequency of the value is in Months\n            },\n            {\n                'name':'var_opex',\n                'value':-12,    #Variable Opex 12 USD/bbl of oil\n                'target':'opex', #The cashflow generated is going to be an Opex in the cashflow model\n                'multiply':'oil_volume'  #Multiply the 12 USD/bbl by the oil_volume Column which is the monthly cumulative oil\n            },\n            {\n                'name':'income',\n                'value':60,             #Oil price 60 usd/bbl\n                'target':'income',      #The cashflow generated is going to be an Income in the cashflow model\n                'multiply':'oil_volume',  # Multiply the 60 USD/bbl by the oil_volume column\n                'wi':0.9, #working Interest. In this case represent 10% royalties \n            },\n            {\n                'name':'capex_drill',\n                'value':-3000000,             # 3 Million dollar of capex\n                'target':'capex',      #The cashflow generated is going to be aCapex in the cashflow model\n                'periods':1,  # repeat the value only one period\n            }\n        ]\n\n}\n\np1_cash = Period(**p1cash_dict)\n</pre> p1cash_dict = {     'name':'Period-1',     'dca': {         'ti':'2021-01-01',         'di':0.3,         'freq_di':'A',         'qi':800,         'b':0,         'fluid_rate':250     },     'start':'2021-01-01',     'end':'2022-01-01',     'freq_output':'M',     'rate_limit': 70,      #Cashflow params keyword. It accept a list     'cashflow_params':[             {                 'name':'fix_opex',                 'value':-5000,       #Fix opex of U$ 5000 monthly                 'target':'opex',     #The cashflow generated is going to be an Opex in the cashflow model                 'freq_value':'M'     #The frequency of the value is in Months             },             {                 'name':'var_opex',                 'value':-12,    #Variable Opex 12 USD/bbl of oil                 'target':'opex', #The cashflow generated is going to be an Opex in the cashflow model                 'multiply':'oil_volume'  #Multiply the 12 USD/bbl by the oil_volume Column which is the monthly cumulative oil             },             {                 'name':'income',                 'value':60,             #Oil price 60 usd/bbl                 'target':'income',      #The cashflow generated is going to be an Income in the cashflow model                 'multiply':'oil_volume',  # Multiply the 60 USD/bbl by the oil_volume column                 'wi':0.9, #working Interest. In this case represent 10% royalties              },             {                 'name':'capex_drill',                 'value':-3000000,             # 3 Million dollar of capex                 'target':'capex',      #The cashflow generated is going to be aCapex in the cashflow model                 'periods':1,  # repeat the value only one period             }         ]  }  p1_cash = Period(**p1cash_dict) In\u00a0[12]: Copied! <pre>forecast = p1_cash.generate_forecast()\nprint(forecast)\n</pre> forecast = p1_cash.generate_forecast() print(forecast) <pre>           oil_rate        oil_cum  iteration    oil_volume  fluid_rate  \\\ndate                                                                      \n2021-01  800.000000       0.000000          0  24486.721159       250.0   \n2021-02  779.873928   24486.721159          0  23036.919336       250.0   \n2021-03  762.131092   46073.838672          0  22457.365959       250.0   \n2021-04  742.957710   69401.453077          0  22671.898918       250.0   \n2021-05  724.862217   91417.636508          0  22101.528575       250.0   \n2021-06  706.626430  113604.510228          0  21563.223292       250.0   \n2021-07  689.415822  134544.083091          0  21020.744556       250.0   \n2021-08  672.071781  155645.999340          0  20836.479567       250.0   \n2021-09  655.164075  176217.042226          0  19992.811818       250.0   \n2021-10  639.206885  195631.622975          0  19489.840850       250.0   \n2021-11  623.125980  215196.723927          0  19015.145887       250.0   \n2021-12  607.949111  233661.914748          0  18536.770638       250.0   \n2022-01  592.654577  252270.265203          0  18608.350455       250.0   \n\n         water_rate       bsw       wor      water_cum  fluid_cum  \\\ndate                                                                \n2021-01 -550.000000 -2.200000 -0.687500      -0.000000        0.0   \n2021-02 -529.873928 -2.119496 -0.679435  -16426.091762     7750.0   \n2021-03 -512.131092 -2.048524 -0.671972  -30765.762324    14750.0   \n2021-04 -492.957710 -1.971831 -0.663507  -46047.451328    22500.0   \n2021-05 -474.862217 -1.899449 -0.655107  -60293.317825    30000.0   \n2021-06 -456.626430 -1.826506 -0.646206  -74448.737154    37750.0   \n2021-07 -439.415822 -1.757663 -0.637374  -87631.211817    45250.0   \n2021-08 -422.071781 -1.688287 -0.628016 -100715.437039    53000.0   \n2021-09 -405.164075 -1.620656 -0.618416 -113275.523361    60750.0   \n2021-10 -389.206885 -1.556828 -0.608890 -124951.729918    68250.0   \n2021-11 -373.125980 -1.492504 -0.598797 -136518.635308    76000.0   \n2021-12 -357.949111 -1.431796 -0.588781 -147257.108643    83500.0   \n2022-01 -342.654577 -1.370618 -0.578169 -157879.400516    91250.0   \n\n         water_volume  fluid_volume    period  \ndate                                           \n2021-01 -16426.091762        7750.0  Period-1  \n2021-02 -15382.881162        7375.0  Period-1  \n2021-03 -14810.679783        7375.0  Period-1  \n2021-04 -14763.777750        7625.0  Period-1  \n2021-05 -14200.642913        7625.0  Period-1  \n2021-06 -13668.946996        7625.0  Period-1  \n2021-07 -13133.349943        7625.0  Period-1  \n2021-08 -12822.155772        7750.0  Period-1  \n2021-09 -12118.146439        7625.0  Period-1  \n2021-10 -11621.555974        7625.0  Period-1  \n2021-11 -11152.689363        7625.0  Period-1  \n2021-12 -10680.382604        7625.0  Period-1  \n2022-01 -10622.291873        7750.0  Period-1  \n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> In\u00a0[13]: Copied! <pre>cf_model = p1_cash.generate_cashflow()\n\nfor i in cf_model:\n    print(type(i))\n</pre> cf_model = p1_cash.generate_cashflow()  for i in cf_model:     print(type(i)) <pre>&lt;class 'dcapy.cashflow.cashflow.CashFlowModel'&gt;\n</pre> In\u00a0[14]: Copied! <pre>print(cf_model[0].fcf())\n</pre> print(cf_model[0].fcf()) <pre>         income_Period-1  total_income  fix_opex_Period-1  var_opex_Period-1  \\\n2021-01     1.322283e+06  1.322283e+06            -5000.0     -293840.653906   \n2021-02     1.243994e+06  1.243994e+06            -5000.0     -276443.032030   \n2021-03     1.212698e+06  1.212698e+06            -5000.0     -269488.391508   \n2021-04     1.224283e+06  1.224283e+06            -5000.0     -272062.787018   \n2021-05     1.193483e+06  1.193483e+06            -5000.0     -265218.342905   \n2021-06     1.164414e+06  1.164414e+06            -5000.0     -258758.679501   \n2021-07     1.135120e+06  1.135120e+06            -5000.0     -252248.934673   \n2021-08     1.125170e+06  1.125170e+06            -5000.0     -250037.754807   \n2021-09     1.079612e+06  1.079612e+06            -5000.0     -239913.741813   \n2021-10     1.052451e+06  1.052451e+06            -5000.0     -233878.090205   \n2021-11     1.026818e+06  1.026818e+06            -5000.0     -228181.750639   \n2021-12     1.000986e+06  1.000986e+06            -5000.0     -222441.247658   \n2022-01     1.004851e+06  1.004851e+06            -5000.0     -223300.205458   \n\n            total_opex  capex_drill_Period-1  total_capex           fcf  \\\n2021-01 -298840.653906            -3000000.0   -3000000.0 -1.976558e+06   \n2021-02 -281443.032030                   0.0          0.0  9.625506e+05   \n2021-03 -274488.391508                   0.0          0.0  9.382094e+05   \n2021-04 -277062.787018                   0.0          0.0  9.472198e+05   \n2021-05 -270218.342905                   0.0          0.0  9.232642e+05   \n2021-06 -263758.679501                   0.0          0.0  9.006554e+05   \n2021-07 -257248.934673                   0.0          0.0  8.778713e+05   \n2021-08 -255037.754807                   0.0          0.0  8.701321e+05   \n2021-09 -244913.741813                   0.0          0.0  8.346981e+05   \n2021-10 -238878.090205                   0.0          0.0  8.135733e+05   \n2021-11 -233181.750639                   0.0          0.0  7.936361e+05   \n2021-12 -227441.247658                   0.0          0.0  7.735444e+05   \n2022-01 -228300.205458                   0.0          0.0  7.765507e+05   \n\n              cum_fcf  \n2021-01 -1.976558e+06  \n2021-02 -1.014007e+06  \n2021-03 -7.579773e+04  \n2021-04  8.714220e+05  \n2021-05  1.794686e+06  \n2021-06  2.695342e+06  \n2021-07  3.573213e+06  \n2021-08  4.443345e+06  \n2021-09  5.278043e+06  \n2021-10  6.091616e+06  \n2021-11  6.885253e+06  \n2021-12  7.658797e+06  \n2022-01  8.435348e+06  \n</pre> In\u00a0[15]: Copied! <pre>fig, ax= plt.subplots(figsize=(15,7))\n\ncf_model[0].plot(cum=True, ax=ax)\n</pre> fig, ax= plt.subplots(figsize=(15,7))  cf_model[0].plot(cum=True, ax=ax) <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> In\u00a0[16]: Copied! <pre>## Estimate the NPV and IRR\n</pre> ## Estimate the NPV and IRR In\u00a0[17]: Copied! <pre>p1_cash.npv([0.1,0.15], freq_rate='A', freq_cashflow='M')\n</pre> p1_cash.npv([0.1,0.15], freq_rate='A', freq_cashflow='M') Out[17]: npv iteration 0.007974 7.935376e+06 0 0.011715 7.712939e+06 0 In\u00a0[18]: Copied! <pre>p1_cash.irr()\n</pre> p1_cash.irr() Out[18]: irr 0 0.466046 In\u00a0[19]: Copied! <pre>p2cash_dict = {\n    'name':'Period-1',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':[800,700,500],\n        'b':[0,0.5,1],\n        'fluid_rate':250\n    },\n    'start':'2021-01-01',\n    'end':'2022-01-01',\n    'freq_output':'M',\n    'rate_limit': 70,\n\n    #Cashflow params keyword. It accept a list\n    'cashflow_params':[\n            {\n                'name':'fix_opex',\n                'value':-5000,       #Fix opex of U$ 5000 monthly\n                'target':'opex',     #The cashflow generated is going to be an Opex in the cashflow model\n                'freq_value':'M'     #The frequency of the value is in Months\n            },\n            {\n                'name':'var_opex',\n                'value':-12,    #Variable Opex 12 USD/bbl of oil\n                'target':'opex', #The cashflow generated is going to be an Opex in the cashflow model\n                'multiply':'oil_volume'  #Multiply the 12 USD/bbl by the oil_volume Column which is the monthly cumulative oil\n            },\n            {\n                'name':'income',\n                'value':60,             #Oil price 60 usd/bbl\n                'target':'income',      #The cashflow generated is going to be an Income in the cashflow model\n                'multiply':'oil_volume',  # Multiply the 60 USD/bbl by the oil_volume column\n                'wi':0.9, #working Interest. In this case represent 10% royalties \n            },\n            {\n                'name':'capex_drill',\n                'value':-3000000,             # 3 Million dollar of capex\n                'target':'capex',      #The cashflow generated is going to be aCapex in the cashflow model\n                'periods':1,  # repeat the value only one period\n            }\n        ]\n\n}\n\np2_cash = Period(**p2cash_dict)\n\np2_forecast = p2_cash.generate_forecast()\np2_cashflow = p2_cash.generate_cashflow()\n</pre> p2cash_dict = {     'name':'Period-1',     'dca': {         'ti':'2021-01-01',         'di':0.3,         'freq_di':'A',         'qi':[800,700,500],         'b':[0,0.5,1],         'fluid_rate':250     },     'start':'2021-01-01',     'end':'2022-01-01',     'freq_output':'M',     'rate_limit': 70,      #Cashflow params keyword. It accept a list     'cashflow_params':[             {                 'name':'fix_opex',                 'value':-5000,       #Fix opex of U$ 5000 monthly                 'target':'opex',     #The cashflow generated is going to be an Opex in the cashflow model                 'freq_value':'M'     #The frequency of the value is in Months             },             {                 'name':'var_opex',                 'value':-12,    #Variable Opex 12 USD/bbl of oil                 'target':'opex', #The cashflow generated is going to be an Opex in the cashflow model                 'multiply':'oil_volume'  #Multiply the 12 USD/bbl by the oil_volume Column which is the monthly cumulative oil             },             {                 'name':'income',                 'value':60,             #Oil price 60 usd/bbl                 'target':'income',      #The cashflow generated is going to be an Income in the cashflow model                 'multiply':'oil_volume',  # Multiply the 60 USD/bbl by the oil_volume column                 'wi':0.9, #working Interest. In this case represent 10% royalties              },             {                 'name':'capex_drill',                 'value':-3000000,             # 3 Million dollar of capex                 'target':'capex',      #The cashflow generated is going to be aCapex in the cashflow model                 'periods':1,  # repeat the value only one period             }         ]  }  p2_cash = Period(**p2cash_dict)  p2_forecast = p2_cash.generate_forecast() p2_cashflow = p2_cash.generate_cashflow()   <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:84: RuntimeWarning: divide by zero encountered in true_divide\n  f = qi/(di*(b-1))\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n</pre> In\u00a0[20]: Copied! <pre>n_cashflows = len(p2_cashflow)\n\nfig, ax= plt.subplots(n_cashflows,2,figsize=(15,7))\n\nfor i in range(n_cashflows):\n    forecast_iteration = p2_forecast[p2_forecast['iteration']==i] \n    sns.lineplot(data =forecast_iteration, x=forecast_iteration.index.to_timestamp(), y='oil_rate', ax=ax[i,0])\n    p2_cashflow[i].plot(cum=True, ax=ax[i,1])\n</pre> n_cashflows = len(p2_cashflow)  fig, ax= plt.subplots(n_cashflows,2,figsize=(15,7))  for i in range(n_cashflows):     forecast_iteration = p2_forecast[p2_forecast['iteration']==i]      sns.lineplot(data =forecast_iteration, x=forecast_iteration.index.to_timestamp(), y='oil_rate', ax=ax[i,0])     p2_cashflow[i].plot(cum=True, ax=ax[i,1]) <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> In\u00a0[21]: Copied! <pre>p2_cash.npv([0.1,0.17], freq_rate='A', freq_cashflow='M')\n</pre> p2_cash.npv([0.1,0.17], freq_rate='A', freq_cashflow='M') Out[21]: npv iteration 0.007974 7.935376e+06 0 0.013170 7.628429e+06 0 0.007974 6.622938e+06 1 0.013170 6.351756e+06 1 0.007974 3.895086e+06 2 0.013170 3.700136e+06 2 In\u00a0[22]: Copied! <pre>p3cash_dict = {\n    'name':'Period-1',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':700,\n        'b':0,\n        'fluid_rate':250\n    },\n    'start':'2021-01-01',\n    'end':'2022-01-01',\n    'freq_output':'M',\n    'rate_limit': 70,\n\n    #Cashflow params keyword. It accept a list\n    'cashflow_params':[\n            {\n                'name':'fix_opex',\n                'value':-5000,       #Fix opex of U$ 5000 monthly\n                'target':'opex',     #The cashflow generated is going to be an Opex in the cashflow model\n                'freq_value':'M'     #The frequency of the value is in Months\n            },\n            {\n                'name':'var_opex',\n                'value':-12,    #Variable Opex 12 USD/bbl of oil\n                'target':'opex', #The cashflow generated is going to be an Opex in the cashflow model\n                'multiply':'oil_volume'  #Multiply the 12 USD/bbl by the oil_volume Column which is the monthly cumulative oil\n            },\n            {\n                'name':'income',\n                'value':[20,30,40,60,80],             #Oil price 60 usd/bbl\n                'target':'income',      #The cashflow generated is going to be an Income in the cashflow model\n                'multiply':'oil_volume',  # Multiply the 60 USD/bbl by the oil_volume column\n                'wi':0.9, #working Interest. In this case represent 10% royalties \n            },\n            {\n                'name':'capex_drill',\n                'value':-3000000,             # 3 Million dollar of capex\n                'target':'capex',      #The cashflow generated is going to be aCapex in the cashflow model\n                'periods':1,  # repeat the value only one period\n            }\n        ]\n\n}\np3_cash = Period(**p3cash_dict)\n\np3_forecast = p3_cash.generate_forecast()\np3_cashflow = p3_cash.generate_cashflow()\n</pre> p3cash_dict = {     'name':'Period-1',     'dca': {         'ti':'2021-01-01',         'di':0.3,         'freq_di':'A',         'qi':700,         'b':0,         'fluid_rate':250     },     'start':'2021-01-01',     'end':'2022-01-01',     'freq_output':'M',     'rate_limit': 70,      #Cashflow params keyword. It accept a list     'cashflow_params':[             {                 'name':'fix_opex',                 'value':-5000,       #Fix opex of U$ 5000 monthly                 'target':'opex',     #The cashflow generated is going to be an Opex in the cashflow model                 'freq_value':'M'     #The frequency of the value is in Months             },             {                 'name':'var_opex',                 'value':-12,    #Variable Opex 12 USD/bbl of oil                 'target':'opex', #The cashflow generated is going to be an Opex in the cashflow model                 'multiply':'oil_volume'  #Multiply the 12 USD/bbl by the oil_volume Column which is the monthly cumulative oil             },             {                 'name':'income',                 'value':[20,30,40,60,80],             #Oil price 60 usd/bbl                 'target':'income',      #The cashflow generated is going to be an Income in the cashflow model                 'multiply':'oil_volume',  # Multiply the 60 USD/bbl by the oil_volume column                 'wi':0.9, #working Interest. In this case represent 10% royalties              },             {                 'name':'capex_drill',                 'value':-3000000,             # 3 Million dollar of capex                 'target':'capex',      #The cashflow generated is going to be aCapex in the cashflow model                 'periods':1,  # repeat the value only one period             }         ]  } p3_cash = Period(**p3cash_dict)  p3_forecast = p3_cash.generate_forecast() p3_cashflow = p3_cash.generate_cashflow() <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> In\u00a0[23]: Copied! <pre>n_cashflows = len(p3_cashflow)\n\nfig, ax= plt.subplots(n_cashflows,1,figsize=(15,15), gridspec_kw={'hspace':0.4})\n\nfor i in range(n_cashflows):\n    p3_cashflow[i].plot(cum=True, ax=ax[i])\n</pre> n_cashflows = len(p3_cashflow)  fig, ax= plt.subplots(n_cashflows,1,figsize=(15,15), gridspec_kw={'hspace':0.4})  for i in range(n_cashflows):     p3_cashflow[i].plot(cum=True, ax=ax[i]) <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <p>Here, the same forecast was used to create five different cashflow models according with the iterations defined on the Oil price</p> In\u00a0[24]: Copied! <pre>p3_cash.npv([0.1], freq_rate='A', freq_cashflow='M')\n</pre> p3_cash.npv([0.1], freq_rate='A', freq_cashflow='M') Out[24]: npv iteration 0.007974 -1.687330e+06 0 0.007974 3.746782e+05 1 0.007974 2.436687e+06 2 0.007974 6.560703e+06 3 0.007974 1.068472e+07 4 In\u00a0[25]: Copied! <pre>print(p3_cash.dict(exclude={'forecast','cashflow'}, exclude_unset=True))\n</pre> print(p3_cash.dict(exclude={'forecast','cashflow'}, exclude_unset=True)) <pre>{'name': 'Period-1', 'cashflow_params': [{'name': 'fix_opex', 'value': -5000.0, 'target': &lt;TargetEnum.opex: 'opex'&gt;, 'freq_value': &lt;FreqEnum.M: 'M'&gt;}, {'name': 'var_opex', 'value': -12.0, 'target': &lt;TargetEnum.opex: 'opex'&gt;, 'multiply': 'oil_volume'}, {'name': 'income', 'wi': 0.9, 'value': [20.0, 30.0, 40.0, 60.0, 80.0], 'target': &lt;TargetEnum.income: 'income'&gt;, 'multiply': 'oil_volume'}, {'name': 'capex_drill', 'periods': 1, 'value': -3000000.0, 'target': &lt;TargetEnum.capex: 'capex'&gt;}], 'dca': {'qi': 700.0, 'di': 0.3, 'b': 0.0, 'ti': datetime.date(2021, 1, 1), 'freq_di': &lt;FreqEnum.A: 'A'&gt;, 'fluid_rate': 250.0}, 'start': datetime.date(2021, 1, 1), 'end': datetime.date(2022, 1, 1), 'freq_output': &lt;FreqEnum.M: 'M'&gt;, 'rate_limit': 70.0}\n</pre> In\u00a0[26]: Copied! <pre>print(p3_cash.json(exclude={'forecast','cashflow'}, exclude_unset=True))\n</pre> print(p3_cash.json(exclude={'forecast','cashflow'}, exclude_unset=True)) <pre>{\"name\": \"Period-1\", \"cashflow_params\": [{\"name\": \"fix_opex\", \"value\": -5000.0, \"target\": \"opex\", \"freq_value\": \"M\"}, {\"name\": \"var_opex\", \"value\": -12.0, \"target\": \"opex\", \"multiply\": \"oil_volume\"}, {\"name\": \"income\", \"wi\": 0.9, \"value\": [20.0, 30.0, 40.0, 60.0, 80.0], \"target\": \"income\", \"multiply\": \"oil_volume\"}, {\"name\": \"capex_drill\", \"periods\": 1, \"value\": -3000000.0, \"target\": \"capex\"}], \"dca\": {\"qi\": 700.0, \"di\": 0.3, \"b\": 0.0, \"ti\": \"2021-01-01\", \"freq_di\": \"A\", \"fluid_rate\": 250.0}, \"start\": \"2021-01-01\", \"end\": \"2022-01-01\", \"freq_output\": \"M\", \"rate_limit\": 70.0}\n</pre> In\u00a0[27]: Copied! <pre>p3_cash.tree()\n</pre> p3_cash.tree() Out[27]: <pre>\ud83d\udcc9Period-1                                                                                   \n</pre> In\u00a0[28]: Copied! <pre>from dcapy.auth import Credential\n</pre> from dcapy.auth import Credential In\u00a0[29]: Copied! <pre>cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U')\n</pre> cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U') In\u00a0[30]: Copied! <pre>p3_cash.insert_db(cred, 'Period-Cash tutorial1')\n</pre> p3_cash.insert_db(cred, 'Period-Cash tutorial1') Out[30]: <pre>'65f4790e-a515-4a14-bb12-9109010ed5e9'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#forecast-scheduling-period-class","title":"Forecast Scheduling - Period Class\u00b6","text":"<p>As described before on the Introduction, the <code>Period</code> class is the one that contains all the parameters to define the forecast models for the rest of the Wrappers (<code>Scenario</code>, <code>Well</code>, <code>WellsGroup</code>).</p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#create-a-dca-model","title":"Create a dca Model\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#create-a-period-instance","title":"Create a <code>Period</code> Instance\u00b6","text":"<p>To create a <code>Period</code> Intance you have to provide a ``dca<code>model (either</code>Arps<code>or</code>Wor`), range dates and frequency output. These parameters are the same you would provide to generate a forecast by using only the dca model only. However, later in the notebook and next pages is shown what additional parameters can be defined when creating Period Instance.</p> <p>The first way to create an instance is by providing the right key arguments. <code>Pydantic</code> is used to validate the input user.</p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#example-create-instance","title":"Example. Create instance\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#wrong-input-passed","title":"Wrong input passed\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#example-create-period-by-passing-dictionary","title":"Example create Period by passing dictionary\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#add-rate-limit","title":"Add Rate limit\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#add-cashflow-parameters","title":"Add Cashflow Parameters\u00b6","text":"<p>Adding Cashflow parameters is allowed with the purpose of creating a cashflow model for the period.</p> <p>The <code>Period</code> instance receive a list of <code>CashFlowParams</code> instances. That means you can add as many parameters as you want.</p> <p>To define a basic cashflow parameter you have to provide the next key-arguments:</p> <ol> <li>Name for the cashflow</li> <li>Value (single value, list of values, date-value pair, probabilistic variable or a Wiener Proccess)</li> <li>Target (It defines if the resulting cashflow is income, capex or opex)</li> <li>Multiply (It defines if the value must be multiplied by a given column of the forecast)</li> </ol> <p>Let's define some cashflow parameters when creating a period:</p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#generate-forecast","title":"Generate forecast\u00b6","text":"<p>??? note Default working interest for a <code>CashFlowParameters</code> is 1</p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#generate-a-cashflow","title":"Generate a cashflow\u00b6","text":"<p>When calling the <code>generate_cashflow</code> method it return a list of <code>CashFlowModel</code></p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#make-a-plot-of-the-cashflow-model","title":"Make a plot of the Cashflow Model\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#cashflow-with-multiple-iterations","title":"Cashflow with Multiple Iterations\u00b6","text":"<p>Whether you define multiple or Probabilistic variables when cashflow parameters are defined for the <code>Period</code> the same amount of cash flow models are generated as forecast iterations are.</p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#multiple-cashflow-params","title":"Multiple Cashflow Params\u00b6","text":"<p>Cashflow parameters values can also be evaluated with multiple iterations.</p> <p>??? note When creating multiple iterations either on dca or cashflow parameters, the number of iterations must be the same in other to create element-wise models.</p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#export-the-model","title":"Export the model\u00b6","text":"<p>All classes in <code>dcapy</code> are based on Pydantic, hence they can be directly exported to a dictionary, json and further to yml</p>"},{"location":"examples/4-schedules/4b-Tutorial_Period/#export-to-dictionary","title":"Export to Dictionary\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#export-to-json","title":"Export to json\u00b6","text":""},{"location":"examples/4-schedules/4b-Tutorial_Period/#export-to-cloud","title":"Export to cloud\u00b6","text":"<p>Dcapy has integrated connection with an API hosted on Heroku that allows to save your models on the cloud. This allows you to create, update and delete your models on a remote database whicgh is accesible throught a single account (with Oauth2 Authentication).</p>"},{"location":"examples/4-schedules/4c-Tutorial_Scenario/","title":"Forecast Scheduling - Scenario Class","text":"In\u00a0[1]: Copied! <pre>import os\n\nfrom dcapy import dca\nfrom dcapy.schedule import Scenario, Period\nfrom dcapy.cashflow import CashFlowParams\n\nimport numpy as np \nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\nimport seaborn as sns\n</pre> import os  from dcapy import dca from dcapy.schedule import Scenario, Period from dcapy.cashflow import CashFlowParams  import numpy as np  import pandas as pd from datetime import date import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats import seaborn as sns <p>First. Define at least two periods, in this case using the <code>dca.Wor</code> models. On each period is defined a cashflow parameter tageting the capex.</p> In\u00a0[2]: Copied! <pre>p1_dict = {\n    'name':'pdp',\n    'dca': {\n        'ti':'2021-01-01',\n        'bsw':0.3,\n        'slope':[2e-5,1e-5],\n        'fluid_rate':1000,\n        'gor':0.3\n    },\n    'start':'2021-01-01',\n    'end':'2022-01-01',\n    'freq_input':'M',\n    'freq_output':'M',\n    'cashflow_params':[\n        {\n            'name':'capex',\n            'value':{\n                'date':['2021-01-01'],\n                'value':[-5000000]\n                },\n            'target':'capex'\n        }\n    ]\n}\n\n\np1 = Period(**p1_dict)\np1\n</pre> p1_dict = {     'name':'pdp',     'dca': {         'ti':'2021-01-01',         'bsw':0.3,         'slope':[2e-5,1e-5],         'fluid_rate':1000,         'gor':0.3     },     'start':'2021-01-01',     'end':'2022-01-01',     'freq_input':'M',     'freq_output':'M',     'cashflow_params':[         {             'name':'capex',             'value':{                 'date':['2021-01-01'],                 'value':[-5000000]                 },             'target':'capex'         }     ] }   p1 = Period(**p1_dict) p1 Out[2]: <pre>Period(name='pdp', cashflow_params=[CashFlowParams(name='capex', wi=1.0, periods=None, value=ChgPts(date=[datetime.date(2021, 1, 1)], value=[-5000000.0]), target=&lt;TargetEnum.capex: 'capex'&gt;, multiply=None, agg='mean', depends=False, iter=1, general=False, freq_value=None)], cashflow=None, forecast=None, seed=None, iter=1, ppf=None, description=None, id=None, dca=Wor(bsw=0.3, slope=[2e-05, 1e-05], fluid_rate=1000.0, ti=datetime.date(2021, 1, 1), seed=None, gor=0.3, glr=None), start=datetime.date(2021, 1, 1), end=datetime.date(2022, 1, 1), time_list=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, freq_output=&lt;FreqEnum.M: 'M'&gt;, rate_limit=None, cum_limit=None, depends=None, type=&lt;SchemasEnum.period: 'period'&gt;)</pre> In\u00a0[3]: Copied! <pre>p2_dict = {\n    'name':'pud',\n    'dca': {\n        'ti':'2022-01-01',\n        'bsw':0.3,\n        'slope':[2e-5],\n        'fluid_rate':1000,\n        'gor':0.3\n    },\n    'start':'2022-01-01',\n    'end':'2023-01-01',\n    'freq_input':'M',\n    'freq_output':'M',\n    'cashflow_params':[\n        {\n            'name':'capex',\n            'value':{\n                'date':['2022-01-01'],\n                'value':[-450000]},\n            'target':'capex'\n        }\n    ]\n}\n\np2 = Period(**p2_dict)\np2\n</pre> p2_dict = {     'name':'pud',     'dca': {         'ti':'2022-01-01',         'bsw':0.3,         'slope':[2e-5],         'fluid_rate':1000,         'gor':0.3     },     'start':'2022-01-01',     'end':'2023-01-01',     'freq_input':'M',     'freq_output':'M',     'cashflow_params':[         {             'name':'capex',             'value':{                 'date':['2022-01-01'],                 'value':[-450000]},             'target':'capex'         }     ] }  p2 = Period(**p2_dict) p2 Out[3]: <pre>Period(name='pud', cashflow_params=[CashFlowParams(name='capex', wi=1.0, periods=None, value=ChgPts(date=[datetime.date(2022, 1, 1)], value=[-450000.0]), target=&lt;TargetEnum.capex: 'capex'&gt;, multiply=None, agg='mean', depends=False, iter=1, general=False, freq_value=None)], cashflow=None, forecast=None, seed=None, iter=1, ppf=None, description=None, id=None, dca=Wor(bsw=0.3, slope=[2e-05], fluid_rate=1000.0, ti=datetime.date(2022, 1, 1), seed=None, gor=0.3, glr=None), start=datetime.date(2022, 1, 1), end=datetime.date(2023, 1, 1), time_list=None, freq_input=&lt;FreqEnum.M: 'M'&gt;, freq_output=&lt;FreqEnum.M: 'M'&gt;, rate_limit=None, cum_limit=None, depends=None, type=&lt;SchemasEnum.period: 'period'&gt;)</pre> <p>If casflow parameters are shared across the periods, you can declare a separate cashflow parameters instance and assign them to the scenario instance directly</p> In\u00a0[4]: Copied! <pre>cashflow_params = [\n            {\n                'name':'fix_opex',\n                'value':-5000,\n                'target':'opex',\n            },\n            {\n                'name':'var_opex',\n                'value':-5,\n                'target':'opex',\n                'multiply':'oil_volume',\n            },\n            {\n                'name':'income',\n                'value':60,\n                'target':'income',\n                'multiply':'oil_volume',\n            }]\n</pre> cashflow_params = [             {                 'name':'fix_opex',                 'value':-5000,                 'target':'opex',             },             {                 'name':'var_opex',                 'value':-5,                 'target':'opex',                 'multiply':'oil_volume',             },             {                 'name':'income',                 'value':60,                 'target':'income',                 'multiply':'oil_volume',             }]      In\u00a0[5]: Copied! <pre>s1 = Scenario(\n    name='base', \n    periods=[p1,p2], \n    cashflow_params=cashflow_params\n)\n</pre> s1 = Scenario(     name='base',      periods=[p1,p2],      cashflow_params=cashflow_params )  <p>Notice each period forecast will produce different amount of iterations. The first period will produce two and the second one.</p> In\u00a0[6]: Copied! <pre>s1_f = s1.generate_forecast(freq_output='M')\nprint(s1_f)\n</pre> s1_f = s1.generate_forecast(freq_output='M') print(s1_f) <pre>         iteration    oil_rate  water_rate        oil_cum    gas_rate  \\\ndate                                                                    \n2021-01          0  655.596404  344.403596   20323.488531  196.678921   \n2021-01          1  677.822890  322.177110   21012.509598  203.346867   \n2021-02          0  570.189855  429.810145   36288.804475  171.056957   \n2021-02          1  634.191986  365.808014   38769.885213  190.257596   \n2021-03          0  492.473724  507.526276   51555.489924  147.742117   \n2021-03          1  591.337678  408.662322   57101.353244  177.401304   \n2021-04          0  423.296192  576.703808   64254.375683  126.988858   \n2021-04          1  548.741612  451.258388   73563.601594  164.622484   \n2021-05          0  365.930746  634.069254   75598.228821  109.779224   \n2021-05          1  508.583792  491.416208   89329.699161  152.575138   \n2021-06          0  318.932312  681.067688   85166.198172   95.679694   \n2021-06          1  471.241328  528.758672  103466.939006  141.372398   \n2021-07          0  280.603871  719.396129   93864.918158   84.181161   \n2021-07          1  436.919472  563.080528  117011.442627  131.075841   \n2021-08          0  248.692374  751.307626  101574.381744   74.607712   \n2021-08          1  405.104841  594.895159  129569.692696  121.531452   \n2021-09          0  222.779776  777.220224  108257.775023   66.833933   \n2021-09          1  376.705969  623.294031  140870.871765  113.011791   \n2021-10          0  201.191650  798.808350  114494.716172   60.357495   \n2021-10          1  351.020360  648.979640  151752.502920  105.306108   \n2021-11          0  182.997778  817.002222  119984.649499   54.899333   \n2021-11          1  327.798148  672.201852  161586.447357   98.339444   \n2021-12          0  167.547576  832.452424  125178.624349   50.264273   \n2021-12          1  306.832786  693.167214  171098.263710   92.049836   \n2022-01          0  160.262718  839.737282  125338.887067   48.078815   \n2022-01          1  296.570066  703.429934  171394.833776   88.971020   \n2022-01          0  655.596404  344.403596   20323.488531  196.678921   \n2022-02          0  570.189855  429.810145   36288.804475  171.056957   \n2022-03          0  492.473724  507.526276   51555.489924  147.742117   \n2022-04          0  423.296192  576.703808   64254.375683  126.988858   \n2022-05          0  365.930746  634.069254   75598.228821  109.779224   \n2022-06          0  318.932312  681.067688   85166.198172   95.679694   \n2022-07          0  280.603871  719.396129   93864.918158   84.181161   \n2022-08          0  248.692374  751.307626  101574.381744   74.607712   \n2022-09          0  222.779776  777.220224  108257.775023   66.833933   \n2022-10          0  201.191650  798.808350  114494.716172   60.357495   \n2022-11          0  182.997778  817.002222  119984.649499   54.899333   \n2022-12          0  167.547576  832.452424  125178.624349   50.264273   \n2023-01          0  160.262718  839.737282  125338.887067   48.078815   \n\n             water_cum       bsw       wor     wor_1  delta_time  fluid_rate  \\\ndate                                                                           \n2021-01   10676.511469  0.344404  0.527821  1.527821         1.0      1000.0   \n2021-01    9987.490402  0.322177  0.475875  1.475875         1.0      1000.0   \n2021-02   22711.195525  0.429810  0.756560  1.756560         1.0      1000.0   \n2021-02   20230.114787  0.365808  0.577364  1.577364         1.0      1000.0   \n2021-03   38444.510076  0.507526  1.034639  2.034639         1.0      1000.0   \n2021-03   32898.646756  0.408662  0.691873  1.691873         1.0      1000.0   \n2021-04   55745.624317  0.576704  1.366647  2.366647         1.0      1000.0   \n2021-04   46436.398406  0.451258  0.823190  1.823190         1.0      1000.0   \n2021-05   75401.771179  0.634069  1.737483  2.737483         1.0      1000.0   \n2021-05   61670.300839  0.491416  0.967229  1.967229         1.0      1000.0   \n2021-06   95833.801828  0.681068  2.139911  3.139911         1.0      1000.0   \n2021-06   77533.060994  0.528759  1.123044  2.123044         1.0      1000.0   \n2021-07  118135.081842  0.719396  2.568406  3.568406         1.0      1000.0   \n2021-07   94988.557373  0.563081  1.289862  2.289862         1.0      1000.0   \n2021-08  141425.618256  0.751308  3.025539  4.025539         1.0      1000.0   \n2021-08  113430.307304  0.594895  1.469646  2.469646         1.0      1000.0   \n2021-09  164742.224977  0.777220  3.492783  4.492783         1.0      1000.0   \n2021-09  132129.128235  0.623294  1.655689  2.655689         1.0      1000.0   \n2021-10  189505.283828  0.798808  3.974506  4.974506         1.0      1000.0   \n2021-10  152247.497080  0.648980  1.850023  2.850023         1.0      1000.0   \n2021-11  214015.350501  0.817002  4.468218  5.468218         1.0      1000.0   \n2021-11  172413.552643  0.672202  2.051770  3.051770         1.0      1000.0   \n2021-12  239821.375651  0.832452  4.972179  5.972179         1.0      1000.0   \n2021-12  193901.736290  0.693167  2.260286  3.260286         1.0      1000.0   \n2022-01  240661.112933  0.839737  5.239754  6.239754         1.0      1000.0   \n2022-01  194605.166224  0.703430  2.371884  3.371884         1.0      1000.0   \n2022-01   10676.511469  0.344404  0.527821  1.527821         1.0      1000.0   \n2022-02   22711.195525  0.429810  0.756560  1.756560         1.0      1000.0   \n2022-03   38444.510076  0.507526  1.034639  2.034639         1.0      1000.0   \n2022-04   55745.624317  0.576704  1.366647  2.366647         1.0      1000.0   \n2022-05   75401.771179  0.634069  1.737483  2.737483         1.0      1000.0   \n2022-06   95833.801828  0.681068  2.139911  3.139911         1.0      1000.0   \n2022-07  118135.081842  0.719396  2.568406  3.568406         1.0      1000.0   \n2022-08  141425.618256  0.751308  3.025539  4.025539         1.0      1000.0   \n2022-09  164742.224977  0.777220  3.492783  4.492783         1.0      1000.0   \n2022-10  189505.283828  0.798808  3.974506  4.974506         1.0      1000.0   \n2022-11  214015.350501  0.817002  4.468218  5.468218         1.0      1000.0   \n2022-12  239821.375651  0.832452  4.972179  5.972179         1.0      1000.0   \n2023-01  240661.112933  0.839737  5.239754  6.239754         1.0      1000.0   \n\n         fluid_cum       gas_cum    oil_volume  water_volume   gas_volume  \\\ndate                                                                        \n2021-01    31000.0   6097.046559  20276.242593  10723.757407  6097.046559   \n2021-01    31000.0   6303.752879  20988.830611  10011.169389  6303.752879   \n2021-02    59000.0  10886.641342  15926.259334  12073.740666  4789.594783   \n2021-02    59000.0  11630.965564  17736.778097  10263.221903  5327.212684   \n2021-03    90000.0  15466.646977  15228.601876  15771.398124  4580.005635   \n2021-03    90000.0  17130.405973  18309.326030  12690.673970  5499.440409   \n2021-04   120000.0  19276.312705  12667.931665  17332.068335  3809.665727   \n2021-04   120000.0  22069.080478  16441.874075  13558.125925  4938.674505   \n2021-05   151000.0  22679.468646  11317.565289  19682.434711  3403.155941   \n2021-05   151000.0  26798.909748  15746.405444  15253.594556  4729.829270   \n2021-06   181000.0  25549.859452   9547.208449  20452.791551  2870.390805   \n2021-06   181000.0  31040.081702  14119.635565  15880.364435  4241.171954   \n2021-07   212000.0  28159.475447   8681.176852  22318.823148  2609.615996   \n2021-07   212000.0  35103.432788  13527.851520  17472.148480  4063.351086   \n2021-08   243000.0  30472.314523   7695.071433  23304.928567  2312.839076   \n2021-08   243000.0  38870.907809  12543.126062  18456.873938  3767.475020   \n2021-09   273000.0  32477.332507   6671.830902  23328.169098  2005.017984   \n2021-09   273000.0  42261.261530  11287.918873  18712.081127  3390.353721   \n2021-10   304000.0  34348.414852   6226.925472  24773.074528  1871.082345   \n2021-10   304000.0  45525.750876  10869.243605  20130.756395  3264.489347   \n2021-11   334000.0  35995.394850   5481.731833  24518.268167  1646.979998   \n2021-11   334000.0  48475.934207   9823.116077  20176.883923  2950.183331   \n2021-12   365000.0  37553.587305   5186.735906  25813.264094  1558.192455   \n2021-12   365000.0  51329.479113   9501.706757  21498.293243  2853.544906   \n2022-01   366000.0  37601.666120    160.262718    839.737282    48.078815   \n2022-01   366000.0  51418.450133    296.570066    703.429934    88.971020   \n2022-01    31000.0   6097.046559  20276.242593  10723.757407  6097.046559   \n2022-02    59000.0  10886.641342  15926.259334  12073.740666  4789.594783   \n2022-03    90000.0  15466.646977  15228.601876  15771.398124  4580.005635   \n2022-04   120000.0  19276.312705  12667.931665  17332.068335  3809.665727   \n2022-05   151000.0  22679.468646  11317.565289  19682.434711  3403.155941   \n2022-06   181000.0  25549.859452   9547.208449  20452.791551  2870.390805   \n2022-07   212000.0  28159.475447   8681.176852  22318.823148  2609.615996   \n2022-08   243000.0  30472.314523   7695.071433  23304.928567  2312.839076   \n2022-09   273000.0  32477.332507   6671.830902  23328.169098  2005.017984   \n2022-10   304000.0  34348.414852   6226.925472  24773.074528  1871.082345   \n2022-11   334000.0  35995.394850   5481.731833  24518.268167  1646.979998   \n2022-12   365000.0  37553.587305   5186.735906  25813.264094  1558.192455   \n2023-01   366000.0  37601.666120    160.262718    839.737282    48.078815   \n\n        period scenario  \ndate                     \n2021-01    pdp     base  \n2021-01    pdp     base  \n2021-02    pdp     base  \n2021-02    pdp     base  \n2021-03    pdp     base  \n2021-03    pdp     base  \n2021-04    pdp     base  \n2021-04    pdp     base  \n2021-05    pdp     base  \n2021-05    pdp     base  \n2021-06    pdp     base  \n2021-06    pdp     base  \n2021-07    pdp     base  \n2021-07    pdp     base  \n2021-08    pdp     base  \n2021-08    pdp     base  \n2021-09    pdp     base  \n2021-09    pdp     base  \n2021-10    pdp     base  \n2021-10    pdp     base  \n2021-11    pdp     base  \n2021-11    pdp     base  \n2021-12    pdp     base  \n2021-12    pdp     base  \n2022-01    pdp     base  \n2022-01    pdp     base  \n2022-01    pud     base  \n2022-02    pud     base  \n2022-03    pud     base  \n2022-04    pud     base  \n2022-05    pud     base  \n2022-06    pud     base  \n2022-07    pud     base  \n2022-08    pud     base  \n2022-09    pud     base  \n2022-10    pud     base  \n2022-11    pud     base  \n2022-12    pud     base  \n2023-01    pud     base  \n</pre> In\u00a0[7]: Copied! <pre>sns.lineplot(data=s1_f, x=s1_f.index.to_timestamp(), y='oil_rate', hue='iteration', style='period')\n</pre> sns.lineplot(data=s1_f, x=s1_f.index.to_timestamp(), y='oil_rate', hue='iteration', style='period') Out[7]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> <p>When generating the cashflow an internal operation of broadcasting the iterations to produce, in this case, two cashflow models:</p> <ul> <li>cashflow model 1: Period_1 Iteration_0 + Period_2 Iteration_0</li> <li>cashflow model 2: Period_1 Iteration_1 + Period_2 Iteration_0</li> </ul> In\u00a0[8]: Copied! <pre>s1_c = s1.generate_cashflow(freq_output='M')\ns1_c[1].fcf()\n</pre> s1_c = s1.generate_cashflow(freq_output='M') s1_c[1].fcf() Out[8]: income_base-pdp income_base-pud total_income fix_opex_base-pdp var_opex_base-pdp fix_opex_base-pud var_opex_base-pud total_opex capex_base-pdp capex_base-pud total_capex fcf cum_fcf 2021-01 1.259330e+06 0.000000e+00 1.259330e+06 -5000.0 -104944.153053 0.0 0.000000 -109944.153053 -5000000.0 0.0 -5000000.0 -3.850614e+06 -3.850614e+06 2021-02 1.064207e+06 0.000000e+00 1.064207e+06 -5000.0 -88683.890486 0.0 0.000000 -93683.890486 0.0 0.0 0.0 9.705228e+05 -2.880092e+06 2021-03 1.098560e+06 0.000000e+00 1.098560e+06 -5000.0 -91546.630149 0.0 0.000000 -96546.630149 0.0 0.0 0.0 1.002013e+06 -1.878079e+06 2021-04 9.865124e+05 0.000000e+00 9.865124e+05 -5000.0 -82209.370374 0.0 0.000000 -87209.370374 0.0 0.0 0.0 8.993031e+05 -9.787755e+05 2021-05 9.447843e+05 0.000000e+00 9.447843e+05 -5000.0 -78732.027218 0.0 0.000000 -83732.027218 0.0 0.0 0.0 8.610523e+05 -1.177232e+05 2021-06 8.471781e+05 0.000000e+00 8.471781e+05 -5000.0 -70598.177827 0.0 0.000000 -75598.177827 0.0 0.0 0.0 7.715800e+05 6.538567e+05 2021-07 8.116711e+05 0.000000e+00 8.116711e+05 -5000.0 -67639.257599 0.0 0.000000 -72639.257599 0.0 0.0 0.0 7.390318e+05 1.392889e+06 2021-08 7.525876e+05 0.000000e+00 7.525876e+05 -5000.0 -62715.630308 0.0 0.000000 -67715.630308 0.0 0.0 0.0 6.848719e+05 2.077761e+06 2021-09 6.772751e+05 0.000000e+00 6.772751e+05 -5000.0 -56439.594367 0.0 0.000000 -61439.594367 0.0 0.0 0.0 6.158355e+05 2.693596e+06 2021-10 6.521546e+05 0.000000e+00 6.521546e+05 -5000.0 -54346.218023 0.0 0.000000 -59346.218023 0.0 0.0 0.0 5.928084e+05 3.286404e+06 2021-11 5.893870e+05 0.000000e+00 5.893870e+05 -5000.0 -49115.580387 0.0 0.000000 -54115.580387 0.0 0.0 0.0 5.352714e+05 3.821676e+06 2021-12 5.701024e+05 0.000000e+00 5.701024e+05 -5000.0 -47508.533786 0.0 0.000000 -52508.533786 0.0 0.0 0.0 5.175939e+05 4.339270e+06 2022-01 1.779420e+04 1.216575e+06 1.234369e+06 -5000.0 -1482.850328 -5000.0 -101381.212966 -112864.063293 0.0 -450000.0 -450000.0 6.715047e+05 5.010774e+06 2022-02 0.000000e+00 9.555756e+05 9.555756e+05 0.0 0.000000 -5000.0 -79631.296668 -84631.296668 0.0 0.0 0.0 8.709443e+05 5.881719e+06 2022-03 0.000000e+00 9.137161e+05 9.137161e+05 0.0 0.000000 -5000.0 -76143.009380 -81143.009380 0.0 0.0 0.0 8.325731e+05 6.714292e+06 2022-04 0.000000e+00 7.600759e+05 7.600759e+05 0.0 0.000000 -5000.0 -63339.658324 -68339.658324 0.0 0.0 0.0 6.917362e+05 7.406028e+06 2022-05 0.000000e+00 6.790539e+05 6.790539e+05 0.0 0.000000 -5000.0 -56587.826445 -61587.826445 0.0 0.0 0.0 6.174661e+05 8.023494e+06 2022-06 0.000000e+00 5.728325e+05 5.728325e+05 0.0 0.000000 -5000.0 -47736.042245 -52736.042245 0.0 0.0 0.0 5.200965e+05 8.543591e+06 2022-07 0.000000e+00 5.208706e+05 5.208706e+05 0.0 0.000000 -5000.0 -43405.884259 -48405.884259 0.0 0.0 0.0 4.724647e+05 9.016055e+06 2022-08 0.000000e+00 4.617043e+05 4.617043e+05 0.0 0.000000 -5000.0 -38475.357166 -43475.357166 0.0 0.0 0.0 4.182289e+05 9.434284e+06 2022-09 0.000000e+00 4.003099e+05 4.003099e+05 0.0 0.000000 -5000.0 -33359.154512 -38359.154512 0.0 0.0 0.0 3.619507e+05 9.796235e+06 2022-10 0.000000e+00 3.736155e+05 3.736155e+05 0.0 0.000000 -5000.0 -31134.627360 -36134.627360 0.0 0.0 0.0 3.374809e+05 1.013372e+07 2022-11 0.000000e+00 3.289039e+05 3.289039e+05 0.0 0.000000 -5000.0 -27408.659166 -32408.659166 0.0 0.0 0.0 2.964953e+05 1.043021e+07 2022-12 0.000000e+00 3.112042e+05 3.112042e+05 0.0 0.000000 -5000.0 -25933.679532 -30933.679532 0.0 0.0 0.0 2.802705e+05 1.071048e+07 2023-01 0.000000e+00 9.615763e+03 9.615763e+03 0.0 0.000000 -5000.0 -801.313590 -5801.313590 0.0 0.0 0.0 3.814449e+03 1.071430e+07 In\u00a0[9]: Copied! <pre>n_cashflows = len(s1_c)\n\nfig, ax= plt.subplots(n_cashflows,1,figsize=(15,7))\n\nfor i in range(n_cashflows):\n    s1_c[i].plot(cum=True, ax=ax[i])\n</pre> n_cashflows = len(s1_c)  fig, ax= plt.subplots(n_cashflows,1,figsize=(15,7))  for i in range(n_cashflows):     s1_c[i].plot(cum=True, ax=ax[i]) <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> In\u00a0[10]: Copied! <pre>p3_dict = {\n    'name':'pdp',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.025,\n        'freq_di':'M',\n        'qi':{'dist':'norm', 'kw':{'loc':1500,'scale':200}}, #[800,1000],\n        'b':0,\n    },\n    'start':'2021-01-01',\n    'end':'2027-01-01',\n    'freq_output':'A',\n    'rate_limit': 300,\n    'cashflow_params':[\n        {\n            'name':'capex',\n            'value':{\n                'date':['2021-01-01'],\n                'value':[-5000000]\n                },\n            'target':'capex'\n        }\n    ]\n}\n\np4_dict = {\n    'name':'pud',\n    'dca': {\n        'ti':'2022-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':3000,\n        'b':0,\n    },\n    'start':'2022-01-01',\n    'end':'2027-01-01',\n    'freq_output':'A',\n    'depends':{'period':'pdp'},\n    'cashflow_params':[\n        {\n            'name':'wo',\n            'value':-500000,\n            'period':1,\n            'target':'capex'\n        },\n        {\n            'name':'abandon',\n            'value':-300000,\n            'period':-1,\n            'target':'capex'\n        },\n    ]\n}\n</pre> p3_dict = {     'name':'pdp',     'dca': {         'ti':'2021-01-01',         'di':0.025,         'freq_di':'M',         'qi':{'dist':'norm', 'kw':{'loc':1500,'scale':200}}, #[800,1000],         'b':0,     },     'start':'2021-01-01',     'end':'2027-01-01',     'freq_output':'A',     'rate_limit': 300,     'cashflow_params':[         {             'name':'capex',             'value':{                 'date':['2021-01-01'],                 'value':[-5000000]                 },             'target':'capex'         }     ] }  p4_dict = {     'name':'pud',     'dca': {         'ti':'2022-01-01',         'di':0.3,         'freq_di':'A',         'qi':3000,         'b':0,     },     'start':'2022-01-01',     'end':'2027-01-01',     'freq_output':'A',     'depends':{'period':'pdp'},     'cashflow_params':[         {             'name':'wo',             'value':-500000,             'period':1,             'target':'capex'         },         {             'name':'abandon',             'value':-300000,             'period':-1,             'target':'capex'         },     ] } <p>To create a scenario you can also pass a dictionary well structuted instead of create all classes separately, like Periods.</p> <p>By declaring the <code>iter</code> key with an integer the forecast will iterate this number. Notice that, the Period 4 has neither probabilistic variables nor multiple variables however as it depends on the end date of the first. Consequently the function creates the number of iterations required to reach 10 fully iterations that covers both periods.</p> In\u00a0[11]: Copied! <pre>s2_dict = {\n    'name':'Dependency',\n    'periods':[\n        p3_dict,\n        p4_dict\n    ],\n    'cashflow_params': cashflow_params,\n    'iter':10\n}\ns2_dict\n</pre> s2_dict = {     'name':'Dependency',     'periods':[         p3_dict,         p4_dict     ],     'cashflow_params': cashflow_params,     'iter':10 } s2_dict Out[11]: <pre>{'name': 'Dependency',\n 'periods': [{'name': 'pdp',\n   'dca': {'ti': '2021-01-01',\n    'di': 0.025,\n    'freq_di': 'M',\n    'qi': {'dist': 'norm', 'kw': {'loc': 1500, 'scale': 200}},\n    'b': 0},\n   'start': '2021-01-01',\n   'end': '2027-01-01',\n   'freq_output': 'A',\n   'rate_limit': 300,\n   'cashflow_params': [{'name': 'capex',\n     'value': {'date': ['2021-01-01'], 'value': [-5000000]},\n     'target': 'capex'}]},\n  {'name': 'pud',\n   'dca': {'ti': '2022-01-01', 'di': 0.3, 'freq_di': 'A', 'qi': 3000, 'b': 0},\n   'start': '2022-01-01',\n   'end': '2027-01-01',\n   'freq_output': 'A',\n   'depends': {'period': 'pdp'},\n   'cashflow_params': [{'name': 'wo',\n     'value': -500000,\n     'period': 1,\n     'target': 'capex'},\n    {'name': 'abandon', 'value': -300000, 'period': -1, 'target': 'capex'}]}],\n 'cashflow_params': [{'name': 'fix_opex', 'value': -5000, 'target': 'opex'},\n  {'name': 'var_opex',\n   'value': -5,\n   'target': 'opex',\n   'multiply': 'oil_volume'},\n  {'name': 'income',\n   'value': 60,\n   'target': 'income',\n   'multiply': 'oil_volume'}],\n 'iter': 10}</pre> In\u00a0[12]: Copied! <pre>s2 = Scenario(**s2_dict)\nprint(type(s2))\n</pre> s2 = Scenario(**s2_dict) print(type(s2)) <pre>&lt;class 'dcapy.schedule.schedule.Scenario'&gt;\n</pre> <p>Generate Forecast</p> In\u00a0[13]: Copied! <pre>s2_f = s2.generate_forecast(iter=10, seed=21)\nprint(s2_f)\n</pre> s2_f = s2.generate_forecast(iter=10, seed=21) print(s2_f) <pre>         oil_rate       oil_cum  iteration     oil_volume period    scenario\ndate                                                                        \n2021  1489.607150  0.000000e+00          0  468800.999434    pdp  Dependency\n2022  1098.939651  4.688010e+05          0  407326.632111    pdp  Dependency\n2023   810.729430  8.146533e+05          0  300500.294141    pdp  Dependency\n2024   598.105827  1.069802e+06          0  221910.986683    pdp  Dependency\n2025   440.877785  1.258475e+06          0  163712.145277    pdp  Dependency\n...           ...           ...        ...            ...    ...         ...\n2027  2222.454662  9.460135e+05          7  946013.494512    pud  Dependency\n2026  3000.000000  0.000000e+00          8  473006.747256    pud  Dependency\n2027  2222.454662  9.460135e+05          8  946013.494512    pud  Dependency\n2026  3000.000000  0.000000e+00          9  473006.747256    pud  Dependency\n2027  2222.454662  9.460135e+05          9  946013.494512    pud  Dependency\n\n[80 rows x 6 columns]\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> In\u00a0[14]: Copied! <pre>sns.lineplot(data=s2_f,  x=s2_f.index.to_timestamp(), y='oil_rate', hue='iteration',style='period')\n</pre> sns.lineplot(data=s2_f,  x=s2_f.index.to_timestamp(), y='oil_rate', hue='iteration',style='period') Out[14]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[15]: Copied! <pre>s2_c = s2.generate_cashflow(freq_output='A')\n\nprint(f'Number of cashflow models {len(s2_c)}')\n</pre> s2_c = s2.generate_cashflow(freq_output='A')  print(f'Number of cashflow models {len(s2_c)}') <pre>Number of cashflow models 10\n</pre> In\u00a0[16]: Copied! <pre>s2_c[0].fcf()\n</pre> s2_c[0].fcf() Out[16]: income_Dependency-pdp income_Dependency-pud total_income fix_opex_Dependency-pdp var_opex_Dependency-pdp fix_opex_Dependency-pud var_opex_Dependency-pud total_opex capex_Dependency-pdp wo_Dependency-pud abandon_Dependency-pud total_capex fcf cum_fcf 2021 2.812806e+07 0.000000e+00 2.812806e+07 -5000.0 -2.344005e+06 0.0 0.000000e+00 -2.349005e+06 -5000000.0 0.0 0.0 -5000000.0 2.077905e+07 2.077905e+07 2022 2.443960e+07 0.000000e+00 2.443960e+07 -5000.0 -2.036633e+06 0.0 0.000000e+00 -2.041633e+06 0.0 0.0 0.0 0.0 2.239796e+07 4.317702e+07 2023 1.803002e+07 0.000000e+00 1.803002e+07 -5000.0 -1.502501e+06 0.0 0.000000e+00 -1.507501e+06 0.0 0.0 0.0 0.0 1.652252e+07 5.969954e+07 2024 1.331466e+07 0.000000e+00 1.331466e+07 -5000.0 -1.109555e+06 0.0 0.000000e+00 -1.114555e+06 0.0 0.0 0.0 0.0 1.220010e+07 7.189964e+07 2025 9.822729e+06 0.000000e+00 9.822729e+06 -5000.0 -8.185607e+05 0.0 0.000000e+00 -8.235607e+05 0.0 0.0 0.0 0.0 8.999168e+06 8.089881e+07 2026 -3.775426e+07 2.838040e+07 -9.373852e+06 -5000.0 3.146188e+06 -5000.0 -2.365034e+06 7.711544e+05 0.0 -500000.0 -300000.0 -800000.0 -9.402698e+06 7.149611e+07 2027 0.000000e+00 5.676081e+07 5.676081e+07 0.0 0.000000e+00 -5000.0 -4.730067e+06 -4.735067e+06 0.0 -500000.0 -300000.0 -800000.0 5.122574e+07 1.227219e+08 In\u00a0[17]: Copied! <pre>s2.npv([0.15], freq_rate='A',freq_cashflow='A').reset_index().to_dict()\n</pre> s2.npv([0.15], freq_rate='A',freq_cashflow='A').reset_index().to_dict() Out[17]: <pre>{'index': {0: 0.1499999999999999,\n  1: 0.1499999999999999,\n  2: 0.1499999999999999,\n  3: 0.1499999999999999,\n  4: 0.1499999999999999,\n  5: 0.1499999999999999,\n  6: 0.1499999999999999,\n  7: 0.1499999999999999,\n  8: 0.1499999999999999,\n  9: 0.1499999999999999},\n 'npv': {0: 83387511.45599285,\n  1: 82960222.54647115,\n  2: 91277731.89554133,\n  3: 88872673.70059997,\n  4: 89139483.06955868,\n  5: 85885826.29488969,\n  6: 82277300.0707481,\n  7: 82070212.93389057,\n  8: 91900627.35896699,\n  9: 83671291.75916964},\n 'iteration': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}}</pre> In\u00a0[18]: Copied! <pre>n_cashflows = len(s2_c)\n\ndef cell_ijk(cell_id,nx,ny):\n    cell_id +=1\n    k=np.ceil(cell_id/(nx*ny)).astype(int)\n    j=np.ceil((cell_id-(nx*ny)*(k-1))/nx).astype(int)\n    i=np.ceil(cell_id-(nx*ny*(k-1))-nx*(j-1)).astype(int)\n    return i-1,j-1,k-1\n\nfig, ax= plt.subplots(5,2,figsize=(20,15))\n\nfor idx in range(n_cashflows):\n\n    c = cell_ijk(idx+1,5,2)\n    print(idx,c)\n    s2_c[idx].plot(cum=True, format='m',ax=ax[c[0]-1,c[1]])\n</pre> n_cashflows = len(s2_c)  def cell_ijk(cell_id,nx,ny):     cell_id +=1     k=np.ceil(cell_id/(nx*ny)).astype(int)     j=np.ceil((cell_id-(nx*ny)*(k-1))/nx).astype(int)     i=np.ceil(cell_id-(nx*ny*(k-1))-nx*(j-1)).astype(int)     return i-1,j-1,k-1  fig, ax= plt.subplots(5,2,figsize=(20,15))  for idx in range(n_cashflows):      c = cell_ijk(idx+1,5,2)     print(idx,c)     s2_c[idx].plot(cum=True, format='m',ax=ax[c[0]-1,c[1]]) <pre>0 (1, 0, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>1 (2, 0, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>2 (3, 0, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>3 (4, 0, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>4 (0, 1, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>5 (1, 1, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>6 (2, 1, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>7 (3, 1, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>8 (4, 1, 0)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> <pre>9 (0, 0, 1)\n</pre> <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> In\u00a0[19]: Copied! <pre>from dcapy.auth import Credential\n</pre> from dcapy.auth import Credential In\u00a0[20]: Copied! <pre>cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U')\n</pre> cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U') In\u00a0[21]: Copied! <pre>s2.insert_db(cred, 'Scenario-Cash tutorial')\n</pre> s2.insert_db(cred, 'Scenario-Cash tutorial') Out[21]: <pre>'01de434e-d393-4f3e-8ecf-98e86b4dd39c'</pre> In\u00a0[22]: Copied! <pre>sd = Scenario()\n\nsd.get_db('01de434e-d393-4f3e-8ecf-98e86b4dd39c',cred)\n</pre> sd = Scenario()  sd.get_db('01de434e-d393-4f3e-8ecf-98e86b4dd39c',cred) In\u00a0[24]: Copied! <pre>type(sd)\n</pre> type(sd) Out[24]: <pre>dcapy.schedule.schedule.Scenario</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-schedules/4c-Tutorial_Scenario/#forecast-scheduling-scenario-class","title":"Forecast Scheduling - Scenario Class\u00b6","text":"<p>The scenario class is just a wrapper to group multiple periods in order to evaluate their production and optionally the economics.</p> <p>It adds a feature of period dependency. You can set that one period could start its forecast once another ends.</p> <p>A forecast can end mainly by three reasons.</p> <ul> <li><p>By Date: When defining an <code>end_date</code> key argument the forecast will stop unless another condition makes it fishish earlier. In any case, the forecast won't go beyond that date.</p> </li> <li><p>By Rate Limit: Set the rate limit of oil. If the oil rate reaches that rate limit it automatically will stop.</p> </li> <li><p>By Cumulative Limit: Set the Cumulative limit of oil. If the oil cum reaches that cumulative limit it automatically will stop.</p> </li> </ul>"},{"location":"examples/4-schedules/4c-Tutorial_Scenario/#period-dependency","title":"Period Dependency\u00b6","text":"<p>As mentioned above, the period Dependency is set by declaring the <code>depends</code> keyword on the period instance whose start date depends on other period.</p> <p>The next example shows the definitions of two periods which one of them a probabilistic variable has been set.</p>"},{"location":"examples/4-schedules/4d-Tutorial_Wells/","title":"Forecast Scheduling - Wells and WellsGroup Classes","text":"In\u00a0[1]: Copied! <pre>import os\n\nfrom dcapy import dca\nfrom dcapy.schedule import Scenario, Period, Well, WellsGroup\nfrom dcapy.cashflow import CashFlowParams\n\nimport numpy as np \nimport pandas as pd\nfrom datetime import date, timedelta\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\nimport seaborn as sns\n</pre> import os  from dcapy import dca from dcapy.schedule import Scenario, Period, Well, WellsGroup from dcapy.cashflow import CashFlowParams  import numpy as np  import pandas as pd from datetime import date, timedelta import matplotlib.pyplot as plt import seaborn as sns  from scipy import stats import seaborn as sns <p>Create two scenarios by changing simple parameters that can be denominated as decision variables</p> In\u00a0[2]: Copied! <pre>#First Period First Scenario\n\np1a_dict = {\n    'name':'pdp',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.025,\n        'freq_di':'M',\n        'qi':1500,\n        'b':0,\n    },\n    'start':'2021-01-01',\n    'end':'2040-01-01',\n    'freq_output':'A',\n    'rate_limit': 300,\n    'cashflow_params':[\n        {\n            'name':'capex',\n            'value':{\n                'date':['2021-01-01'],\n                'value':[-5000000]\n                },\n            'target':'capex'\n        }\n    ]\n}\n\n#Second Period First Scenario\n\np2a_dict = {\n    'name':'pud',\n    'dca': {\n        'ti':'2022-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':3000,\n        'b':0,\n    },\n    'start':'2022-01-01',\n    'end':'2040-01-01',\n    'freq_output':'A',\n    'rate_limit': 100,\n    'depends':{'period':'pdp'},\n    'cashflow_params':[\n        {\n            'name':'wo',\n            'value':-500000,\n            'periods':1,\n            'target':'capex'\n        },\n        {\n            'name':'abandon',\n            'value':-300000,\n            'periods':-1,\n            'target':'capex'\n        },\n    ]\n}\ns1_dict = {\n    'name':'first',\n    'periods':[\n        p1a_dict,\n        p2a_dict\n    ],\n}\ns1 = Scenario(**s1_dict)\n</pre> #First Period First Scenario  p1a_dict = {     'name':'pdp',     'dca': {         'ti':'2021-01-01',         'di':0.025,         'freq_di':'M',         'qi':1500,         'b':0,     },     'start':'2021-01-01',     'end':'2040-01-01',     'freq_output':'A',     'rate_limit': 300,     'cashflow_params':[         {             'name':'capex',             'value':{                 'date':['2021-01-01'],                 'value':[-5000000]                 },             'target':'capex'         }     ] }  #Second Period First Scenario  p2a_dict = {     'name':'pud',     'dca': {         'ti':'2022-01-01',         'di':0.3,         'freq_di':'A',         'qi':3000,         'b':0,     },     'start':'2022-01-01',     'end':'2040-01-01',     'freq_output':'A',     'rate_limit': 100,     'depends':{'period':'pdp'},     'cashflow_params':[         {             'name':'wo',             'value':-500000,             'periods':1,             'target':'capex'         },         {             'name':'abandon',             'value':-300000,             'periods':-1,             'target':'capex'         },     ] } s1_dict = {     'name':'first',     'periods':[         p1a_dict,         p2a_dict     ], } s1 = Scenario(**s1_dict) In\u00a0[3]: Copied! <pre>#First Period Second Scenario\n\np1b_dict = {\n    'name':'pdp',\n    'dca': {\n        'ti':'2021-01-01',\n        'di':0.025,\n        'freq_di':'M',\n        'qi':1500,\n        'b':0,\n    },\n    'start':'2021-01-01',\n    'end':'2040-01-01',\n    'freq_output':'A',\n    'rate_limit': 700,\n    'cashflow_params':[\n        {\n            'name':'capex',\n            'value':{\n                'date':['2021-01-01'],\n                'value':[-6500000]\n                },\n            'target':'capex'\n        }\n    ]\n}\n\n#Second Period Second Escenario\n\np2b_dict = {\n    'name':'pud',\n    'dca': {\n        'ti':'2022-01-01',\n        'di':0.3,\n        'freq_di':'A',\n        'qi':3000,\n        'b':0,\n    },\n    'start':'2022-01-01',\n    'end':'2040-01-01',\n    'freq_output':'A',\n    'rate_limit': 100,\n    'depends':{'period':'pdp'},\n    'cashflow_params':[\n        {\n            'name':'wo',\n            'value':-50000,\n            'periods':1,\n            'target':'capex'\n        },\n        {\n            'name':'abandon',\n            'value':-300000,\n            'periods':-1,\n            'target':'capex'\n        },\n    ]\n}\n\ns2_dict = {\n    'name':'second',\n    'periods':[\n        p1b_dict,\n        p2b_dict\n    ],\n}\ns2 = Scenario(**s2_dict)\n</pre> #First Period Second Scenario  p1b_dict = {     'name':'pdp',     'dca': {         'ti':'2021-01-01',         'di':0.025,         'freq_di':'M',         'qi':1500,         'b':0,     },     'start':'2021-01-01',     'end':'2040-01-01',     'freq_output':'A',     'rate_limit': 700,     'cashflow_params':[         {             'name':'capex',             'value':{                 'date':['2021-01-01'],                 'value':[-6500000]                 },             'target':'capex'         }     ] }  #Second Period Second Escenario  p2b_dict = {     'name':'pud',     'dca': {         'ti':'2022-01-01',         'di':0.3,         'freq_di':'A',         'qi':3000,         'b':0,     },     'start':'2022-01-01',     'end':'2040-01-01',     'freq_output':'A',     'rate_limit': 100,     'depends':{'period':'pdp'},     'cashflow_params':[         {             'name':'wo',             'value':-50000,             'periods':1,             'target':'capex'         },         {             'name':'abandon',             'value':-300000,             'periods':-1,             'target':'capex'         },     ] }  s2_dict = {     'name':'second',     'periods':[         p1b_dict,         p2b_dict     ], } s2 = Scenario(**s2_dict) <p>There have been created two scenarios with more than one period where the dependency option have been set.</p> <p>There are capex and rate limit differences between the scenarios.</p> <p>As seen, there are different ways of creating the instances due to the versatility that Pydantic gives to not only to create but validate them. In this case, the cashflow parameters that applies for all the scenarios can be set once when creating the <code>Well</code> instance and passing a list <code>CashflowParams</code> directly.</p> In\u00a0[4]: Copied! <pre>well_1 = Well(\n    name = 'well_1',\n    scenarios = [s1,s2],\n    cashflow_params = [\n        CashFlowParams(\n            name = 'fix_opex',\n            value = -5000,   # 5 KUSD per well per month\n            freq_value = 'M',\n            target = 'opex',\n        ),\n        CashFlowParams(\n            name = 'var_opex',\n            value = -10,     # 10 USD per barrel of oil\n            multiply = 'oil_volume',\n            target = 'opex',\n        ),\n        CashFlowParams(\n            name = 'Sells',\n            value = 50,     # 50 USD per barrel of oil\n            multiply = 'oil_volume',\n            target = 'income',\n            wi = 0.94,\n        )\n    ]\n)\n\nprint(type(well_1))\n</pre> well_1 = Well(     name = 'well_1',     scenarios = [s1,s2],     cashflow_params = [         CashFlowParams(             name = 'fix_opex',             value = -5000,   # 5 KUSD per well per month             freq_value = 'M',             target = 'opex',         ),         CashFlowParams(             name = 'var_opex',             value = -10,     # 10 USD per barrel of oil             multiply = 'oil_volume',             target = 'opex',         ),         CashFlowParams(             name = 'Sells',             value = 50,     # 50 USD per barrel of oil             multiply = 'oil_volume',             target = 'income',             wi = 0.94,         )     ] )  print(type(well_1)) <pre>&lt;class 'dcapy.schedule.schedule.Well'&gt;\n</pre> <p>Generate Forecast and plot it!</p> In\u00a0[5]: Copied! <pre>well1_forecast = well_1.generate_forecast(freq_output='A')\n\n#Plot results by scenario\nsns.lineplot(data=well1_forecast, x=well1_forecast.index.to_timestamp(), y='oil_rate', hue='scenario')\n</pre> well1_forecast = well_1.generate_forecast(freq_output='A')  #Plot results by scenario sns.lineplot(data=well1_forecast, x=well1_forecast.index.to_timestamp(), y='oil_rate', hue='scenario') <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[5]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> <p>Generate Cashflows</p> In\u00a0[6]: Copied! <pre>well1_cashflow = well_1.generate_cashflow(freq_output='A')\nprint(len(well1_cashflow))\n</pre> well1_cashflow = well_1.generate_cashflow(freq_output='A') print(len(well1_cashflow)) <pre>2\n</pre> In\u00a0[7]: Copied! <pre>print(well1_cashflow[0].fcf())\n</pre> print(well1_cashflow[0].fcf()) <pre>      Sells_well_1-first-pdp  Sells_well_1-first-pud  total_income  \\\n2021            2.218737e+07            0.000000e+00  2.218737e+07   \n2022            1.927792e+07            0.000000e+00  1.927792e+07   \n2023            1.422205e+07            0.000000e+00  1.422205e+07   \n2024            1.050258e+07            0.000000e+00  1.050258e+07   \n2025            7.748154e+06            0.000000e+00  7.748154e+06   \n2026            6.566778e+06            2.223132e+07  2.879810e+07   \n2027            0.000000e+00            3.870068e+07  3.870068e+07   \n2028            0.000000e+00            2.869882e+07  2.869882e+07   \n2029            0.000000e+00            2.126061e+07  2.126061e+07   \n2030            0.000000e+00            1.572160e+07  1.572160e+07   \n2031            0.000000e+00            1.164684e+07  1.164684e+07   \n2032            0.000000e+00            8.636817e+06  8.636817e+06   \n2033            0.000000e+00            6.398312e+06  6.398312e+06   \n2034            0.000000e+00            4.731363e+06  4.731363e+06   \n2035            0.000000e+00            3.505080e+06  3.505080e+06   \n2036            0.000000e+00            2.599222e+06  2.599222e+06   \n2037            0.000000e+00            2.215218e+06  2.215218e+06   \n\n      fix_opex_well_1-first-pdp  var_opex_well_1-first-pdp  \\\n2021                   -60000.0              -4.720718e+06   \n2022                   -60000.0              -4.101685e+06   \n2023                   -60000.0              -3.025969e+06   \n2024                   -60000.0              -2.234592e+06   \n2025                   -60000.0              -1.648543e+06   \n2026                   -60000.0              -1.397187e+06   \n2027                        0.0               0.000000e+00   \n2028                        0.0               0.000000e+00   \n2029                        0.0               0.000000e+00   \n2030                        0.0               0.000000e+00   \n2031                        0.0               0.000000e+00   \n2032                        0.0               0.000000e+00   \n2033                        0.0               0.000000e+00   \n2034                        0.0               0.000000e+00   \n2035                        0.0               0.000000e+00   \n2036                        0.0               0.000000e+00   \n2037                        0.0               0.000000e+00   \n\n      fix_opex_well_1-first-pud  var_opex_well_1-first-pud    total_opex  \\\n2021                        0.0               0.000000e+00 -4.780718e+06   \n2022                        0.0               0.000000e+00 -4.161685e+06   \n2023                        0.0               0.000000e+00 -3.085969e+06   \n2024                        0.0               0.000000e+00 -2.294592e+06   \n2025                        0.0               0.000000e+00 -1.708543e+06   \n2026                   -60000.0              -4.730067e+06 -6.247254e+06   \n2027                   -60000.0              -8.234188e+06 -8.294188e+06   \n2028                   -60000.0              -6.106132e+06 -6.166132e+06   \n2029                   -60000.0              -4.523534e+06 -4.583534e+06   \n2030                   -60000.0              -3.345020e+06 -3.405020e+06   \n2031                   -60000.0              -2.478052e+06 -2.538052e+06   \n2032                   -60000.0              -1.837621e+06 -1.897621e+06   \n2033                   -60000.0              -1.361343e+06 -1.421343e+06   \n2034                   -60000.0              -1.006673e+06 -1.066673e+06   \n2035                   -60000.0              -7.457617e+05 -8.057617e+05   \n2036                   -60000.0              -5.530260e+05 -6.130260e+05   \n2037                   -60000.0              -4.713230e+05 -5.313230e+05   \n\n      capex_well_1-first-pdp  wo_well_1-first-pud  abandon_well_1-first-pud  \\\n2021              -5000000.0                  0.0                       0.0   \n2022                     0.0                  0.0                       0.0   \n2023                     0.0                  0.0                       0.0   \n2024                     0.0                  0.0                       0.0   \n2025                     0.0                  0.0                       0.0   \n2026                     0.0            -500000.0                       0.0   \n2027                     0.0                  0.0                       0.0   \n2028                     0.0                  0.0                       0.0   \n2029                     0.0                  0.0                       0.0   \n2030                     0.0                  0.0                       0.0   \n2031                     0.0                  0.0                       0.0   \n2032                     0.0                  0.0                       0.0   \n2033                     0.0                  0.0                       0.0   \n2034                     0.0                  0.0                       0.0   \n2035                     0.0                  0.0                       0.0   \n2036                     0.0                  0.0                       0.0   \n2037                     0.0                  0.0                 -300000.0   \n\n      total_capex           fcf       cum_fcf  \n2021   -5000000.0  1.240666e+07  1.240666e+07  \n2022          0.0  1.511623e+07  2.752289e+07  \n2023          0.0  1.113608e+07  3.865897e+07  \n2024          0.0  8.207992e+06  4.686697e+07  \n2025          0.0  6.039611e+06  5.290658e+07  \n2026    -500000.0  2.205084e+07  7.495742e+07  \n2027          0.0  3.040649e+07  1.053639e+08  \n2028          0.0  2.253269e+07  1.278966e+08  \n2029          0.0  1.667708e+07  1.445737e+08  \n2030          0.0  1.231658e+07  1.568903e+08  \n2031          0.0  9.108793e+06  1.659990e+08  \n2032          0.0  6.739197e+06  1.727382e+08  \n2033          0.0  4.976969e+06  1.777152e+08  \n2034          0.0  3.664690e+06  1.813799e+08  \n2035          0.0  2.699318e+06  1.840792e+08  \n2036          0.0  1.986196e+06  1.860654e+08  \n2037    -300000.0  1.383895e+06  1.874493e+08  \n</pre> In\u00a0[8]: Copied! <pre>fig, ax = plt.subplots(2,1, figsize=(10,15))\n\nwell1_cashflow[0].plot(ax=ax[0])\nwell1_cashflow[1].plot(ax=ax[1])\n\nax[0].set_title('First Scenario')\nax[0].set_title('Second Scenario')\n</pre>  fig, ax = plt.subplots(2,1, figsize=(10,15))  well1_cashflow[0].plot(ax=ax[0]) well1_cashflow[1].plot(ax=ax[1])  ax[0].set_title('First Scenario') ax[0].set_title('Second Scenario') <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n</pre> Out[8]: <pre>Text(0.5, 1.0, 'Second Scenario')</pre> In\u00a0[9]: Copied! <pre>well_1.npv([0.1], freq_rate='A', freq_cashflow='A')\n</pre> well_1.npv([0.1], freq_rate='A', freq_cashflow='A') Out[9]: npv iteration 0.1 1.110744e+08 0 0.1 1.184897e+08 1 In\u00a0[10]: Copied! <pre>well_1.npv([0.1], freq_rate='A', freq_cashflow='A').reset_index().to_dict()\n</pre> well_1.npv([0.1], freq_rate='A', freq_cashflow='A').reset_index().to_dict()  Out[10]: <pre>{'index': {0: 0.10000000000000009, 1: 0.10000000000000009},\n 'npv': {0: 111074433.96223314, 1: 118489715.93003416},\n 'iteration': {0: 0, 1: 1}}</pre> In\u00a0[11]: Copied! <pre>from dcapy.auth import Credential\n</pre> from dcapy.auth import Credential In\u00a0[12]: Copied! <pre>cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U')\n</pre> cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U') In\u00a0[13]: Copied! <pre>well_2 = Well(\n    name = 'well_1',\n    scenarios = [s1,s2],\n    cashflow_params = [\n        CashFlowParams(\n            name = 'fix_opex',\n            value = -5000,   # 5 KUSD per well per month\n            freq_value = 'M',\n            target = 'opex',\n        ),\n        CashFlowParams(\n            name = 'var_opex',\n            value = -10,     # 10 USD per barrel of oil\n            multiply = 'oil_volume',\n            target = 'opex',\n        ),\n        CashFlowParams(\n            name = 'Sells',\n            value = 50,     # 50 USD per barrel of oil\n            multiply = 'oil_volume',\n            target = 'income',\n            wi = 0.94,\n        )\n    ]\n)\nwell_2.insert_db(cred, 'well-Cash tutorial1')\n</pre> well_2 = Well(     name = 'well_1',     scenarios = [s1,s2],     cashflow_params = [         CashFlowParams(             name = 'fix_opex',             value = -5000,   # 5 KUSD per well per month             freq_value = 'M',             target = 'opex',         ),         CashFlowParams(             name = 'var_opex',             value = -10,     # 10 USD per barrel of oil             multiply = 'oil_volume',             target = 'opex',         ),         CashFlowParams(             name = 'Sells',             value = 50,     # 50 USD per barrel of oil             multiply = 'oil_volume',             target = 'income',             wi = 0.94,         )     ] ) well_2.insert_db(cred, 'well-Cash tutorial1') Out[13]: <pre>'1b1ecf58-e252-4ea0-9ac3-66bee10cc050'</pre> In\u00a0[14]: Copied! <pre>_ = well_2.generate_forecast()\n_ = well_2.generate_cashflow()\n</pre> _ = well_2.generate_forecast() _ = well_2.generate_cashflow() <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:245: RuntimeWarning: invalid value encountered in true_divide\n  (np.power(qi / rate, b) - 1)/(b * di)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> In\u00a0[15]: Copied! <pre>well_2.update_db(cred, description='well-Cash tutorial_update1')\n</pre> well_2.update_db(cred, description='well-Cash tutorial_update1') Out[15]: <pre>'1b1ecf58-e252-4ea0-9ac3-66bee10cc050'</pre> In\u00a0[16]: Copied! <pre>wd = Well()\n\nwd.get_db('1b1ecf58-e252-4ea0-9ac3-66bee10cc050',cred)\n</pre> wd = Well()  wd.get_db('1b1ecf58-e252-4ea0-9ac3-66bee10cc050',cred) In\u00a0[18]: Copied! <pre>type(wd)\n</pre> type(wd) Out[18]: <pre>dcapy.schedule.schedule.Well</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-schedules/4d-Tutorial_Wells/#forecast-scheduling-wells-and-wellsgroup-classes","title":"Forecast Scheduling - Wells and WellsGroup Classes\u00b6","text":"<p>To take advantage of the scheduling capabilities of covering Wells, Scenarios and peroduction periods, two additional classes must be introduced. Like <code>Scenario</code> class they are simple wrappers that allows to group multiple scenarios instances on a <code>Well</code> instances and multiple <code>Wells</code> into a <code>WellsGroup</code> Instance.</p>"},{"location":"examples/4-schedules/4e-Tutorial_WellsGroup_yml/","title":"Forecast Scheduling - WellsGroup Classes","text":"In\u00a0[6]: Copied! <pre>import pandas as pd \nimport numpy as np \nfrom dcapy import dca\nfrom dcapy.schedule import Well, Period, Scenario, WellsGroup,  model_from_dict\nfrom dcapy.cashflow import CashFlowParams, CashFlow\nfrom dcapy.wiener import Brownian, GeometricBrownian, MeanReversion\nfrom dcapy.auth import Credential\nimport seaborn as sns \nfrom datetime import date\nimport matplotlib.pyplot as plt\nimport copy\nimport yaml\nimport json\nfrom scipy import stats\n</pre> import pandas as pd  import numpy as np  from dcapy import dca from dcapy.schedule import Well, Period, Scenario, WellsGroup,  model_from_dict from dcapy.cashflow import CashFlowParams, CashFlow from dcapy.wiener import Brownian, GeometricBrownian, MeanReversion from dcapy.auth import Credential import seaborn as sns  from datetime import date import matplotlib.pyplot as plt import copy import yaml import json from scipy import stats In\u00a0[7]: Copied! <pre>cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U')\n</pre> cred = Credential(token='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTI2NTk3fQ.n3HuheJvoQKF9RNKTC9gEstC449EWd2qsrWR7f30V2U') <p>In a file called <code>YML_example1.yml</code> is a WellsGroup case where are defined 6 wells. Four of them have one scenario and others two have two scenarios with two Periods.</p> <pre>name: fdp_field\nwells:\nDC2:\nname: DC2\nscenarios:\nbase:\nname: base\nperiods:\npdp:\ndca:\nbsw: 0.9783\nfluid_rate: 5192.343117182031\nslope: 3.986053847389352e-05\nti: '2021-04-01'\nend: '2030-12-31'\nfreq_input: D\nfreq_output: D\nname: pdp\nstart: '2021-04-01'\nrate_limit: 50\ncashflow_params:\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\nDC3:\nname: DC3\nscenarios:\nbase:\nname: base\nperiods:\npdp:\ndca:\nbsw: 0.8935\nfluid_rate: 3101.6068269182692\nslope: 1.1341265851141962e-05\nti: '2021-04-01'\nend: '2030-12-31'\nfreq_input: D\nfreq_output: D\nname: pdp\nstart: '2021-04-01'\nrate_limit: 50\ncashflow_params:\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\nDC4:\nname: DC4\nscenarios:\nbase:\nname: base\nperiods:\npdp:\ndca:\nbsw: 0.9863\nfluid_rate: 7304.560639994402\nslope: 4.086888672335466e-05\nti: '2021-04-01'\nend: '2030-12-31'\nfreq_input: D\nfreq_output: D\nname: pdp\nstart: '2021-04-01'\nrate_limit: 50\ncashflow_params:\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\nDC5:\nname: DC5\nscenarios:\nbase:\nname: base\nperiods:\npdp:\ndca:\nbsw: 0.9648\nfluid_rate: 5710.712047244095\nslope: 1.9260822570459275e-05\nti: '2021-04-01'\nend: '2030-12-31'\nfreq_input: D\nfreq_output: D\nname: pdp\nstart: '2020-04-01'\nrate_limit: 50\ncashflow_params:\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\nwell-1:\nname: well-1\nscenarios:\nhighfr:\nname: highfr\nperiods:\nfm1:\ncashflow_params:\n- name: capex\nperiods: 1\ntarget: capex\nvalue: -4000000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 6500.0\nslope:\n- 3.0e-05\nti: '2022-01-01'\nend: '2027-01-01'\nname: fm1\nrate_limit: 200.0\nstart: '2022-01-01'\nfm2:\ncashflow_params:\n- name: capex_wo\nperiods: 1\ntarget: capex\nvalue: -600000.0\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 6500.0\nslope:\n- 5.0e-05\nti: '2022-01-01'\ndepends:\nperiod: fm1\nend: '2030-01-01'\nname: fm2\nstart: '2022-01-01'\nmediumfr:\nname: mediumfr\nperiods:\nfm1:\ncashflow_params:\n- name: capex_drill\nperiods: 1\ntarget: capex\nvalue: -4000000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 3500.0\nslope:\n- 3.0e-06\nti: '2022-01-01'\nend: '2030-01-01'\nname: fm1\nrate_limit: 200.0\nstart: '2022-01-01'\nfm2:\ncashflow_params:\n- name: capex_wo\nperiods: 1\ntarget: capex\nvalue: -600000.0\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 2500.0\nslope:\n- 5.0e-06\nti: '2022-01-01'\ndepends:\nperiod: fm1\nend: '2030-01-01'\nname: fm2\nstart: '2022-01-01'\nwell-2:\nname: well-2\nscenarios:\nhighfr:\nname: highfr\nperiods:\nfm2:\ncashflow_params:\n- name: capex_drill\nperiods: 1\ntarget: capex\nvalue: -4000000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 6500.0\nslope:\n- 5.0e-05\nti: '2022-01-01'\nend: '2030-01-01'\nname: fm2\nrate_limit: 200.0\nstart: '2022-01-01'\nfm1:\ncashflow_params:\n- name: capex_wo\nperiods: 1\ntarget: capex\nvalue: -600000.0\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 6500.0\nslope:\n- 3.0e-05\nti: '2022-01-01'\ndepends:\nperiod: fm2\nend: '2030-01-01'\nname: fm1\nstart: '2022-01-01'\nmediumfr:\nname: mediumfr\nperiods:\nfm2:\ncashflow_params:\n- name: capex_drill\nperiods: 1\ntarget: capex\nvalue: -4000000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 2500.0\nslope:\n- 5.0e-06\nti: '2022-01-01'\nend: '2030-01-01'\nname: fm2\nrate_limit: 200.0\nstart: '2022-01-01'\nfm1:\ncashflow_params:\n- name: capex_wo\nperiods: 1\ntarget: capex\nvalue: -600000.0\n- name: capex_abandon\nperiods: -1\ntarget: capex\nvalue: -200000.0\ndca:\nbsw:\ndist: uniform\nkw:\nloc: 0.4\nscale: 0.4\nfluid_rate: 3500.0\nslope:\n- 3.0e-06\nti: '2022-01-01'\ndepends:\nperiod: fm2\nend: '2030-01-01'\nname: fm1\nstart: '2022-01-01'\ncashflow_params:\n- name: fix_opex\ntarget: opex\nvalue: -11000.\nfreq_value: 'M'\n- iter: 1\nmultiply: oil_volume\nname: var_opex\ntarget: opex\nvalue: -8.0\n- multiply: oil_volume\nname: income\ntarget: income\nvalue: initial_condition: 60 ti: '2021-04-01'\nsteps: 11\ngenerator:\ndist: norm\nkw:\nloc: 0.\nscale: 13.13\nm: 46.77\neta: 0.112653 freq_input: A\nwi: 0.92\n- name: buy\nperiods: 1\ntarget: capex\nvalue: -15500000\ngeneral: True\nseed: 21\n</pre> <p>By using a YML parser like PyYAML you can convery a *.yml file into a python dictionary.</p> In\u00a0[8]: Copied! <pre>with open('YML_example1.yml','r') as file:\n    case_dict = yaml.load(file)\n</pre> with open('YML_example1.yml','r') as file:     case_dict = yaml.load(file) <pre>&lt;ipython-input-8-33d4e64ac547&gt;:2: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\n  case_dict = yaml.load(file)\n</pre> <p>The resulting dictionary, if it has valid values for key arguments, can be passed to a <code>WellsGroup</code> directly as made before on the others Schedule Classes</p> In\u00a0[9]: Copied! <pre>case = WellsGroup(**case_dict)\n\nprint(type(case))\n</pre> case = WellsGroup(**case_dict)  print(type(case)) <pre>&lt;class 'dcapy.schedule.schedule.WellsGroup'&gt;\n</pre> <p><code>WellsGroup</code> has a method to make the all the factorial combinations of wells scenarios. By calling it with no arguments it creates a full-factorial combinations.</p> In\u00a0[10]: Copied! <pre>case.insert_db(cred, description='Wellsgroup2')\n</pre> case.insert_db(cred, description='Wellsgroup2') Out[10]: <pre>'5f625d24-517d-4890-8067-f8e4da41f779'</pre> In\u00a0[11]: Copied! <pre>case.update_db(cred, description='Tutorial-Wellsgroup')\n</pre> case.update_db(cred, description='Tutorial-Wellsgroup') Out[11]: <pre>'5f625d24-517d-4890-8067-f8e4da41f779'</pre> In\u00a0[13]: Copied! <pre>cased = WellsGroup()\n\ncased.get_db(\"5f625d24-517d-4890-8067-f8e4da41f779\",cred)\n</pre> cased = WellsGroup()  cased.get_db(\"5f625d24-517d-4890-8067-f8e4da41f779\",cred) In\u00a0[15]: Copied! <pre>type(cased)\n</pre> type(cased) Out[15]: <pre>dcapy.schedule.schedule.WellsGroup</pre> In\u00a0[16]: Copied! <pre>case.tree()\n</pre> case.tree() Out[16]: <pre>\ud83c\udfedfdp_field                                                                                  \n\u2523\u2501\u2501 \ud83d\uddfcDC2                                                                                    \n\u2503   \u2517\u2501\u2501 \ud83d\udd00base                                                                               \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9pdp                                                                            \n\u2523\u2501\u2501 \ud83d\uddfcDC3                                                                                    \n\u2503   \u2517\u2501\u2501 \ud83d\udd00base                                                                               \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9pdp                                                                            \n\u2523\u2501\u2501 \ud83d\uddfcDC4                                                                                    \n\u2503   \u2517\u2501\u2501 \ud83d\udd00base                                                                               \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9pdp                                                                            \n\u2523\u2501\u2501 \ud83d\uddfcDC5                                                                                    \n\u2503   \u2517\u2501\u2501 \ud83d\udd00base                                                                               \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9pdp                                                                            \n\u2523\u2501\u2501 \ud83d\uddfcwell-1                                                                                 \n\u2503   \u2523\u2501\u2501 \ud83d\udd00highfr                                                                             \n\u2503   \u2503   \u2523\u2501\u2501 \ud83d\udcc9fm1                                                                            \n\u2503   \u2503   \u2517\u2501\u2501 \ud83d\udcc9fm2                                                                            \n\u2503   \u2517\u2501\u2501 \ud83d\udd00mediumfr                                                                           \n\u2503       \u2523\u2501\u2501 \ud83d\udcc9fm1                                                                            \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9fm2                                                                            \n\u2517\u2501\u2501 \ud83d\uddfcwell-2                                                                                 \n    \u2523\u2501\u2501 \ud83d\udd00highfr                                                                             \n    \u2503   \u2523\u2501\u2501 \ud83d\udcc9fm2                                                                            \n    \u2503   \u2517\u2501\u2501 \ud83d\udcc9fm1                                                                            \n    \u2517\u2501\u2501 \ud83d\udd00mediumfr                                                                           \n        \u2523\u2501\u2501 \ud83d\udcc9fm2                                                                            \n        \u2517\u2501\u2501 \ud83d\udcc9fm1                                                                            \n</pre> In\u00a0[17]: Copied! <pre>sc = case.scenarios_maker()\nsc\n</pre> sc = case.scenarios_maker() sc Out[17]: <pre>[{'DC2': ['base'],\n  'DC3': ['base'],\n  'DC4': ['base'],\n  'DC5': ['base'],\n  'well-1': ['highfr'],\n  'well-2': ['highfr']},\n {'DC2': ['base'],\n  'DC3': ['base'],\n  'DC4': ['base'],\n  'DC5': ['base'],\n  'well-1': ['mediumfr'],\n  'well-2': ['highfr']},\n {'DC2': ['base'],\n  'DC3': ['base'],\n  'DC4': ['base'],\n  'DC5': ['base'],\n  'well-1': ['highfr'],\n  'well-2': ['mediumfr']},\n {'DC2': ['base'],\n  'DC3': ['base'],\n  'DC4': ['base'],\n  'DC5': ['base'],\n  'well-1': ['mediumfr'],\n  'well-2': ['mediumfr']}]</pre> <p>When the reduced key argument is set, it triggers the Generalized Subset Designed (GSD) (Well explained on PyDOE2 Documentation).</p> In\u00a0[18]: Copied! <pre>fwn= case.generate_forecast(wells=sc[3],freq_output='A',iter=50, seed=21)\n\n#fwn\nsns.lineplot(data=fwn, x=fwn.index.to_timestamp(), y='oil_rate', hue='well',style='scenario',palette='crest')\n</pre> fwn= case.generate_forecast(wells=sc[3],freq_output='A',iter=50, seed=21)  #fwn sns.lineplot(data=fwn, x=fwn.index.to_timestamp(), y='oil_rate', hue='well',style='scenario',palette='crest')  Out[18]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[19]: Copied! <pre>#cwn= lp.generate_cashflow(wells={'well-1':['mediumfr'],'well-2':['mediumfr']},freq_output='A')\ncwn= case.generate_cashflow(wells=sc[3],freq_output='A')\nprint(len(cwn))\n</pre> #cwn= lp.generate_cashflow(wells={'well-1':['mediumfr'],'well-2':['mediumfr']},freq_output='A') cwn= case.generate_cashflow(wells=sc[3],freq_output='A') print(len(cwn)) <pre>50\n</pre> <p>Notice that the resulting cashflow for the third scenario is a list of 50 <code>CashflowModel</code> due to the <code>iter</code> key argument was set with this number. What it does is to generate 50 samples of the probabilistic varibales if they exist in the scenarios and broadcast results with the scenarios that does not have any probabilistic variables.</p> <p>Let's see the first cashflow model</p> In\u00a0[20]: Copied! <pre>fcf_0= cwn[30].fcf()\n\n#Show cashflows in Millons of dollars\nprint(fcf_0.multiply(1e-6).round(2))\n</pre> fcf_0= cwn[30].fcf()  #Show cashflows in Millons of dollars print(fcf_0.multiply(1e-6).round(2)) <pre>      income_fdp_field-DC2-base-pdp  income_fdp_field-DC3-base-pdp  \\\n2021                           1.12                           3.53   \n2022                           0.02                           2.48   \n2023                           0.00                           1.99   \n2024                           0.00                           1.08   \n2025                           0.00                           0.53   \n2026                           0.00                           0.00   \n2027                           0.00                           0.00   \n2028                           0.00                           0.00   \n2029                           0.00                           0.00   \n2030                           0.00                           0.00   \n\n      income_fdp_field-DC4-base-pdp  income_fdp_field-DC5-base-pdp  \\\n2021                           0.95                           2.09   \n2022                           0.00                           1.44   \n2023                           0.00                           0.53   \n2024                           0.00                           0.00   \n2025                           0.00                           0.00   \n2026                           0.00                           0.00   \n2027                           0.00                           0.00   \n2028                           0.00                           0.00   \n2029                           0.00                           0.00   \n2030                           0.00                           0.00   \n\n      income_fdp_field-well-1-mediumfr-fm1  \\\n2021                                  0.00   \n2022                                 30.59   \n2023                                 18.09   \n2024                                 11.99   \n2025                                  6.87   \n2026                                  4.20   \n2027                                  0.00   \n2028                                  0.00   \n2029                                  0.00   \n2030                                  0.00   \n\n      income_fdp_field-well-1-mediumfr-fm2  \\\n2021                                  0.00   \n2022                                  0.00   \n2023                                  0.00   \n2024                                  0.00   \n2025                                  0.00   \n2026                                 20.77   \n2027                                  8.38   \n2028                                  4.40   \n2029                                  3.04   \n2030                                  0.00   \n\n      income_fdp_field-well-2-mediumfr-fm2  \\\n2021                                  0.00   \n2022                                 20.56   \n2023                                 11.29   \n2024                                  5.92   \n2025                                  0.00   \n2026                                  0.00   \n2027                                  0.00   \n2028                                  0.00   \n2029                                  0.00   \n2030                                  0.00   \n\n      income_fdp_field-well-2-mediumfr-fm1  total_income  \\\n2021                                  0.00          7.69   \n2022                                  0.00         55.09   \n2023                                  0.00         31.90   \n2024                                 35.99         54.98   \n2025                                 14.48         21.88   \n2026                                 10.07         35.04   \n2027                                  6.28         14.66   \n2028                                  4.10          8.50   \n2029                                  3.22          6.26   \n2030                                  0.00          0.01   \n\n      fix_opex_fdp_field-DC2-base-pdp  ...  \\\n2021                            -0.13  ...   \n2022                            -0.13  ...   \n2023                             0.00  ...   \n2024                             0.00  ...   \n2025                             0.00  ...   \n2026                             0.00  ...   \n2027                             0.00  ...   \n2028                             0.00  ...   \n2029                             0.00  ...   \n2030                             0.00  ...   \n\n      capex_drill_fdp_field-well-1-mediumfr-fm1  \\\n2021                                        0.0   \n2022                                       -4.0   \n2023                                        0.0   \n2024                                        0.0   \n2025                                        0.0   \n2026                                        0.0   \n2027                                        0.0   \n2028                                        0.0   \n2029                                        0.0   \n2030                                        0.0   \n\n      capex_wo_fdp_field-well-1-mediumfr-fm2  \\\n2021                                     0.0   \n2022                                     0.0   \n2023                                     0.0   \n2024                                     0.0   \n2025                                     0.0   \n2026                                    -0.6   \n2027                                     0.0   \n2028                                     0.0   \n2029                                     0.0   \n2030                                     0.0   \n\n      capex_abandon_fdp_field-well-1-mediumfr-fm2  \\\n2021                                          0.0   \n2022                                          0.0   \n2023                                          0.0   \n2024                                          0.0   \n2025                                          0.0   \n2026                                          0.0   \n2027                                          0.0   \n2028                                          0.0   \n2029                                          0.0   \n2030                                         -0.2   \n\n      capex_drill_fdp_field-well-2-mediumfr-fm2  \\\n2021                                        0.0   \n2022                                       -4.0   \n2023                                        0.0   \n2024                                        0.0   \n2025                                        0.0   \n2026                                        0.0   \n2027                                        0.0   \n2028                                        0.0   \n2029                                        0.0   \n2030                                        0.0   \n\n      capex_wo_fdp_field-well-2-mediumfr-fm1  \\\n2021                                     0.0   \n2022                                     0.0   \n2023                                     0.0   \n2024                                    -0.6   \n2025                                     0.0   \n2026                                     0.0   \n2027                                     0.0   \n2028                                     0.0   \n2029                                     0.0   \n2030                                     0.0   \n\n      capex_abandon_fdp_field-well-2-mediumfr-fm1   buy  total_capex    fcf  \\\n2021                                          0.0 -15.5        -15.7  -9.65   \n2022                                          0.0   0.0         -8.2  40.27   \n2023                                          0.0   0.0         -0.2  28.19   \n2024                                          0.0   0.0         -0.6  48.86   \n2025                                          0.0   0.0         -0.2  18.78   \n2026                                          0.0   0.0         -0.6  30.34   \n2027                                          0.0   0.0          0.0  12.57   \n2028                                          0.0   0.0          0.0   6.97   \n2029                                          0.0   0.0          0.0   5.02   \n2030                                         -0.2   0.0         -0.4  -0.66   \n\n      cum_fcf  \n2021    -9.65  \n2022    30.62  \n2023    58.81  \n2024   107.67  \n2025   126.45  \n2026   156.79  \n2027   169.36  \n2028   176.33  \n2029   181.35  \n2030   180.69  \n\n[10 rows x 40 columns]\n</pre> <p>Here there are two additional features in the Cashflow Parameter definition.</p> <ol> <li>If you want to assign an additional Capex to the project that does not assigned to a single well but the case itself, for example a Purchase price, infraestructure investment, etc..., you can declare a <code>CashFlowParam</code> with the key argument <code>general</code> set to True. What it does is not to pass the cashflow parameter to each well instead make a general cashflow for the model.</li> </ol> In\u00a0[21]: Copied! <pre>case.cashflow_params[3]\n</pre> case.cashflow_params[3] Out[21]: <pre>CashFlowParams(name='buy', wi=1.0, periods=1, value=-15500000.0, target=&lt;TargetEnum.capex: 'capex'&gt;, multiply=None, agg='mean', depends=False, iter=1, general=True, freq_value=None)</pre> <ol> <li>The income cashflow_param is a Wiener Class, especifically a <code>MeanReversion</code> instance. In this case the Oil Price is modeled by the Mean Reversion Model which gives a different time series on each of the 50 iterations.</li> </ol> In\u00a0[22]: Copied! <pre>case.cashflow_params[2]\n</pre> case.cashflow_params[2] Out[22]: <pre>CashFlowParams(name='income', wi=0.92, periods=None, value=MeanReversion(initial_condition=60.0, ti=datetime.date(2021, 4, 1), steps=11, processes=1, generator=ProbVar(dist='norm', kw={'loc': 0.0, 'scale': 13.13}, factor=1.0, seed=None), freq_input=&lt;FreqEnum.A: 'A'&gt;, freq_output='D', m=46.77, eta=0.112653), target=&lt;TargetEnum.income: 'income'&gt;, multiply='oil_volume', agg='mean', depends=False, iter=1, general=False, freq_value=None)</pre> <p>The next plot shows what could be the oil price iterations for the 50 cases</p> In\u00a0[23]: Copied! <pre>oil_price_model = MeanReversion(\n    initial_condition = 66,\n    ti = date(2021,1,1),\n    generator = {'dist':'norm','kw':{'loc':0,'scale':5.13}},\n    m=46.77,\n    eta=0.112652,\n    freq_input = 'A'\n)\noil_price = oil_price_model.generate(12,50, freq_output='A', seed=21)\n\noil_price.plot(legend=False)\n</pre> oil_price_model = MeanReversion(     initial_condition = 66,     ti = date(2021,1,1),     generator = {'dist':'norm','kw':{'loc':0,'scale':5.13}},     m=46.77,     eta=0.112652,     freq_input = 'A' ) oil_price = oil_price_model.generate(12,50, freq_output='A', seed=21)  oil_price.plot(legend=False) Out[23]: <pre>&lt;AxesSubplot:&gt;</pre> <p>Get the Net present value for the 50 cases. Plot the distribution of the scenarios</p> In\u00a0[24]: Copied! <pre>npv = case.npv([0.15], freq_rate='A', freq_cashflow='A')/1e6\n\nprint(npv['npv'].quantile([0.1,0.5,0.9]))\n\nsns.displot(npv['npv'].values, kde=True)\n</pre> npv = case.npv([0.15], freq_rate='A', freq_cashflow='A')/1e6  print(npv['npv'].quantile([0.1,0.5,0.9]))  sns.displot(npv['npv'].values, kde=True) <pre>0.1    23.561044\n0.5    59.131838\n0.9    95.542097\nName: npv, dtype: float64\n</pre> Out[24]: <pre>&lt;seaborn.axisgrid.FacetGrid at 0x7f47ff6ef580&gt;</pre> <p>Plot any of the cases</p> In\u00a0[25]: Copied! <pre>cwn[38].plot(cum=True,format='m')\n</pre> cwn[38].plot(cum=True,format='m') <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:351: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/cashflow/cashflow.py:359: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> In\u00a0[26]: Copied! <pre>with open('YML_example1.yml','r') as file:\n    case_dict = yaml.load(file)\n\nlp = WellsGroup(**case_dict)\n</pre> with open('YML_example1.yml','r') as file:     case_dict = yaml.load(file)  lp = WellsGroup(**case_dict) <pre>&lt;ipython-input-26-ebe3c98787ec&gt;:2: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.\n  case_dict = yaml.load(file)\n</pre> In\u00a0[27]: Copied! <pre>fwn= lp.generate_forecast(wells=sc[3],freq_output='A',iter=2, seed=21)\n\ncwn= lp.generate_cashflow(wells=sc[3],freq_output='A')\n</pre> fwn= lp.generate_forecast(wells=sc[3],freq_output='A',iter=2, seed=21)  cwn= lp.generate_cashflow(wells=sc[3],freq_output='A') In\u00a0[28]: Copied! <pre>cwn[0].fcf()['cum_fcf'].values\n</pre> cwn[0].fcf()['cum_fcf'].values Out[28]: <pre>array([-9.65263710e+06,  2.09036981e+07,  4.34884735e+07,  7.09743677e+07,\n        8.67308430e+07,  9.95260309e+07,  1.05163157e+08,  1.08640398e+08,\n        1.13126400e+08,  1.12473869e+08])</pre> In\u00a0[29]: Copied! <pre>npv_list = []\nfor i,s in enumerate(sc):\n\n    fwn = case.generate_forecast(wells=s,freq_output='A',iter=50, seed=21)\n    cwn = case.generate_cashflow(wells=s,freq_output='A')\n\n    npv = case.npv([0.15], freq_rate='A', freq_cashflow='A')/1e6\n    npv['sc'] = i\n    npv_list.append(npv)\n\n    npv_df = pd.concat(npv_list, axis=0)\n    print(npv['npv'].quantile([0.1,0.5,0.9]))\nsns.displot(npv_df, x='npv', hue='sc', multiple=\"stack\")\n</pre> npv_list = [] for i,s in enumerate(sc):      fwn = case.generate_forecast(wells=s,freq_output='A',iter=50, seed=21)     cwn = case.generate_cashflow(wells=s,freq_output='A')      npv = case.npv([0.15], freq_rate='A', freq_cashflow='A')/1e6     npv['sc'] = i     npv_list.append(npv)      npv_df = pd.concat(npv_list, axis=0)     print(npv['npv'].quantile([0.1,0.5,0.9])) sns.displot(npv_df, x='npv', hue='sc', multiple=\"stack\")    <pre>0.1   -4.309976\n0.5    3.403842\n0.9    9.881238\nName: npv, dtype: float64\n0.1    10.255532\n0.5    30.245220\n0.9    52.281651\nName: npv, dtype: float64\n0.1     9.219426\n0.5    30.774217\n0.9    52.175129\nName: npv, dtype: float64\n0.1    23.561044\n0.5    59.131838\n0.9    95.542097\nName: npv, dtype: float64\n</pre> Out[29]: <pre>&lt;seaborn.axisgrid.FacetGrid at 0x7f4802035d00&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/4-schedules/4e-Tutorial_WellsGroup_yml/#forecast-scheduling-wellsgroup-classes","title":"Forecast Scheduling - WellsGroup Classes\u00b6","text":"<p><code>WellsGroup</code> class in the one on top of the others. You can specify a group of <code>Well</code> instances that, as seen before, each of them can be groups of scenarios and periods.</p> <p><code>WellsGroup</code> has different functionality when evaluating it. Each <code>Well</code> part of this have n scenarios which are independent to each other, so if you would like to evaluate all scenarios in all wells you would have to sample one scenario per well and build all the possible combinations. To do this, <code>Dcapy</code> uses the functions of PyDOE2 to generate factorial designs either full-factorial (fullfact) or Generalized Subset Designs (gds).</p> <p>On the other hand, in this notebook is applied another convinient way of creating a dca model, which is by providing a yml file.</p>"},{"location":"examples/4-schedules/4e-Tutorial_WellsGroup_yml/#get-the-tree-schema","title":"Get the tree Schema\u00b6","text":""},{"location":"examples/4-schedules/4e-Tutorial_WellsGroup_yml/#generate-forecast","title":"Generate Forecast.\u00b6","text":"<p>Those scenarios are a list of dictionary ready to be passed to <code>generate_forecast</code> method.</p>"},{"location":"examples/4-schedules/4e-Tutorial_WellsGroup_yml/#generate-cashflow","title":"Generate Cashflow\u00b6","text":"<p>Once a forecast is generated the <code>generate_cashflow</code> method can be called</p>"},{"location":"examples/4-schedules/export_rich_html/","title":"Export rich html","text":"In\u00a0[\u00a0]: Copied! <pre>from dcapy.schedule import WellsGroup\nimport yaml\nfrom rich.console import Console\nconsole = Console(record=True)\nwith open('YML_example1.yml','r') as file:\n\tcase_dict = yaml.load(file)\n</pre> from dcapy.schedule import WellsGroup import yaml from rich.console import Console console = Console(record=True) with open('YML_example1.yml','r') as file: \tcase_dict = yaml.load(file) In\u00a0[\u00a0]: Copied! <pre>case = WellsGroup(**case_dict)\nconsole.print(case.tree())\nconsole.print(case.wells['well-2'].layout())\nconsole.save_html('test_export.html')\n</pre> case = WellsGroup(**case_dict) console.print(case.tree()) console.print(case.wells['well-2'].layout()) console.save_html('test_export.html')"},{"location":"examples/5-CloudAPI/5a-CloudAPI/","title":"Heroku - Cloud API","text":"In\u00a0[1]: Copied! <pre>from dcapy.schedule import Period\nfrom dcapy.dca import Arps\nfrom dcapy.auth import Credential\nfrom datetime import date\n</pre> from dcapy.schedule import Period from dcapy.dca import Arps from dcapy.auth import Credential from datetime import date <p>First Create a <code>Credential</code> instance with a token given when the user log in on https://dcapyapi.herokuapp.com/admin/login</p> In\u00a0[2]: Copied! <pre>token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTgyMTg1fQ.VQNueiQHD0cdBlhiNP0UoroLI8KjU55JhDScal0fkCg'\n\ncred = Credential(token = token)\n</pre> token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImIyZDQ5NjMyLWM0MzEtNDAzYi04OTEyLTJiZGIyOTA3NTMxNCIsIm5hbWUiOiJTYW50aWFnbyIsImxhc3RfbmFtZSI6IkN1ZXJ2byIsInVzZXJuYW1lIjoic2N1ZXJ2bzkxIiwiZXhwIjoxNjI2OTgyMTg1fQ.VQNueiQHD0cdBlhiNP0UoroLI8KjU55JhDScal0fkCg'  cred = Credential(token = token) <p>Now let's create a simple <code>Period</code> model</p> In\u00a0[2]: Copied! <pre>dec_model = Arps(\n    ti = date(2021,1,1),\n    di = 0.3,\n    freq_di = 'A',\n    qi = [80,100],\n    b = 0,\n    fluid_rate = 250\n)\n\np1 = Period(\n    name = 'Period-1908',\n    dca = dec_model,\n    start = date(2021,1,1),\n    end = date(2021,6,1),\n    freq_output='M'\n)\n</pre> dec_model = Arps(     ti = date(2021,1,1),     di = 0.3,     freq_di = 'A',     qi = [80,100],     b = 0,     fluid_rate = 250 )  p1 = Period(     name = 'Period-1908',     dca = dec_model,     start = date(2021,1,1),     end = date(2021,6,1),     freq_output='M' )  <p>Check the object created</p> In\u00a0[4]: Copied! <pre>print(type(p1))\nprint(p1.json(exclude_none=True,indent=2))\n</pre> print(type(p1)) print(p1.json(exclude_none=True,indent=2)) <pre>&lt;class 'dcapy.schedule.schedule.Period'&gt;\n{\n  \"name\": \"Period-1908\",\n  \"iter\": 1,\n  \"dca\": {\n    \"qi\": [\n      80.0,\n      100.0\n    ],\n    \"di\": 0.3,\n    \"b\": 0.0,\n    \"ti\": \"2021-01-01\",\n    \"freq_di\": \"A\",\n    \"fluid_rate\": 250.0\n  },\n  \"start\": \"2021-01-01\",\n  \"end\": \"2021-06-01\",\n  \"freq_input\": \"D\",\n  \"freq_output\": \"M\",\n  \"type\": \"period\"\n}\n</pre> In\u00a0[5]: Copied! <pre>p1.to_file('Period1')\np1.to_file('Period2')\n</pre> p1.to_file('Period1') p1.to_file('Period2') In\u00a0[8]: Copied! <pre>p1.json(exclude_unset=True)\n</pre> p1.json(exclude_unset=True) Out[8]: <pre>'{\"name\": \"Period-1908\", \"dca\": {\"qi\": [80.0, 100.0], \"di\": 0.3, \"b\": 0.0, \"ti\": \"2021-01-01\", \"freq_di\": \"A\", \"fluid_rate\": 250.0}, \"start\": \"2021-01-01\", \"end\": \"2021-06-01\", \"freq_output\": \"M\"}'</pre> <p>By calling a the method <code>insert_db</code> and providing the crededentials and a description the user can save the model on the cloud. It is highly recommended to write some description of the models to later identify them. If the operation is sucessfully, it returns an unique key that identify the model.</p> In\u00a0[5]: Copied! <pre>p1.insert_db(cred, description='Test_Tutorial_Period')\n</pre> p1.insert_db(cred, description='Test_Tutorial_Period') Out[5]: <pre>'c331945f-b1ea-4fb2-bb79-57d40a345427'</pre> <p>You don't have to memorize the key, it is saved on the attribute <code>id</code> of the model</p> In\u00a0[6]: Copied! <pre>p1.id\n</pre> p1.id Out[6]: <pre>'c331945f-b1ea-4fb2-bb79-57d40a345427'</pre> <p>If you want to check the user models saved on the cloud, call the credential method <code>get_models_info</code></p> In\u00a0[3]: Copied! <pre>cred.get_models_info()\n</pre> cred.get_models_info() Out[3]: id created_at modified_at type description 0 87f1fe6a-1aa7-4d7f-a130-80ec0bf78fa0 2021-07-01 22:46:58.411024+00:00 2021-07-01 22:46:58.411071+00:00 period Period-Cash tutorial 1 f1191ba8-9082-4104-9079-9c3c5747e96c 2021-07-01 22:55:51.386600+00:00 2021-07-01 22:55:51.386648+00:00 scenario Scenario-Cash tutorial 2 eee95d1f-dee3-40e0-a1a7-800f83e3d7a1 2021-07-02 00:09:54.352606+00:00 2021-07-02 00:09:54.352675+00:00 well well-Cash tutorial 3 f066f385-c108-4c7b-8e79-2a55c9301d72 2021-07-02 00:14:51.151289+00:00 2021-07-02 00:14:51.151313+00:00 wellsgroup Tutorial-Wellsgroup 4 c6e698a3-cc55-4805-ad38-1027f4001951 2021-07-21 02:23:24.856509+00:00 2021-07-21 02:23:24.856551+00:00 well well-Cash tutorial_update 5 65f4790e-a515-4a14-bb12-9109010ed5e9 2021-07-22 03:34:15.472286+00:00 2021-07-22 03:34:15.472329+00:00 period Period-Cash tutorial1 6 01de434e-d393-4f3e-8ecf-98e86b4dd39c 2021-07-22 03:37:42.568885+00:00 2021-07-22 03:37:42.568928+00:00 scenario Scenario-Cash tutorial 7 1b1ecf58-e252-4ea0-9ac3-66bee10cc050 2021-07-22 03:41:04.218514+00:00 2021-07-22 03:41:04.218567+00:00 well well-Cash tutorial_update1 8 5f625d24-517d-4890-8067-f8e4da41f779 2021-07-22 03:44:05.168659+00:00 2021-07-22 03:44:05.168703+00:00 wellsgroup Tutorial-Wellsgroup 9 c331945f-b1ea-4fb2-bb79-57d40a345427 2021-07-22 04:32:42.161613+00:00 2021-07-22 04:32:42.161652+00:00 period Test_Tutorial_Period <p>The row #9 containst the information of the model that was just created.</p> <p>You can also get only the <code>Periods</code> Model</p> In\u00a0[9]: Copied! <pre>cred.get_models_info(schema='period')\n</pre> cred.get_models_info(schema='period') Out[9]: id created_at modified_at type description 0 87f1fe6a-1aa7-4d7f-a130-80ec0bf78fa0 2021-07-01 22:46:58.411024+00:00 2021-07-01 22:46:58.411071+00:00 period Period-Cash tutorial 1 65f4790e-a515-4a14-bb12-9109010ed5e9 2021-07-22 03:34:15.472286+00:00 2021-07-22 03:34:15.472329+00:00 period Period-Cash tutorial1 2 c331945f-b1ea-4fb2-bb79-57d40a345427 2021-07-22 04:32:42.161613+00:00 2021-07-22 04:32:42.161652+00:00 period Test_Tutorial_Period In\u00a0[10]: Copied! <pre>p_load = Period()\np_load.get_db('c331945f-b1ea-4fb2-bb79-57d40a345427',cred)\n</pre> p_load = Period() p_load.get_db('c331945f-b1ea-4fb2-bb79-57d40a345427',cred) In\u00a0[11]: Copied! <pre>print(type(p_load))\nprint(p_load.json(exclude_unset=True,indent=2))\n</pre> print(type(p_load)) print(p_load.json(exclude_unset=True,indent=2)) <pre>&lt;class 'dcapy.schedule.schedule.Period'&gt;\n{\n  \"name\": \"Period-1908\",\n  \"id\": \"c331945f-b1ea-4fb2-bb79-57d40a345427\",\n  \"dca\": {\n    \"qi\": [\n      80.0,\n      100.0\n    ],\n    \"di\": 0.3,\n    \"b\": 0.0,\n    \"ti\": \"2021-01-01\",\n    \"freq_di\": \"A\",\n    \"fluid_rate\": 250.0\n  },\n  \"start\": \"2021-01-01\",\n  \"end\": \"2021-06-01\",\n  \"freq_output\": \"M\"\n}\n</pre> In\u00a0[13]: Copied! <pre>p_load.generate_forecast()\n</pre> p_load.generate_forecast() <pre>/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo/Documents/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[13]: oil_rate oil_cum iteration oil_volume fluid_rate water_rate bsw wor water_cum fluid_cum water_volume fluid_volume period date 2021-01 80.000000 0.000000 0 2448.672116 250.0 170.000000 0.680000 2.125000 0.000000 0.0 5332.390824 7750.0 Period-1908 2021-02 77.987393 2448.672116 0 2303.691934 250.0 172.012607 0.688050 2.205646 5332.390824 7750.0 5099.211884 7375.0 Period-1908 2021-03 76.213109 4607.383867 0 2245.736596 250.0 173.786891 0.695148 2.280276 10198.423768 14750.0 5156.432022 7375.0 Period-1908 2021-04 74.295771 6940.145308 0 2267.189892 250.0 175.704229 0.702817 2.364929 15645.254867 22500.0 5386.122225 7625.0 Period-1908 2021-05 72.486222 9141.763651 0 2210.152858 250.0 177.513778 0.710055 2.448931 20970.668217 30000.0 5442.435709 7625.0 Period-1908 2021-06 70.662643 11360.451023 0 2218.687372 250.0 179.337357 0.717349 2.537937 26530.126285 37750.0 5559.458067 7750.0 Period-1908 2021-01 100.000000 0.000000 1 3060.840145 250.0 150.000000 0.600000 1.500000 0.000000 0.0 4727.988530 7750.0 Period-1908 2021-02 97.484241 3060.840145 1 2879.614917 250.0 152.515759 0.610063 1.564517 4727.988530 7750.0 4530.264855 7375.0 Period-1908 2021-03 95.266386 5759.229834 1 2807.170745 250.0 154.733614 0.618934 1.624220 9060.529709 14750.0 4601.790027 7375.0 Period-1908 2021-04 92.869714 8675.181635 1 2833.987365 250.0 157.130286 0.628521 1.691943 13931.568584 22500.0 4826.402781 7625.0 Period-1908 2021-05 90.607777 11427.204563 1 2762.691072 250.0 159.392223 0.637569 1.759145 18713.335272 30000.0 4896.794636 7625.0 Period-1908 2021-06 88.328304 14200.563778 1 2773.359215 250.0 161.671696 0.646687 1.830350 23725.157856 37750.0 5011.822584 7750.0 Period-1908 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/5-CloudAPI/5a-CloudAPI/#heroku-cloud-api","title":"Heroku - Cloud API\u00b6","text":"<p>API End Point https://dcapyapi.herokuapp.com/ Documentation https://dcapyapi.herokuapp.com/docs</p> <p>By taking advantage of the use of Pydantic (Library to make validations) a Web API has been implemented with FastAPI (A web framework for building APIs) and hosted on Heroku. This API, so far, allows the users to save, edit and delete the models configurations on the cloud.</p> <p>By using the API, a user can work on any Schedule Model (<code>Period</code>, <code>Scenario</code>, <code>Well</code>,<code>WellsGroup</code>), save the model to the cloud host, then on any other time the user can continue working on it, update the cloud model or delete it</p> <p><code>dcapy</code> has a wrapper for the API that allows you to make those processes in an integrated way.</p>"},{"location":"examples/5-CloudAPI/5a-CloudAPI/#authentication","title":"Authentication\u00b6","text":"<p>To start using the cloud API service you have to create an account on https://dcapyapi.herokuapp.com/admin/create with an username and password. Underneath the API uses a Oauth2 methodology to authenticate every time you'll make some request.</p>"},{"location":"examples/5-CloudAPI/5a-CloudAPI/#check-the-user-models","title":"Check the user models\u00b6","text":""},{"location":"examples/5-CloudAPI/5a-CloudAPI/#load-a-model","title":"Load a Model\u00b6","text":"<p>By having the id of the model you can load a model in your python environment by calling the method <code>.get_db</code></p>"},{"location":"examples/5-CloudAPI/5a-CloudAPI/#generate-forecast","title":"Generate Forecast\u00b6","text":""},{"location":"examples/5-CloudAPI/get_models/","title":"Get models","text":"In\u00a0[\u00a0]: Copied! <pre>from sqlalchemy import schema\nfrom dcapy.auth import Credential\nfrom dcapy.schedule import Period\n</pre> from sqlalchemy import schema from dcapy.auth import Credential from dcapy.schedule import Period In\u00a0[\u00a0]: Copied! <pre>cred = Credential()\ncred.login('user','password')\n</pre> cred = Credential() cred.login('user','password') In\u00a0[\u00a0]: Copied! <pre>df = cred.get_models_info()\n</pre> df = cred.get_models_info() In\u00a0[\u00a0]: Copied! <pre>print(df)\n</pre> print(df) In\u00a0[\u00a0]: Copied! <pre>df2 = cred.get_models_info(schema=['period','well'])\n</pre> df2 = cred.get_models_info(schema=['period','well']) In\u00a0[\u00a0]: Copied! <pre>print(df2)\n</pre> print(df2)"},{"location":"examples/5-CloudAPI/periodapi/","title":"Periodapi","text":"In\u00a0[\u00a0]: Copied! <pre>from dcapy.auth import Credential\nfrom dcapy.schedule import Period\n</pre> from dcapy.auth import Credential from dcapy.schedule import Period In\u00a0[\u00a0]: Copied! <pre>cred = Credential()\ncred.login('uuser','password')\n</pre> cred = Credential() cred.login('uuser','password') In\u00a0[\u00a0]: Copied! <pre>p = Period()\n</pre> p = Period() In\u00a0[\u00a0]: Copied! <pre>p.get_db('820f6684-1e30-4d55-bff6-ae4363b9d000',cred)\n</pre> p.get_db('820f6684-1e30-4d55-bff6-ae4363b9d000',cred) In\u00a0[\u00a0]: Copied! <pre>print(p)\n</pre> print(p) In\u00a0[\u00a0]: Copied! <pre>print(p.generate_forecast())\n</pre> print(p.generate_forecast())"},{"location":"examples/6-FixesNotebooks/0-1-5_test_release/","title":"0.1.5","text":"In\u00a0[1]: Copied! <pre>from dcapy.schedule import Well, WellsGroup, Period, Scenario\nfrom dcapy import dca\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n</pre> from dcapy.schedule import Well, WellsGroup, Period, Scenario from dcapy import dca import numpy as np  import pandas as pd  import matplotlib.pyplot as plt import seaborn as sns In\u00a0[2]: Copied! <pre>time_drill = np.arange(0,6,3)\nlist_wells = []\nfor i,v in enumerate(time_drill):\n\n  p = Period(\n      name='base',\n      dca = dca.Arps(\n        qi = 1000,\n        di = 0.35,\n        ti = v,\n        b=0,\n        freq_di = 'A'\n      ),\n      start = 0,\n      end=120,\n      freq_output='M',\n      freq_input='M'\n  )\n\n  w = Well(\n        name = f'well_{i+1}',\n        scenarios = [\n          Scenario(name='sc', periods = [p])\n        ]\n    )\n  list_wells.append(w)\n\n\ngw = WellsGroup(name='channel_wells',wells=list_wells)\ngw.tree()\n</pre> time_drill = np.arange(0,6,3) list_wells = [] for i,v in enumerate(time_drill):    p = Period(       name='base',       dca = dca.Arps(         qi = 1000,         di = 0.35,         ti = v,         b=0,         freq_di = 'A'       ),       start = 0,       end=120,       freq_output='M',       freq_input='M'   )    w = Well(         name = f'well_{i+1}',         scenarios = [           Scenario(name='sc', periods = [p])         ]     )   list_wells.append(w)   gw = WellsGroup(name='channel_wells',wells=list_wells) gw.tree() Out[2]: <pre>\ud83c\udfedchannel_wells                                                                              \n\u2523\u2501\u2501 \ud83d\uddfcwell_1                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2517\u2501\u2501 \ud83d\uddfcwell_2                                                                                 \n    \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n        \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n</pre> In\u00a0[3]: Copied! <pre>gw.generate_forecast(freq_output='M')\n</pre> gw.generate_forecast(freq_output='M') <pre>/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[3]: oil_rate oil_cum iteration oil_volume period scenario well date 0 1000.000000 0.000000 0 29566.722637 base sc well_1 1 971.254575 29566.722637 0 29141.768636 base sc well_1 2 943.335450 58283.537273 0 28304.076118 base sc well_1 3 916.218872 86174.874873 0 27490.463427 base sc well_1 4 889.881771 113264.464127 0 26700.238378 base sc well_1 ... ... ... ... ... ... ... ... 115 38.133327 989348.578409 0 1144.162002 base sc well_2 116 37.037168 990476.055898 0 1111.272580 base sc well_2 117 35.972519 991571.123568 0 1079.328577 base sc well_2 118 34.938473 992634.713052 0 1048.302819 base sc well_2 119 33.934152 993667.729205 0 1033.016153 base sc well_2 <p>237 rows \u00d7 7 columns</p> In\u00a0[4]: Copied! <pre>dca.Arps(\n        qi = 1000,\n        di = 0.35,\n        ti = 0,\n        b=0,\n        freq_di = 'A'\n).plot(start=0, end=160, freq_input='D',freq_output='M')\n</pre> dca.Arps(         qi = 1000,         di = 0.35,         ti = 0,         b=0,         freq_di = 'A' ).plot(start=0, end=160, freq_input='D',freq_output='M') <pre>/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> In\u00a0[5]: Copied! <pre>dca.Arps(\n        qi = 1000,\n        di = 0.35,\n        ti = 0,\n        b=0,\n        freq_di = 'A'\n).forecast(start=0, end=160, freq_input='D',freq_output='M')\n</pre> dca.Arps(         qi = 1000,         di = 0.35,         ti = 0,         b=0,         freq_di = 'A' ).forecast(start=0, end=160, freq_input='D',freq_output='M') <pre>/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n</pre> Out[5]: oil_rate oil_cum iteration oil_volume date 0 1000.000000 0.000000 0 29572.601300 30 971.642711 29572.601300 0 29153.301901 60 944.089558 58306.603801 0 28326.593296 90 917.317738 86225.787892 0 27523.327906 120 891.305094 113353.259613 0 26742.840944 150 866.030097 139711.469780 0 26358.210168 In\u00a0[28]: Copied! <pre>well_delay = 3\nn_wells=21\ntime_drill = np.arange(0,well_delay*n_wells,well_delay)\nlist_wells = []\nqi = np.array([400,700,1000])\n\ndrill_cost = -7000000\nopex = -20\nabandon = -500000\noil_price = 50\n\nfor i,v in enumerate(time_drill):\n  decay_rate = 0.9\n  qi_decay = qi*np.power(decay_rate,i)\n  p = Period(\n      name='base',\n      dca = dca.Arps(\n        qi = qi_decay.tolist(),\n        di = 0.4,\n        ti = v,\n        b=0,\n        freq_di = 'A'\n      ),\n      start = 0,\n      end=120,\n      freq_output='M',\n      freq_input='M',\n      cashflow_params = [\n        {\n            'name':'drill',\n            'value':drill_cost,\n            'periods':1,\n            'target':'capex'\n        },\n        {\n            'name':'Opex',\n            'value':opex,\n            'multiply': 'oil_volume',\n            'target':'opex'\n        },\n        {\n            'name':'Income',\n            'value':oil_price,\n            'multiply': 'oil_volume',\n            'target':'income',\n            'wi':0.92\n        },\n\n      ]\n  )\n\n  w = Well(\n        name = f'well_{i+1}',\n        scenarios = [\n          Scenario(name='sc', periods = [p])\n        ]\n    )\n  list_wells.append(w)\n\n\ngw = WellsGroup(name='channel_wells',wells=list_wells)\ngw.tree()\n</pre> well_delay = 3 n_wells=21 time_drill = np.arange(0,well_delay*n_wells,well_delay) list_wells = [] qi = np.array([400,700,1000])  drill_cost = -7000000 opex = -20 abandon = -500000 oil_price = 50  for i,v in enumerate(time_drill):   decay_rate = 0.9   qi_decay = qi*np.power(decay_rate,i)   p = Period(       name='base',       dca = dca.Arps(         qi = qi_decay.tolist(),         di = 0.4,         ti = v,         b=0,         freq_di = 'A'       ),       start = 0,       end=120,       freq_output='M',       freq_input='M',       cashflow_params = [         {             'name':'drill',             'value':drill_cost,             'periods':1,             'target':'capex'         },         {             'name':'Opex',             'value':opex,             'multiply': 'oil_volume',             'target':'opex'         },         {             'name':'Income',             'value':oil_price,             'multiply': 'oil_volume',             'target':'income',             'wi':0.92         },        ]   )    w = Well(         name = f'well_{i+1}',         scenarios = [           Scenario(name='sc', periods = [p])         ]     )   list_wells.append(w)   gw = WellsGroup(name='channel_wells',wells=list_wells) gw.tree() Out[28]: <pre>\ud83c\udfedchannel_wells                                                                              \n\u2523\u2501\u2501 \ud83d\uddfcwell_1                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_2                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_3                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_4                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_5                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_6                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_7                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_8                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_9                                                                                 \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_10                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_11                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_12                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_13                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_14                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_15                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_16                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_17                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_18                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_19                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcwell_20                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2517\u2501\u2501 \ud83d\uddfcwell_21                                                                                \n    \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n        \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n</pre> In\u00a0[29]: Copied! <pre>f = gw.generate_forecast(freq_output='M')\nprint(f.head(10))\ntotal_prod = f.reset_index().groupby(['date','iteration'])['oil_rate','oil_cum'].sum().reset_index()\nfig, ax = plt.subplots()\n\nsns.lineplot(data=total_prod, x='date', y='oil_rate', hue='iteration',ax=ax)\nax2 = ax.twinx()\nsns.lineplot(data=total_prod, x='date', y='oil_cum', hue='iteration',ax=ax2, palette='Pastel1')\n</pre> f = gw.generate_forecast(freq_output='M') print(f.head(10)) total_prod = f.reset_index().groupby(['date','iteration'])['oil_rate','oil_cum'].sum().reset_index() fig, ax = plt.subplots()  sns.lineplot(data=total_prod, x='date', y='oil_rate', hue='iteration',ax=ax) ax2 = ax.twinx() sns.lineplot(data=total_prod, x='date', y='oil_cum', hue='iteration',ax=ax2, palette='Pastel1') <pre>/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:68: RuntimeWarning: divide by zero encountered in true_divide\n  return qi/np.power(1+b*di*time_array,1/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:85: RuntimeWarning: divide by zero encountered in true_divide\n  g = np.power(b*di*time_array+1,(b-1)/b)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:86: RuntimeWarning: divide by zero encountered in true_divide\n  h = np.power(b*di*ti+1,(b-1)/b)\n&lt;ipython-input-29-d869f00136cd&gt;:3: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n  total_prod = f.reset_index().groupby(['date','iteration'])['oil_rate','oil_cum'].sum().reset_index()\n</pre> <pre>        oil_rate       oil_cum  iteration    oil_volume period scenario  \\\ndate                                                                      \n0     400.000000      0.000000          0  11802.203826   base       sc   \n1     386.886440  11802.203826          0  11608.742694   base       sc   \n2     374.202794  23217.485389          0  11228.162840   base       sc   \n3     361.934967  34258.529507          0  10860.059878   base       sc   \n4     350.069328  44937.605145          0  10504.024766   base       sc   \n5     338.592690  55266.579039          0  10159.661874   base       sc   \n6     327.492301  65256.928892          0   9826.588540   base       sc   \n7     316.755827  74919.756119          0   9504.434648   base       sc   \n8     306.371335  84265.798189          0   9192.842218   base       sc   \n9     296.327288  93305.440555          0   8891.465002   base       sc   \n\n        well  \ndate          \n0     well_1  \n1     well_1  \n2     well_1  \n3     well_1  \n4     well_1  \n5     well_1  \n6     well_1  \n7     well_1  \n8     well_1  \n9     well_1  \n</pre> Out[29]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_cum'&gt;</pre> In\u00a0[30]: Copied! <pre>c = gw.generate_cashflow(freq_output='M')\n</pre> c = gw.generate_cashflow(freq_output='M') In\u00a0[31]: Copied! <pre>c[0].capex[1].get_cashflow()\n</pre> c[0].capex[1].get_cashflow() Out[31]: <pre>3.0   -7000000.0\ndtype: float64</pre> In\u00a0[34]: Copied! <pre>c[2].plot(freq_output='A',cum=True,format='m')\n</pre> c[2].plot(freq_output='A',cum=True,format='m') <pre>/home/scuervo91/dev/apps/dcapy/dcapy/cashflow/cashflow.py:355: UserWarning: FixedFormatter should only be used together with FixedLocator\n  grax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks])\n/home/scuervo91/dev/apps/dcapy/dcapy/cashflow/cashflow.py:363: UserWarning: FixedFormatter should only be used together with FixedLocator\n  spax.set_yticklabels([fmt.format(i/format_dict[format]['factor']) for i in ticks_cum])\n</pre> In\u00a0[37]: Copied! <pre>gw.npv(0.0,freq_cashflow='M')\n</pre> gw.npv(0.0,freq_cashflow='M') Out[37]: npv iteration 0.0 -6.695810e+07 0 0.0 -6.926680e+06 1 0.0 5.310474e+07 2 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/6-FixesNotebooks/0-1-5_test_release/#test","title":"Test\u00b6","text":""},{"location":"examples/6-FixesNotebooks/0-1-7_test_release/","title":"0 1 7 test release","text":"In\u00a0[1]: Copied! <pre>from dcapy.schedule import Well, WellsGroup, Period, Scenario\nfrom dcapy import dca\nfrom dcapy.wiener import MeanReversion\nfrom dcapy.cashflow import CashFlowParams\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import rv_histogram\n</pre> from dcapy.schedule import Well, WellsGroup, Period, Scenario from dcapy import dca from dcapy.wiener import MeanReversion from dcapy.cashflow import CashFlowParams import numpy as np  import pandas as pd  import matplotlib.pyplot as plt import seaborn as sns from scipy.stats import rv_histogram In\u00a0[2]: Copied! <pre>oil_mr = MeanReversion(\n    initial_condition = 66,\n    ti = 0,\n    generator = {'dist':'norm','kw':{'loc':0,'scale':3}},\n    m=50,\n    steps=36,\n    eta=0.112652,\n    freq_input = 'M'\n)\n</pre> oil_mr = MeanReversion(     initial_condition = 66,     ti = 0,     generator = {'dist':'norm','kw':{'loc':0,'scale':3}},     m=50,     steps=36,     eta=0.112652,     freq_input = 'M' ) In\u00a0[3]: Copied! <pre>cp = CashFlowParams(**{\n          'name':'Income',\n          'value':dca.ProbVar(dist='uniform',kw={'loc':30,'scale':35}),\n          'multiply': 'oil_volume',\n          'target':'income',\n          'wi':0.92\n      })\ncp.get_value(5,freq_output='M',seed=21)\n</pre> cp = CashFlowParams(**{           'name':'Income',           'value':dca.ProbVar(dist='uniform',kw={'loc':30,'scale':35}),           'multiply': 'oil_volume',           'target':'income',           'wi':0.92       }) cp.get_value(5,freq_output='M',seed=21) Out[3]: <pre>array([31.70537083])</pre> In\u00a0[4]: Copied! <pre>prob_prod = dca.ProbVar(dist='triang',kw={'c':0.2,'loc':15,'scale':35})\nprob_oil_price = dca.ProbVar(dist='uniform',kw={'loc':30,'scale':35})\n\nprod_rand = prob_prod.get_sample(20)\nprice_rand = prob_oil_price.get_sample(20)\n</pre> prob_prod = dca.ProbVar(dist='triang',kw={'c':0.2,'loc':15,'scale':35}) prob_oil_price = dca.ProbVar(dist='uniform',kw={'loc':30,'scale':35})  prod_rand = prob_prod.get_sample(20) price_rand = prob_oil_price.get_sample(20)    In\u00a0[5]: Copied! <pre>sns.scatterplot(prod_rand,price_rand)\n</pre> sns.scatterplot(prod_rand,price_rand) <pre>/home/scuervo91/anaconda3/envs/dcapy/lib/python3.8/site-packages/seaborn/_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n  warnings.warn(\n</pre> Out[5]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[6]: Copied! <pre>p = Period(\n    name='base',\n    dca = dca.Arps(\n      qi = prod_rand.tolist(),\n      di = 0.005102753514909305,\n      freq_di='D',\n      ti = 0,\n      b=1,\n    ),\n    start = 0,\n    end=36,\n    freq_output='M',\n    freq_input='M',\n    cashflow_params = [\n      {\n          'name':'wo',\n          'value':-212000,\n          'periods':1,\n          'target':'capex'\n      },\n      {\n          'name':'Opex',\n          'value':-7,\n          'multiply': 'oil_volume',\n          'target':'opex'\n      },\n      {\n          'name':'Income',\n          'value':price_rand.tolist(),\n          'multiply': 'oil_volume',\n          'target':'income',\n          'wi':0.92\n      },\n      {\n          'name':'abandon',\n          'value':-200000,\n          'periods':-1,\n          'target':'capex'\n      },\n\n    ]\n)\ns = Scenario(name='sc', periods = [p])\nw = Well(\n      name = f'well_eagle',\n      scenarios = [\n        s\n      ]\n)\n\ngw = WellsGroup(name='wells',wells=[w], seed=21)\ngw.tree()\n</pre> p = Period(     name='base',     dca = dca.Arps(       qi = prod_rand.tolist(),       di = 0.005102753514909305,       freq_di='D',       ti = 0,       b=1,     ),     start = 0,     end=36,     freq_output='M',     freq_input='M',     cashflow_params = [       {           'name':'wo',           'value':-212000,           'periods':1,           'target':'capex'       },       {           'name':'Opex',           'value':-7,           'multiply': 'oil_volume',           'target':'opex'       },       {           'name':'Income',           'value':price_rand.tolist(),           'multiply': 'oil_volume',           'target':'income',           'wi':0.92       },       {           'name':'abandon',           'value':-200000,           'periods':-1,           'target':'capex'       },      ] ) s = Scenario(name='sc', periods = [p]) w = Well(       name = f'well_eagle',       scenarios = [         s       ] )  gw = WellsGroup(name='wells',wells=[w], seed=21) gw.tree() Out[6]: <pre>\ud83c\udfedwells                                                                                      \n\u2517\u2501\u2501 \ud83d\uddfcwell_eagle                                                                             \n    \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n        \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n</pre> In\u00a0[7]: Copied! <pre>f = gw.generate_forecast(freq_output='M')\nsns.lineplot(data=f,x=f.index, y=f.oil_rate,hue='iteration')\n</pre> f = gw.generate_forecast(freq_output='M') sns.lineplot(data=f,x=f.index, y=f.oil_rate,hue='iteration') <pre>/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:84: RuntimeWarning: divide by zero encountered in true_divide\n  f = qi/(di*(b-1))\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n</pre> Out[7]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[8]: Copied! <pre>c = gw.generate_cashflow(freq_output='M')\n\nprint(len(c))\n</pre> c = gw.generate_cashflow(freq_output='M')  print(len(c)) <pre>20\n</pre> In\u00a0[9]: Copied! <pre>npv_df = gw.npv(0.15,freq_cashflow='M')/1000\nnpv_df['rate'] = prod_rand\nnpv_df['price'] = price_rand\nnpv_df['npv_b'] = npv_df['npv'].apply(lambda x: 1 if x&gt;0 else 0)\n</pre> npv_df = gw.npv(0.15,freq_cashflow='M')/1000 npv_df['rate'] = prod_rand npv_df['price'] = price_rand npv_df['npv_b'] = npv_df['npv'].apply(lambda x: 1 if x&gt;0 else 0) In\u00a0[10]: Copied! <pre>sns.displot(npv_df['npv'], kde=True)\n</pre> sns.displot(npv_df['npv'], kde=True) Out[10]: <pre>&lt;seaborn.axisgrid.FacetGrid at 0x7f66d202bb80&gt;</pre> In\u00a0[11]: Copied! <pre>npv_dist = rv_histogram(np.histogram(npv_df['npv'], bins=100))\nsns.ecdfplot(data=npv_df, x=\"npv\", complementary=True)\n</pre> npv_dist = rv_histogram(np.histogram(npv_df['npv'], bins=100)) sns.ecdfplot(data=npv_df, x=\"npv\", complementary=True) Out[11]: <pre>&lt;AxesSubplot:xlabel='npv', ylabel='Proportion'&gt;</pre> In\u00a0[12]: Copied! <pre>npv_dist = rv_histogram(np.histogram(npv_df['npv'], bins=100))\n</pre> npv_dist = rv_histogram(np.histogram(npv_df['npv'], bins=100)) In\u00a0[13]: Copied! <pre>npv_dist.sf(0)\n</pre> npv_dist.sf(0) Out[13]: <pre>0.34375161715588654</pre> In\u00a0[14]: Copied! <pre>sns.scatterplot(data=npv_df, x=\"rate\", y=\"price\", hue='npv_b',palette='coolwarm_r')\n</pre> sns.scatterplot(data=npv_df, x=\"rate\", y=\"price\", hue='npv_b',palette='coolwarm_r') Out[14]: <pre>&lt;AxesSubplot:xlabel='rate', ylabel='price'&gt;</pre> In\u00a0[15]: Copied! <pre>sns.jointplot(data=npv_df, x=\"rate\", y=\"price\",hue='npv_b')\n</pre> sns.jointplot(data=npv_df, x=\"rate\", y=\"price\",hue='npv_b') Out[15]: <pre>&lt;seaborn.axisgrid.JointGrid at 0x7f66cfe46460&gt;</pre> In\u00a0[16]: Copied! <pre>list_wells = ['DIJAR-3','DIJAR-4','DIJAR-8','DIJAR-1-1']\ninitial_time = np.arange(len(list_wells))\ncapex = [-212000,-276000,-385000,-212000]\nlist_wells_sched=[]\n\nprod_eagle = prob_prod.get_sample(1000)\nprice_eagle = prob_oil_price.get_sample(1000)   \n\nfor i, well in enumerate(list_wells):\n\n    p = Period(\n        name='base',\n        dca = dca.Arps(\n        qi = prod_eagle.tolist(),\n        di = 0.005102753514909305/5,\n        freq_di='D',\n        ti = initial_time[i],\n        b=1,\n        ),\n        start = 0,\n        end=36,\n        freq_output='M',\n        freq_input='M',\n        cashflow_params = [\n        {\n            'name':'wo',\n            'value':capex[i],\n            'periods':1,\n            'target':'capex'\n        },\n        {\n            'name':'Opex',\n            'value':-7,\n            'multiply': 'oil_volume',\n            'target':'opex'\n        },\n        {\n            'name':'Income',\n            'value':price_eagle.tolist(),\n            'multiply': 'oil_volume',\n            'target':'income',\n            'wi':0.92\n        },\n        {\n            'name':'abandon',\n            'value':-200000,\n            'periods':-1,\n            'target':'capex'\n        },\n\n        ]\n    )\n    s = Scenario(name='sc', periods = [p])\n    w = Well(\n        name = list_wells[i],\n        scenarios = [\n            s\n        ]\n    )\n    list_wells_sched.append(w)\n\neagle_wells = WellsGroup(name='eagle',wells=list_wells_sched)\neagle_wells.tree()\n</pre> list_wells = ['DIJAR-3','DIJAR-4','DIJAR-8','DIJAR-1-1'] initial_time = np.arange(len(list_wells)) capex = [-212000,-276000,-385000,-212000] list_wells_sched=[]  prod_eagle = prob_prod.get_sample(1000) price_eagle = prob_oil_price.get_sample(1000)     for i, well in enumerate(list_wells):      p = Period(         name='base',         dca = dca.Arps(         qi = prod_eagle.tolist(),         di = 0.005102753514909305/5,         freq_di='D',         ti = initial_time[i],         b=1,         ),         start = 0,         end=36,         freq_output='M',         freq_input='M',         cashflow_params = [         {             'name':'wo',             'value':capex[i],             'periods':1,             'target':'capex'         },         {             'name':'Opex',             'value':-7,             'multiply': 'oil_volume',             'target':'opex'         },         {             'name':'Income',             'value':price_eagle.tolist(),             'multiply': 'oil_volume',             'target':'income',             'wi':0.92         },         {             'name':'abandon',             'value':-200000,             'periods':-1,             'target':'capex'         },          ]     )     s = Scenario(name='sc', periods = [p])     w = Well(         name = list_wells[i],         scenarios = [             s         ]     )     list_wells_sched.append(w)  eagle_wells = WellsGroup(name='eagle',wells=list_wells_sched) eagle_wells.tree() Out[16]: <pre>\ud83c\udfedeagle                                                                                      \n\u2523\u2501\u2501 \ud83d\uddfcDIJAR-3                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcDIJAR-4                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2523\u2501\u2501 \ud83d\uddfcDIJAR-8                                                                                \n\u2503   \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n\u2503       \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n\u2517\u2501\u2501 \ud83d\uddfcDIJAR-1-1                                                                              \n    \u2517\u2501\u2501 \ud83d\udd00sc                                                                                 \n        \u2517\u2501\u2501 \ud83d\udcc9base                                                                           \n</pre> In\u00a0[17]: Copied! <pre>f = eagle_wells.generate_forecast(freq_output='M')\nc = eagle_wells.generate_cashflow(freq_output='M')\nprint(len(c))\n</pre> f = eagle_wells.generate_forecast(freq_output='M') c = eagle_wells.generate_cashflow(freq_output='M') print(len(c)) <pre>/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:84: RuntimeWarning: divide by zero encountered in true_divide\n  f = qi/(di*(b-1))\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:84: RuntimeWarning: divide by zero encountered in true_divide\n  f = qi/(di*(b-1))\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:84: RuntimeWarning: divide by zero encountered in true_divide\n  f = qi/(di*(b-1))\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:84: RuntimeWarning: divide by zero encountered in true_divide\n  f = qi/(di*(b-1))\n/home/scuervo91/dev/apps/dcapy/dcapy/dca/arps.py:87: RuntimeWarning: invalid value encountered in multiply\n  return f*(g-h)\n</pre> <pre>1000\n</pre> In\u00a0[18]: Copied! <pre>fig, ax = plt.subplots()\n\nsns.lineplot(data=f, x='date', y='oil_rate',hue='well', ax=ax)\nax2 = ax.twinx()\nsns.lineplot(data=f, x='date', y='oil_cum', hue='well',ax=ax2, palette='Pastel1')\n</pre> fig, ax = plt.subplots()  sns.lineplot(data=f, x='date', y='oil_rate',hue='well', ax=ax) ax2 = ax.twinx() sns.lineplot(data=f, x='date', y='oil_cum', hue='well',ax=ax2, palette='Pastel1') Out[18]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_cum'&gt;</pre> In\u00a0[19]: Copied! <pre>fig, ax = plt.subplots()\n\ntotal_prod = f.reset_index().groupby(['date','iteration'])['oil_rate','oil_cum'].sum().reset_index()\ntotal_prod.head()\n\n\nsns.lineplot(data=total_prod, x='date', y='oil_rate', ax=ax)\nax2 = ax.twinx()\nsns.lineplot(data=total_prod, x='date', y='oil_cum', ax=ax2, palette='Pastel1')\n</pre> fig, ax = plt.subplots()  total_prod = f.reset_index().groupby(['date','iteration'])['oil_rate','oil_cum'].sum().reset_index() total_prod.head()   sns.lineplot(data=total_prod, x='date', y='oil_rate', ax=ax) ax2 = ax.twinx() sns.lineplot(data=total_prod, x='date', y='oil_cum', ax=ax2, palette='Pastel1') <pre>&lt;ipython-input-19-c1bfeafc83c7&gt;:3: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n  total_prod = f.reset_index().groupby(['date','iteration'])['oil_rate','oil_cum'].sum().reset_index()\n</pre> Out[19]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_cum'&gt;</pre> In\u00a0[20]: Copied! <pre>npv_eagle = eagle_wells.npv(0.15,freq_cashflow='M')/1000\nnpv_eagle['rate'] = prod_eagle\nnpv_eagle['price'] = price_eagle\nnpv_eagle['npv_b'] = npv_eagle['npv'].apply(lambda x: 1 if x&gt;0 else 0)\n</pre> npv_eagle = eagle_wells.npv(0.15,freq_cashflow='M')/1000 npv_eagle['rate'] = prod_eagle npv_eagle['price'] = price_eagle npv_eagle['npv_b'] = npv_eagle['npv'].apply(lambda x: 1 if x&gt;0 else 0) In\u00a0[21]: Copied! <pre>sns.scatterplot(data=npv_eagle, x=\"rate\", y=\"price\", hue='npv_b',palette='coolwarm_r')\n</pre> sns.scatterplot(data=npv_eagle, x=\"rate\", y=\"price\", hue='npv_b',palette='coolwarm_r') Out[21]: <pre>&lt;AxesSubplot:xlabel='rate', ylabel='price'&gt;</pre> In\u00a0[22]: Copied! <pre>npv_eagle_dist = rv_histogram(np.histogram(npv_eagle['npv'], bins=100))\nprint(f'Prob success {npv_eagle_dist.sf(0)}')\nsns.ecdfplot(data=npv_eagle, x=\"npv\", complementary=True)\n</pre> npv_eagle_dist = rv_histogram(np.histogram(npv_eagle['npv'], bins=100)) print(f'Prob success {npv_eagle_dist.sf(0)}') sns.ecdfplot(data=npv_eagle, x=\"npv\", complementary=True) <pre>Prob success 0.8138816891010596\n</pre> Out[22]: <pre>&lt;AxesSubplot:xlabel='npv', ylabel='Proportion'&gt;</pre>"},{"location":"examples/6-FixesNotebooks/0-1-7_test_release/#test","title":"Test\u00b6","text":""},{"location":"examples/6-FixesNotebooks/0-1-7_test_release/#group-wells","title":"Group Wells\u00b6","text":""},{"location":"examples/7-EnKF/01-EnFk/","title":"01 EnFk","text":"In\u00a0[63]: Copied! <pre>#EnFk\n</pre> #EnFk In\u00a0[64]: Copied! <pre># def declineCurve(m,t):\n#     qi = m[0]\n#     a = m[1]\n#     b = m[2]\n#     return qi/(1+a*b*t)**(1.0/b)\n# def runEnsemble(mf,t,ne,nt,nm,m_range):\n#     m_a = copy.deepcopy(mf)\n#     for i in range(nm):\n#         m_a[i,:] = m_range[i][0] + m_a[i,:]*(m_range[i][1]-m_range[i][0])\n#     df = np.zeros((nt,ne))\n#     for j in range(ne):\n#         df[:,j] = declineCurve(m_a[:,j],t)\n#     return m_a, df\n</pre> # def declineCurve(m,t): #     qi = m[0] #     a = m[1] #     b = m[2] #     return qi/(1+a*b*t)**(1.0/b) # def runEnsemble(mf,t,ne,nt,nm,m_range): #     m_a = copy.deepcopy(mf) #     for i in range(nm): #         m_a[i,:] = m_range[i][0] + m_a[i,:]*(m_range[i][1]-m_range[i][0]) #     df = np.zeros((nt,ne)) #     for j in range(ne): #         df[:,j] = declineCurve(m_a[:,j],t) #     return m_a, df In\u00a0[65]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom dcapy.dca import Arps, arps_forecast\nfrom datetime import date\n</pre> import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt from dcapy.dca import Arps, arps_forecast from datetime import date In\u00a0[66]: Copied! <pre>rng = np.random.default_rng(1706)\nne = 96 #number of ensemble\nnt = 100 #timestep\nnm = 3 # Model Parameters\n\ntmax = 100\nt = np.arange(tmax)\nqi = 1800\ndi = 0.1\nb = 0.5\ntrue_params = np.array([qi,di,b])\ndc1 = Arps(\n    qi=qi,\n    di=di,\n    b = b,\n    ti = 0\n)\n\ndc1.plot(\n    start=0,\n    end = tmax,\n    freq_input='M',\n    freq_output='M'\n)\n</pre> rng = np.random.default_rng(1706) ne = 96 #number of ensemble nt = 100 #timestep nm = 3 # Model Parameters  tmax = 100 t = np.arange(tmax) qi = 1800 di = 0.1 b = 0.5 true_params = np.array([qi,di,b]) dc1 = Arps(     qi=qi,     di=di,     b = b,     ti = 0 )  dc1.plot(     start=0,     end = tmax,     freq_input='M',     freq_output='M' ) In\u00a0[67]: Copied! <pre>fr = dc1.forecast(\n    start=0,\n    end = 100,\n    freq_input='M',\n    freq_output='M'\n)\nfr.shape\n</pre> fr = dc1.forecast(     start=0,     end = 100,     freq_input='M',     freq_output='M' ) fr.shape Out[67]: <pre>(100, 4)</pre> In\u00a0[68]: Copied! <pre>sd = fr['oil_rate']*0.3\nsd\n</pre> sd = fr['oil_rate']*0.3 sd Out[68]: <pre>date\n0     540.000000\n1     489.795918\n2     446.280992\n3     408.317580\n4     375.000000\n         ...    \n95     16.332703\n96     16.052319\n97     15.779093\n98     15.512784\n99     15.253160\nName: oil_rate, Length: 100, dtype: float64</pre> In\u00a0[69]: Copied! <pre>noise = rng.standard_normal(size=(fr.shape[0],))\n</pre> noise = rng.standard_normal(size=(fr.shape[0],))  In\u00a0[70]: Copied! <pre>fr['obs'] = fr['oil_rate'].values + noise * sd\n</pre> fr['obs'] = fr['oil_rate'].values + noise * sd In\u00a0[71]: Copied! <pre>fig, ax = plt.subplots()\nsns.lineplot(data=fr, x = fr.index, y=fr['oil_rate'],ax=ax)\nsns.lineplot(data=fr, x = fr.index, y=fr['obs'],ax=ax)\n</pre> fig, ax = plt.subplots() sns.lineplot(data=fr, x = fr.index, y=fr['oil_rate'],ax=ax) sns.lineplot(data=fr, x = fr.index, y=fr['obs'],ax=ax) Out[71]: <pre>&lt;AxesSubplot:xlabel='date', ylabel='oil_rate'&gt;</pre> In\u00a0[72]: Copied! <pre>true_params\n</pre> true_params Out[72]: <pre>array([1.8e+03, 1.0e-01, 5.0e-01])</pre> In\u00a0[73]: Copied! <pre>def create_ensambles(n_ensambles,n_params,ranges):\n    mf = rng.uniform(0.0,1.0, size=(n_params,n_ensambles))\n    ma = np.zeros((n_params,n_ensambles))\n    for i in range(n_params):\n        range_diff = ranges[i][1] - ranges[i][0]\n        ma[i,:] = ranges[i][0] + mf[i,:]*range_diff\n        \n    return ma\n</pre> def create_ensambles(n_ensambles,n_params,ranges):     mf = rng.uniform(0.0,1.0, size=(n_params,n_ensambles))     ma = np.zeros((n_params,n_ensambles))     for i in range(n_params):         range_diff = ranges[i][1] - ranges[i][0]         ma[i,:] = ranges[i][0] + mf[i,:]*range_diff              return ma               In\u00a0[74]: Copied! <pre>ne\n</pre> ne Out[74]: <pre>96</pre> In\u00a0[75]: Copied! <pre>m_range = [[1500,2000.0],[0.01,0.3],[1e-5,1.0]]\nens = create_ensambles(ne,len(m_range),m_range)\nens.T\n</pre> m_range = [[1500,2000.0],[0.01,0.3],[1e-5,1.0]] ens = create_ensambles(ne,len(m_range),m_range) ens.T Out[75]: <pre>array([[1.66280477e+03, 7.87756004e-02, 1.24617792e-01],\n       [1.74367210e+03, 4.43988324e-02, 7.21306433e-01],\n       [1.54557896e+03, 1.20438024e-02, 9.70949493e-01],\n       [1.72394801e+03, 8.51738412e-02, 1.25569643e-01],\n       [1.82915554e+03, 4.43702760e-02, 5.81487824e-01],\n       [1.72320553e+03, 2.18113738e-01, 9.37865648e-01],\n       [1.84698659e+03, 1.53738611e-01, 7.79543979e-01],\n       [1.73313822e+03, 1.42935063e-01, 5.38698256e-01],\n       [1.56436697e+03, 1.43220968e-01, 7.01638825e-01],\n       [1.73817022e+03, 2.05337028e-01, 8.17567507e-01],\n       [1.95975468e+03, 2.43057158e-01, 4.46870521e-01],\n       [1.83135461e+03, 5.06864061e-02, 5.53277271e-01],\n       [1.81248829e+03, 1.38750006e-01, 5.91291328e-02],\n       [1.94030828e+03, 1.58756583e-01, 2.76990256e-01],\n       [1.51805018e+03, 1.93237471e-01, 8.66175179e-01],\n       [1.97300355e+03, 1.49775443e-01, 6.21709286e-01],\n       [1.64387060e+03, 2.24861253e-01, 3.09885033e-01],\n       [1.69124703e+03, 2.76201013e-01, 8.59203386e-01],\n       [1.64607022e+03, 2.46582027e-02, 2.61248121e-01],\n       [1.80232385e+03, 1.46292864e-01, 9.59525252e-01],\n       [1.98685474e+03, 7.20262394e-02, 3.50528167e-01],\n       [1.71373280e+03, 2.88459712e-01, 5.44124596e-01],\n       [1.87263731e+03, 1.08239821e-01, 6.22428962e-01],\n       [1.79575317e+03, 2.66497760e-01, 9.53998191e-02],\n       [1.94623769e+03, 2.62853768e-01, 7.58557476e-01],\n       [1.98854375e+03, 3.49081245e-02, 6.37275466e-01],\n       [1.65736221e+03, 1.71111036e-01, 8.08229911e-01],\n       [1.66796585e+03, 1.91985006e-01, 8.43054761e-01],\n       [1.76868967e+03, 1.95837272e-01, 5.07560032e-01],\n       [1.80478118e+03, 1.51818700e-01, 8.36677291e-01],\n       [1.50889329e+03, 2.46927129e-01, 8.46680319e-01],\n       [1.71974753e+03, 7.06403334e-02, 1.95149220e-01],\n       [1.64645395e+03, 2.07525565e-01, 3.52588248e-01],\n       [1.84695942e+03, 9.48604875e-02, 5.83290320e-02],\n       [1.51925345e+03, 1.40449324e-01, 2.21185487e-01],\n       [1.66990766e+03, 1.25889196e-01, 8.97111726e-01],\n       [1.54624779e+03, 2.36712440e-01, 9.64395544e-01],\n       [1.77347077e+03, 2.90563811e-01, 9.79071574e-01],\n       [1.97204357e+03, 7.69406809e-02, 2.91800743e-01],\n       [1.56491908e+03, 2.98820956e-01, 1.39788332e-01],\n       [1.89928309e+03, 1.30318949e-01, 2.93296472e-01],\n       [1.98964886e+03, 1.77500588e-01, 3.06249088e-03],\n       [1.93735485e+03, 1.63054572e-01, 2.23841920e-01],\n       [1.95931653e+03, 1.50682247e-01, 5.65997107e-01],\n       [1.63994515e+03, 1.94244480e-01, 8.48428965e-01],\n       [1.55454445e+03, 7.48338564e-02, 7.89614340e-01],\n       [1.88148387e+03, 1.78381156e-01, 1.38895733e-01],\n       [1.73691932e+03, 1.43232829e-01, 1.49374403e-01],\n       [1.66223593e+03, 1.06597867e-02, 8.07447855e-01],\n       [1.75893707e+03, 2.79577910e-01, 7.97206398e-01],\n       [1.97791487e+03, 1.57938371e-01, 4.89646537e-01],\n       [1.74761424e+03, 2.84640002e-01, 3.54230407e-01],\n       [1.63806732e+03, 1.32969132e-01, 1.80194851e-02],\n       [1.90764585e+03, 2.84900701e-01, 5.41863303e-01],\n       [1.59281779e+03, 1.79042050e-01, 8.68065678e-01],\n       [1.92780037e+03, 2.85926077e-01, 6.25734408e-01],\n       [1.90600251e+03, 2.91933651e-02, 4.88689731e-01],\n       [1.93433828e+03, 2.36202231e-01, 1.71641080e-01],\n       [1.61334306e+03, 7.54018258e-02, 8.22774425e-01],\n       [1.84862298e+03, 2.54652120e-02, 4.28987906e-01],\n       [1.87339204e+03, 2.57816259e-01, 8.66469677e-01],\n       [1.93402881e+03, 1.64222017e-01, 8.82274385e-01],\n       [1.72712711e+03, 1.63682640e-01, 2.09709512e-01],\n       [1.64627850e+03, 2.44372818e-02, 8.31118556e-01],\n       [1.92195772e+03, 1.88816710e-02, 4.99676678e-01],\n       [1.57086634e+03, 8.11314674e-02, 7.41800474e-02],\n       [1.59402547e+03, 1.18115656e-01, 1.24854037e-01],\n       [1.58508325e+03, 2.16290336e-01, 4.84920290e-01],\n       [1.80850202e+03, 9.74708745e-02, 7.61837649e-01],\n       [1.76476844e+03, 1.51743394e-01, 9.73224664e-01],\n       [1.64000208e+03, 7.96848077e-02, 4.52668053e-01],\n       [1.70479104e+03, 1.33806844e-01, 9.88744171e-01],\n       [1.98404667e+03, 2.33734264e-01, 2.00009320e-01],\n       [1.91270421e+03, 2.47416280e-01, 3.94377810e-01],\n       [1.85375898e+03, 2.01922172e-01, 5.78462315e-01],\n       [1.99626227e+03, 5.04474097e-02, 5.25317607e-01],\n       [1.51726860e+03, 4.38045324e-02, 2.60911851e-01],\n       [1.77955312e+03, 2.56264421e-01, 2.14753933e-01],\n       [1.52235676e+03, 6.94952121e-02, 4.42362718e-01],\n       [1.68604070e+03, 1.31276113e-01, 7.54331199e-01],\n       [1.70404969e+03, 1.73131775e-01, 3.55467688e-01],\n       [1.66653994e+03, 5.34595485e-02, 8.38518278e-01],\n       [1.70029396e+03, 2.88087371e-01, 2.50499171e-01],\n       [1.53079607e+03, 1.16519234e-01, 9.26445038e-01],\n       [1.94308459e+03, 2.17632818e-01, 9.11737105e-01],\n       [1.55831317e+03, 1.21838146e-01, 8.06456849e-01],\n       [1.87306434e+03, 1.26025747e-01, 7.98705407e-01],\n       [1.71805131e+03, 2.14893869e-01, 9.82733665e-01],\n       [1.61474018e+03, 2.54495873e-01, 4.61333215e-01],\n       [1.90299659e+03, 1.52106897e-01, 2.19277244e-01],\n       [1.84154613e+03, 2.11652394e-01, 2.77495327e-01],\n       [1.54782057e+03, 2.93146188e-01, 7.41458854e-01],\n       [1.65545199e+03, 9.24222733e-02, 1.60101344e-01],\n       [1.77259037e+03, 1.38927807e-01, 5.06647532e-01],\n       [1.87937694e+03, 1.23043176e-01, 7.65679524e-01],\n       [1.63334623e+03, 1.32135546e-01, 6.25886978e-01]])</pre> In\u00a0[76]: Copied! <pre>def forward(ensambles,tmax):\n    tt = np.arange(tmax)\n    ne = ensambles.shape[1]\n    curves = np.zeros((tmax,ne))\n\n    for i,en in enumerate(ensambles.T):\n        curves[:,i] = arps_forecast(tt,*en)\n    \n    # for i in range(ne):\n    #     curves[:,i] = arps_forecast(tt,*ensambles[:,i])\n    \n    return pd.DataFrame(curves,columns=np.arange(ne))\n    \ndf = forward(ens,tmax)\ndf.head()\n</pre>      def forward(ensambles,tmax):     tt = np.arange(tmax)     ne = ensambles.shape[1]     curves = np.zeros((tmax,ne))      for i,en in enumerate(ensambles.T):         curves[:,i] = arps_forecast(tt,*en)          # for i in range(ne):     #     curves[:,i] = arps_forecast(tt,*ensambles[:,i])          return pd.DataFrame(curves,columns=np.arange(ne))      df = forward(ens,tmax) df.head() Out[76]: 0 1 2 3 4 5 6 7 8 9 ... 86 87 88 89 90 91 92 93 94 95 0 1662.804774 1743.672095 1545.578964 1723.948011 1829.155536 1723.205532 1846.986587 1733.138219 1564.366968 1738.170223 ... 1873.064341 1718.051305 1614.740182 1902.996594 1841.546128 1547.820575 1655.451991 1772.590371 1879.376940 1633.346233 1 1537.433320 1669.110039 1527.182672 1583.908348 1750.754545 1413.035792 1597.362204 1510.188549 1364.800038 1437.660114 ... 1661.127950 1413.722700 1269.398077 1638.538238 1499.205691 1187.185589 1510.331127 1549.892503 1670.884401 1438.607277 2 1422.593057 1599.871805 1509.213013 1456.542786 1677.538585 1195.419317 1402.040875 1328.496671 1204.986323 1219.863494 ... 1488.744703 1200.428036 1022.218487 1417.553960 1234.137565 951.247068 1379.763173 1366.814255 1500.027991 1278.988614 3 1317.310452 1535.433661 1491.655386 1340.589125 1609.049813 1034.547423 1245.515504 1178.384389 1074.592901 1055.416192 ... 1346.072054 1042.698955 839.535110 1231.855939 1026.113104 786.444662 1262.110145 1214.470689 1357.775958 1146.289420 4 1220.710038 1475.336725 1474.495846 1234.922104 1544.880489 910.924459 1117.593104 1052.867959 966.511466 927.255554 ... 1226.241917 921.361496 700.902665 1074.983499 860.863145 665.687693 1155.937975 1086.337016 1237.728193 1034.606511 <p>5 rows \u00d7 96 columns</p> In\u00a0[77]: Copied! <pre>df_melt = df.reset_index().melt(id_vars='index',var_name='en',value_name='rate')\nprint(df_melt.head())\n\nfig, ax = plt.subplots()\nsns.lineplot(data=df_melt, x='index',y='rate', hue='en',ax=ax)\nsns.lineplot(data=fr, x = fr.index, y=fr['obs'],ax=ax,color='red')\n</pre> df_melt = df.reset_index().melt(id_vars='index',var_name='en',value_name='rate') print(df_melt.head())  fig, ax = plt.subplots() sns.lineplot(data=df_melt, x='index',y='rate', hue='en',ax=ax) sns.lineplot(data=fr, x = fr.index, y=fr['obs'],ax=ax,color='red') <pre>   index en         rate\n0      0  0  1662.804774\n1      1  0  1537.433320\n2      2  0  1422.593057\n3      3  0  1317.310452\n4      4  0  1220.710038\n</pre> Out[77]: <pre>&lt;AxesSubplot:xlabel='index', ylabel='rate'&gt;</pre> In\u00a0[82]: Copied! <pre>nd = 1\nind_hist = 99\n\nens_use = ens.copy()\n\nfig, ax = plt.subplots(5,5,figsize=(15,15))\nax = ax.flatten()\nc=0\nfor i in range(ind_hist):\n    d_obs_i = fr['obs'].iloc[i].reshape(1,1)\n    df_all = forward(ens_use,tmax)\n    dfi = df_all.iloc[i,:].values.reshape((1,ne))\n    m_b = ens_use.mean(axis=1).reshape((3,1)) #mean ensable props\n    d_b = dfi.mean(axis=1) #Mean timestep i in all ensembles\n    m_e = ens_use - m_b # difference ensemble and mean of ensembles\n    d_e = dfi - d_b # difference sim data timestep all ensembles and its mean\n    \n    #3x500 500x1\n    cmd = np.matmul(m_e,d_e.T)/(ne-1)\n    \n    #1x500 500x1\n    cdd = np.matmul(d_e,d_e.T)/(ne-1)\n    \n    #kalman Gain 3X1\n    # k_gain = cmd/(np.square(sd.iloc[i])+cdd[0,0])\n    k_gain = cmd/(np.square(sd.iloc[i])+cmd)\n    epsi = rng.standard_normal((1,1))*sd.iloc[i]\n    \n    #3x1 1x500\n    ens_use = ens_use + np.matmul(k_gain,d_obs_i+epsi-dfi)\n    \n    if i%4==0:\n        df_melt = df_all.reset_index().melt(id_vars='index',var_name='en',value_name='rate')\n        sns.lineplot(data=df_melt, x='index',y='rate', hue='en',ax=ax[c],legend=False) \n        sns.lineplot(data=fr, x = fr.index, y=fr['obs'],ax=ax[c],color='red')\n        ax[c].set_title(f'{i}')\n        c+=1\n</pre> nd = 1 ind_hist = 99  ens_use = ens.copy()  fig, ax = plt.subplots(5,5,figsize=(15,15)) ax = ax.flatten() c=0 for i in range(ind_hist):     d_obs_i = fr['obs'].iloc[i].reshape(1,1)     df_all = forward(ens_use,tmax)     dfi = df_all.iloc[i,:].values.reshape((1,ne))     m_b = ens_use.mean(axis=1).reshape((3,1)) #mean ensable props     d_b = dfi.mean(axis=1) #Mean timestep i in all ensembles     m_e = ens_use - m_b # difference ensemble and mean of ensembles     d_e = dfi - d_b # difference sim data timestep all ensembles and its mean          #3x500 500x1     cmd = np.matmul(m_e,d_e.T)/(ne-1)          #1x500 500x1     cdd = np.matmul(d_e,d_e.T)/(ne-1)          #kalman Gain 3X1     # k_gain = cmd/(np.square(sd.iloc[i])+cdd[0,0])     k_gain = cmd/(np.square(sd.iloc[i])+cmd)     epsi = rng.standard_normal((1,1))*sd.iloc[i]          #3x1 1x500     ens_use = ens_use + np.matmul(k_gain,d_obs_i+epsi-dfi)          if i%4==0:         df_melt = df_all.reset_index().melt(id_vars='index',var_name='en',value_name='rate')         sns.lineplot(data=df_melt, x='index',y='rate', hue='en',ax=ax[c],legend=False)          sns.lineplot(data=fr, x = fr.index, y=fr['obs'],ax=ax[c],color='red')         ax[c].set_title(f'{i}')         c+=1        <pre>\n  File \"&lt;ipython-input-82-6484897a8bad&gt;\", line 27\n    epsi = rng.standard_normal((1,1))*  .iloc[i]\n                                        ^\nSyntaxError: invalid syntax\n</pre> In\u00a0[79]: Copied! <pre>ens_df = pd.DataFrame(\n    np.concatenate((ens.T,ens_use.T),axis=0),\n    columns=['qi','di','b']\n)\nens_df.loc[0:ne-1,'type'] = 'initial'\nens_df.loc[ne:,'type'] = 'final'\nens_df.reset_index(inplace=True)\nens_df_melt = ens_df.melt(\n    id_vars=['index','type'],\n    value_vars=['qi','di','b'],\n    value_name='values',\n    var_name='props'\n)\nens_df_melt\n</pre> ens_df = pd.DataFrame(     np.concatenate((ens.T,ens_use.T),axis=0),     columns=['qi','di','b'] ) ens_df.loc[0:ne-1,'type'] = 'initial' ens_df.loc[ne:,'type'] = 'final' ens_df.reset_index(inplace=True) ens_df_melt = ens_df.melt(     id_vars=['index','type'],     value_vars=['qi','di','b'],     value_name='values',     var_name='props' ) ens_df_melt Out[79]: index type props values 0 0 initial qi 1662.804774 1 1 initial qi 1743.672095 2 2 initial qi 1545.578964 3 3 initial qi 1723.948011 4 4 initial qi 1829.155536 ... ... ... ... ... 571 187 final b 0.527129 572 188 final b 0.455712 573 189 final b 0.461036 574 190 final b 0.496380 575 191 final b 0.399547 <p>576 rows \u00d7 4 columns</p> In\u00a0[80]: Copied! <pre>g = sns.FacetGrid(\n    data = ens_df_melt,\n    col='props',\n    hue = 'type',\n    sharex=False\n)\ng.map_dataframe(sns.histplot,x='values')\ng.add_legend()\n</pre> g = sns.FacetGrid(     data = ens_df_melt,     col='props',     hue = 'type',     sharex=False ) g.map_dataframe(sns.histplot,x='values') g.add_legend() Out[80]: <pre>&lt;seaborn.axisgrid.FacetGrid at 0x7fb231f9d370&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"}]}